{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-03-02T17:55:52.474925+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-03-02T17:56:14.371596+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "PnU9cE+yDQCtK050An6zEg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This is the [[SPL Grammar]] with recursion temporarily removed, so we can extract the PP class."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-03-02T17:56:16.429867+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-03-02T17:56:31.809043+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "N3mZcU+yDQCvJqQfAn6zEg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "After extraction the recursion must be fixed, and all the test cases added."
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-03-02T17:56:33.338174+01:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2023-03-02T17:56:45.985158+01:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Jfisck+yDQCwyoqZAn6zEg=="
				},
				"code" : "keyword := ('var' asPParser , #letter asPParser not)\r\t\t/ ('if' asPParser , #letter asPParser not)\r\t\t/ ('else' asPParser , #letter asPParser not)\r\t\t/ ('while' asPParser , #letter asPParser not)\r\t\t/ ('true' asPParser , #letter asPParser not)\r\t\t/ ('false' asPParser , #letter asPParser not)\r\t\t/ ('and' asPParser , #letter asPParser not)\r\t\t/ ('or' asPParser , #letter asPParser not).\r\ridentifier := keyword not, #letter asPParser, #word asPParser star.\r\rboolean := 'true' asPParser trim / 'false' asPParser trim.\rinteger := ($- asPParser optional , #digit asPParser plus , $. asPParser not)\r\t\ttrim.\rfloat := ($- asPParser optional , #digit asPParser plus , $. asPParser\r\t\t, #digit asPParser plus) trim.\rnumber := integer / float.\rstring := $\" asPParser , $\" asPParser negate plus , $\" asPParser.\r\rvarDecl := 'var' asPParser trim , identifier , $; asPParser trim.\r\rprimary := boolean / number / string / identifier. \"to extend\"\r\runary := primary.\t\"to do\"\r\rfactor := unary.\rterm := factor , ('-' asPParser trim / '+' asPParser trim , factor) star.\rcomparison := term\r\t\t, ('>=' asPParser trim / '>' asPParser trim / '<=' asPParser trim\r\t\t\t\t/ '<' asPParser trim , term) star.\requality := comparison\r\t\t, ('!=' asPParser trim / '==' asPParser trim , comparison) star.\rlogicAnd := equality , ('and' asPParser trim , equality) star.\rlogicOr := logicAnd , ('or' asPParser trim , logicAnd) star.\r\rassignment := (identifier trim , $= asPParser trim , logicOr) / logicOr.\t\"Add recursive case\"\r\rexpression := assignment.\rexprStmt := expression , $; asPParser trim.\r\r\"statement := PP2DelegateNode new.\"\r\rprintStmt := 'print' asPParser trim , expression , $; asPParser trim.\r\rifStmt := 'if' asPParser trim , $( asPParser trim , expression\r\t\t, $) asPParser trim \", statement\" , ('else' asPParser trim \", statement\") optional.\r\r\rwhileStmt := 'while' asPParser trim , $( asPParser trim , expression\r\t\t, $) asPParser trim \", statement\".\r\r\r\"declaration := PP2DelegateNode new.\"\r\rblock := '{' asPParser trim \", declaration star\" , $} asPParser trim.\r\rstatement := ifStmt / printStmt / whileStmt / exprStmt / block.\r\r\rdeclaration := varDecl / statement.\rprogram := declaration star end."
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2023-03-02T17:55:52.448535+01:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2023-03-02T17:55:52.448535+01:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "SPL Grammar without recursion"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "b10d3d70-4fb2-0d00-ad2a-eae8027eb312"
	}
}