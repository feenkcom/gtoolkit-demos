{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:42:52.764341+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:42:52.764341+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "OPvEk+uZDQCu9wl4C0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "# Exercise 5"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:43:06.634203+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:43:16.751467+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "aZ+YlOuZDQCu+V25C0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "In the upcoming exercises, we will implement *Man, Don't Get Angry / Mensch ärgere Dich nicht / Ludo*  \n(see its [Wikipedia article](https://de.wikipedia.org/wiki/Mensch_%C3%A4rgere_Dich_nicht), a \nsimple board game that can be played by up to four people. By applying the concepts that have been covered so far \n(for example, object-oriented design principles, unit testing, responsibility driven design), we aim for a well-designed \nimplementation of some basic features in this first exercise. In the second exercise, we will continue to add features until we \nhave a fully functional game. Therefore, building a solid foundation in this exercise will pay off in the long run."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:43:11.210863+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:43:19.253909+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "AnXelOuZDQCu+ijYC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Problem Description"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:43:29.437565+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:43:34.333916+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "F5T0leuZDQCu+6CwC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "*Man, Don't Get Angry / Mensch ärgere Dich nicht / Ludo* is a board game that requires at least 2 players. \nThe board is rectangular with tiles (or squares; we use both terms interchangeably here) that represent paths along \nwhich a player has to walk. In a regular game each player would have four pieces/tokens, but in our case there will be only two per player. The goal of the player is to move all their pieces around the board \nand land at their home tiles. The first player who reaches the home tile with all pieces wins the game."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:43:37.573661+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:43:37.573661+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "V7VwluuZDQCu/IrbC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### Game Rules"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:43:42.99337+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:43:42.99337+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "j2fDluuZDQCu/TjzC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "We use the following rules for our game. If something is unclear or missing, refer to the original rules stated on \n[Wikipedia](https://de.wikipedia.org/wiki/Mensch_%C3%A4rgere_Dich_nicht). \nHowever, we will simplify parts of the rules, so that the exercise does not become overwhelming."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:43:49.905697+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:43:54.493132+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "2+Qsl+uZDQCu/u6LC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "- The game has four players. For this exercise, you do not need to consider two or three player versions of the game. \nWe will focus on only four player version game.\n- Each player starts with two pieces (also called tokens) in one corner, not four as in the original.\n- Players move their tokens clockwise along the board.\n- Players take turns rolling the die.\n- When rolling a six, a player **must** move a piece on the board onto his starting square (the next `*' square). Then rolls the dice again.\n- If the player has rolled a six, but does not have any pieces left to put on the board, he can move any one of his pieces for six squares/tiles. \n  Then he can roll the dice again. In general: Every time a person rolls a six, he can roll the dice again. If this additional roll is again a six, he places/moves pieces and rolls again, and so on.\n- When rolling any other number, any **one** piece on the route can be moved. However, the die roll cannot be split up among pieces, for example, if the die rolls 5, the player can choose any piece to move for 5 squares. The player\n**cannot** one piece for 2 squares and the other piece for 3 squares. \n- When a player's piece lands on a piece of another player, the player's piece that was already there is placed back to their starting square.\nThe players own pieces cannot be reset in such a way, so the move itself will not be executed. It is not possible to have more than one piece on a square/tile. \nAfterwards, it is the next players turn. \n- When approaching the goal, denoted as '$' on the board, one has to roll the exact number required to get onto the target goal tile; otherwise, the player cannot move at all on that round. If one of the goal already occupied, you have to target the next available goal tile. The aim is to land on any free goal tile.\n- Players that have multiple tokens in play can choose freely which one to move.\n- Should a players last piece be in front of the home, but rolls a six, then the move can not be made. the player **cannot** roll again, and his turn is ended.\n- The player that first fills all his/her goal tiles, wins the game."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:01.806039+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:05.858231+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "e3ril+uZDQCvAEYSC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Note that you will not have to implement all rules in this exercise yet. However, you may want to keep them in mind when \ndesigning and implementing your game basics."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:43:57.957983+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:01.83665+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "KcCnl+uZDQCu/+wcC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Tasks"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:22.064676+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:22.064676+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "sZkXmeuZDQCvAXOjC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "In order to pass this exercise, you need to do the tasks stated here. \nNote that exercises 6 will build on top of this one. You will have to implement the parts described here in any case.\n\nBefore you get started, make sure you understand the game by reading the description of the above-mentioned rules, and clearing up any \nquestions that you might have. Once this is clear, you can start designing and implementing the game."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:26.272469+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:26.272469+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "zs5XmeuZDQCvAhJaC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### Task 1: Initialization"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:30.832495+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:30.832495+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "O2CdmeuZDQCvAwI7C0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "In the first task, we implement basic features of the game. In this stage, the game does not have to be playable yet. \nInstead, you will create the basic classes, properly distribute responsibilities, and test the game setup. \nImplement the following."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:34.719979+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:34.719979+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "H6zYmeuZDQCvBH1VC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "- Representations:\n  - Board,\n  - players,\n  - squares/tiles,\n  - tokens/pieces,\n  - the game (bringing it all together, similar to the Snakes & Ladders `Game` class)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:39.722193+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:48.050951+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "lgclmuuZDQCvBYaYC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "  You can decide yourself what kinds of classes you will use. However, you need to have at least dedicated classes for \nboard, game, players, tokens, and squares. Add additional classes if required.\n\n- Ability to:\n  - Initialize a new board that places four players in their respective corners,\n  - place player tokens on specific squares,\n  - move tokens along the route.\n\n  Note that the last point just means that you can do something like `token.move(3)` or `player.move(token1, 3)` (whichever way you choose to distribute the responsbilities),\n  which moves the selected token of a player by 3 steps. \n  You do not have to implement logic that checks, for example, whether the move is valid, whether it is a \nwinning move, etc. It’s just about moving along the route in a `normal` case.\n  \nMake sure you follow the principles you have learned so far. You should document your code \n(e.g., class, method comments) and write tests, apply responsibility-driven design, and use design by contract where \nappropriate."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:44.154553+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:51.34929+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ealomuuZDQCvBoa5C0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### Task 2: Rendering the board"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:56.522739+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:56.522739+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "YWMlm+uZDQCvB93aC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "A board contains a large amount of information, and your task will be to represent it in a sensible way. \nAgain, you are free to represent the board however you want. Nevertheless, we provide an example board \nhere that you can choose to use, but you are not obliged to. (In case the board is not displayed properly, \ncheck out the file `ludo_board.txt`, which contains the same board.)"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:44:59.366738+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:02.338647+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "3MRQm+uZDQCvCER4C0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "      ####--*####\n         #-$-# B1\n      A0 #-$-#\n      ####-#-####\n      *--A-#--aB-\n      -$$#####$$-\n      -----#----*\n      ####-#-####\n         #-$C# C1\n      D2 #-$-#   \n      ####*--####"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:11.558871+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:11.558871+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ndIKnOuZDQCvCTatC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "In this board, the following symbols are used: "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:17.465925+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:17.465925+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "3/NknOuZDQCvC+1fC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "- `#`, `␣` (space): Drawing; these are non-functional and just serve to give a better idea and boundary of the board. The pieces are not supposed to occupy these.\n- `-`: Unoccupied square/tile.\n- `*`: Starting square of the closest player denotation. (Left is player A, Top is player B, Right is player C, and Bottom is player D)\n- `$`: A player's “home road”.\n- `A`,`a`,`B`,`b`,`C`,`c`,`D`,`d`: Player tokens, so player A's first token is `A`, the second is `a`.\n- `A0`, `A1`, `A2` in the corners (and same for B, C, D): Number of tokens still not on the board. For example, `A2` \n means that player A does not have any tokens on the board yet. `B1` means that player B has a single token on the board. `C0` means that player C has allhis pieces on the board.\n\nIn this iteration, your task is to implement and test a board renderer. To do that, create a class that can render a \ngiven board by generating a string representation. This can then be used in tests or printed using `System.out.print...` \nmethods (more information on this below).\n\nYou should write tests that ensure that your game correctly renders different game configurations, not only the initial \nstate. For example, you should write a test that ensures that tokens are correctly rendered when on a specific tile/square.\n\nHint: Think about what “units” you are testing. For example, rendering tiles with different things occupying them can be\ndone in isolation, you do not have to test the full board. If rendering individual tiles works, then you can use this in\nthe main board renderer. You should also think about who is responsible for rendering what. Should a single `Renderer` \nclass take care of everything? Or should there be, for example, classes like `BoardRenderer`, `TileRenderer`, \n`PlayerRenderer` that can be composed?\n\nIn order to mark milestones, we will start using git's tag feature. Tags are used to mark important commits with a name,\nfor example, with a version number. The feature is thoroughly documented \non [git-scm.com](https://git-scm.com/book/en/v2/Git-Basics-Tagging).\n\nUse git to create a tag that marks the finished first stage. Here, we will use annotated tags, which you can create as follows.\n\n```\ngit tag -a v1 -m \"Ludo stage 1\"\n```\n\n### Task 3: Debugger \nAs you write your code and perform your magic, you will certainly run into situations where you don't understand\nyour own magic. At that point, please use the debugger. Take screenshots and use them to explain how the debugger\ncan help wizards in need to solve their problems. Create a markdown file named `debugger.md` where you embed\nthe images and use proper markdown syntax to format the document as you explain your magic spells that helped\nyou unravel the mysteries of your previous work. The file must contain **at least 3 problems** that you fixed using\nthe debugger.\n\n### Task 4: UML Diagram\n\nYour last task of this exercise is to create a **class diagram** of the current state of your game. Include all relevant\nclasses including their relations, variables and methods to give an overview of the project. The purpose of the class\ndiagram is to give newcomers to the project a better idea of all the important parts of your game, so a good level\nof abstraction is key to not litter your diagram with unnecessary details (e.g. private helper methods and so on).\nAdditionally, the class diagram should help you to plan ahead and give you a better understanding of what and how\nyou want to develop in the next two exercises to complete the game. Read through the *Ludo* rules and identify\nthe potential remaining classes that you will likely need to implement and add them as well. Identifying their responsibilities\nnow will ease up the process of adding the upcoming features. \n\nSubmit the class diagram as either an **image or PDF** within the exercise folder and name it `initial_class_diagram_ex5`."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:22.613445+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:24.420426+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "xYCznOuZDQCvDUN1C0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Notes"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:27.066757+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:29.562059+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "MnL3nOuZDQCvD0KBC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "- You are free to design the game as you want, but you should follow the design principles that you learned so far. \n  You can take a look at the Snakes and Ladders implementations we provided in exercise 4 to get an idea of how your class structures could look like. \n\n- We added some classes (without implementations) in the template. You can use them, but if you want, you can also modify or change them (or change them into interfaces if necessary).\n\n- You do not have to implement a fully functional game yet! In this exercise, we focus on initialization, rendering, and (very) basic player movement. \n  You do not need to implement any additional game logic.\n\n- Write proper documentation, such as JavaDoc class and method comments.\n\n- Do not forget about design by contract.\n\n- If you are struggling with the exercise, you are not alone. Get help on the ilias forum, during pool hours, or via assistant mailing list.\n\n- Manage your time responsibly. Do not just start the day before the exercise is due."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:34.640558+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:34.640558+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "pwRrneuZDQCvEV6xC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## **Do not forget** to mention your contributions for the exercise in the `Contributions.md` file."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:37.475733+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:37.475733+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "q0SWneuZDQCvEw6aC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Deadline"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:42:59.019913+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-04-26T09:45:37.505153+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "gHAklOuZDQCu+N8WC0NvOg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The exercise is due on ___Friday, 8 April, 12:00___. Do not forget the `v1` git tag.\n"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-04-26T09:41:31.621873+02:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-04-26T09:41:44.301075+02:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Ludo Exercise 5"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "11ddee8e-eb99-0d00-aed8-fcae0b436f3a"
	}
}