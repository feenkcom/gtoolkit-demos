[
	{
		"key": "Ache00a",
		"type": "inproceedings",
		"ABSTRACT": "The fact that so many different kinds of\n\t\t\t\t  coordination models and languages have been proposed\n\t\t\t\t  suggests that no one single approach will be the\n\t\t\t\t  best for all coordination problems. Different\n\t\t\t\t  coordination styles exhibiting different properties\n\t\t\t\t  may be more suitable for some problems than others.\n\t\t\t\t  Like other architectural styles, coordination styles\n\t\t\t\t  can be expressed in terms of components, connectors\n\t\t\t\t  and composition rules. We propose an approach in\n\t\t\t\t  which coordination styles are expressed as component\n\t\t\t\t  algebras: components of various sorts can be\n\t\t\t\t  combined using operators that realize their\n\t\t\t\t  coordination, yielding other sorts of components.We\n\t\t\t\t  show how several coordination styles can be defined\n\t\t\t\t  and applied using Piccola, a small language for\n\t\t\t\t  composing software components. We furthermore show\n\t\t\t\t  how glue abstractions can be used to bridge\n\t\t\t\t  coordination styles when more than one style is\n\t\t\t\t  needed for a single application.",
		"ADDRESS": "Limassol, Cyprus",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Franz Achermann and Stefan Kneubühl and Oscar Nierstrasz",
		"BOOKTITLE": "Coordination '2000",
		"DOI": "10.1007/3-540-45263-X_2",
		"EDITOR": "António Porto and Gruia-Catalin Roman",
		"ISBN": "978-3-540-41020-1",
		"KEYWORDS": "olit scg-pub piccola scg-none jb00 snf00 scg-coord-00",
		"MONTH": "September",
		"PAGES": "19--35",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Scripting Coordination Styles",
		"URL": "http://scg.unibe.ch/archive/papers/Ache00aScriptingCoordStyles.pdf",
		"VOLUME": "1906",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Ache00aScriptingCoordStyles.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/3-540-45263-X_2"
	},
	{
		"key": "Ache00b",
		"type": "inproceedings",
		"ABSTRACT": "A namespace is a mapping from labels to values. Most\n\t\t\t\t  programming languages support different forms of\n\t\t\t\t  namespaces, such as records, dictionaries, objects,\n\t\t\t\t  environments, packages and even keyword based\n\t\t\t\t  parameters. Typically only a few of these notions\n\t\t\t\t  are first-class, leading to arbitrary restrictions\n\t\t\t\t  and limited abstraction power in the host language.\n\t\t\t\t  Piccola is a small language that unifies various\n\t\t\t\t  notions of namespaces as first-class forms, or\n\t\t\t\t  extensible, immutable records. By making namespaces\n\t\t\t\t  explicit, Piccola is easily able to express various\n\t\t\t\t  abstractions that would normally require more\n\t\t\t\t  heavyweight techniques, such as language extensions\n\t\t\t\t  or metaprogramming.",
		"ADDRESS": "Zürich, Switzerland",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Franz Achermann and Oscar Nierstrasz",
		"BOOKTITLE": "Modular Programning Languages, Proceedings of JMLC 2000 (Joint Modular Languages Conference)",
		"DOI": "10.1007/10722581_8",
		"EDITOR": "Jürg Gutknecht and Wolfgang Weck",
		"ISBN": "978-3-540-67958-5",
		"KEYWORDS": "olit scg-pub piccola scg-none jb00 snf00 scg-coord-00 onhindex(36)",
		"MONTH": "September",
		"PAGES": "77--89",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Explicit Namespaces",
		"URL": "http://scg.unibe.ch/archive/papers/Ache00bExplicitNamespaces.pdf",
		"VOLUME": "1897",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Ache00bExplicitNamespaces.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/10722581_8"
	},
	{
		"key": "Ache00d",
		"type": "inproceedings",
		"ABSTRACT": "Object oriented languages cannot express certain\n\t\t\t\t  composition abstractions due to restricted\n\t\t\t\t  abstraction power. A number of approaches, like SOP\n\t\t\t\t  or AOP overcome this restriction, thus giving the\n\t\t\t\t  programmer more possibilities to get a higher degree\n\t\t\t\t  of separation of concern. We propose forms,\n\t\t\t\t  extensible mappings from labels to values, as\n\t\t\t\t  vehicle to implement and reason about composition\n\t\t\t\t  abstractions. Forms unify a variety of concepts such\n\t\t\t\t  as interfaces, environments, and contexts. We are\n\t\t\t\t  prototyping a composition language where forms are\n\t\t\t\t  the only and ubiquitous first class value. Using\n\t\t\t\t  forms, it is possible compose software artifacts\n\t\t\t\t  focusing on a single concern and thus achieve a high\n\t\t\t\t  degree of separation of concern. We believe that\n\t\t\t\t  using forms it also possible to compare and reason\n\t\t\t\t  about the different composition mechanisms\n\t\t\t\t  proposed.",
		"ADDRESS": "Limerick, Ireland",
		"AUTHOR": "Franz Achermann",
		"BOOKTITLE": "Workshop on Multi-Dimensional Separation of Concerns in Software Engineering (ICSE 2000)",
		"KEYWORDS": "olit scg-pub skip-doi piccola scg-none jb00 snf00 scg-coord-00",
		"MONTH": "June",
		"TITLE": "Language support for feature mixing",
		"URL": "http://scg.unibe.ch/archive/papers/Ache00dFeatureMixing.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Ache00dFeatureMixing.pdf"
	},
	{
		"key": "Ache01a",
		"type": "incollection",
		"ABSTRACT": "Piccola is a language for composing applications\n\t\t\t\t  from software components. It has a small syntax and\n\t\t\t\t  a minimal set of features needed for specifying\n\t\t\t\t  different styles of software composition. The core\n\t\t\t\t  features of Piccola are communicating agents, which\n\t\t\t\t  perform computations, and forms, which are the\n\t\t\t\t  communicated values. Forms are a special notion of\n\t\t\t\t  extensible, immutable records. Forms and agents\n\t\t\t\t  allow us to unify components, static and dynamic\n\t\t\t\t  contexts and arguments for invoking services.\n\t\t\t\t  Through a series of examples, we present a tour of\n\t\t\t\t  Piccola, illustrating how forms and agents suffice\n\t\t\t\t  to express a variety of compositional abstractions\n\t\t\t\t  and styles.",
		"AUTHOR": "Franz Achermann and Oscar Nierstrasz",
		"BOOKTITLE": "Software Architectures and Component Technology",
		"EDITOR": "Mehmet Aksit",
		"ISBN": "0-7923-7576-9",
		"KEYWORDS": "olit scg-pub skip-doi piccola scg-none jb00 snf00 onhindex(102) scg-coord-00",
		"PAGES": "261--292",
		"PUBLISHER": "Kluwer",
		"TITLE": "Applications = Components + Scripts — A Tour of Piccola",
		"URL": "http://scg.unibe.ch/archive/papers/Ache01aTour.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Ache01aTour.pdf"
	},
	{
		"key": "Ache01b",
		"type": "incollection",
		"ABSTRACT": "Although object-oriented languages are well-suited\n\t\t\t\t  to implementing software components, they fail to\n\t\t\t\t  shine in the construction of component-based\n\t\t\t\t  applications, largely because object-oriented design\n\t\t\t\t  tends to obscure a component-based architecture. We\n\t\t\t\t  propose to tackle this problem by clearly separating\n\t\t\t\t  component implementation and composition. Piccola is\n\t\t\t\t  a small \"composition language\" that embodies the\n\t\t\t\t  paradigm of \"applications = components + scripts.\"\n\t\t\t\t  Piccola models components and composition\n\t\t\t\t  abstractions by means of a unifying foundation of\n\t\t\t\t  communicating concurrent agents. Flexibility and\n\t\t\t\t  extensibility are obtained by modelling both\n\t\t\t\t  interfaces to components and the contexts in which\n\t\t\t\t  they live by extensible records, or \"forms\". We\n\t\t\t\t  illustrate the realization of an architectural style\n\t\t\t\t  in Piccola and show how external components may be\n\t\t\t\t  adapted and composed according to the style. We show\n\t\t\t\t  how separating components from their composition can\n\t\t\t\t  improve maintainability.",
		"AUTHOR": "Franz Achermann and Markus Lumpe and Jean-Guy Schneider and Oscar Nierstrasz",
		"BOOKTITLE": "Formal Methods for Distributed Processing — A Survey of Object-Oriented Approaches",
		"EDITOR": "Howard Bowman and John Derrick",
		"ISBN": "0-521-77184-6",
		"KEYWORDS": "olit scg-pub skip-doi pict pi omnrep scg-coord-99 onhindex(96) snf99 piccola scg-none jb00 scg-coord-00",
		"PAGES": "403--426",
		"PUBLISHER": "Cambridge University Press",
		"TITLE": "Piccola — a Small Composition Language",
		"URL": "http://scg.unibe.ch/archive/papers/Ache01bPASCL.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Ache01bPASCL.pdf"
	},
	{
		"key": "Ache05a",
		"type": "article",
		"ABSTRACT": "Although the term “software component” has become\n\t\t\t\t  commonplace, there is no universally accepted\n\t\t\t\t  definition of the term, nor does there exist a\n\t\t\t\t  common foundation for specifying various kinds of\n\t\t\t\t  components and their compositions. We propose such a\n\t\t\t\t  foundation. The Piccola Calculus is a process\n\t\t\t\t  calculus, based on the asynchronous pi-calculus,\n\t\t\t\t  extended with explicit namespaces. The calculus is\n\t\t\t\t  high-level, rather than minimal, and is consequently\n\t\t\t\t  convenient for expressing and reasoning about\n\t\t\t\t  software components, and different styles of\n\t\t\t\t  composition. We motivate and present the calculus,\n\t\t\t\t  and outline how it is used to specify the semantics\n\t\t\t\t  of Piccola, a small composition language. We\n\t\t\t\t  demonstrate how the calculus can be used to simplify\n\t\t\t\t  compositions by partial evaluation, and we briefly\n\t\t\t\t  outline some other applications of the calculus to\n\t\t\t\t  reasoning about compositional styles.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Franz Achermann and Oscar Nierstrasz",
		"CVS": "PiccolaReasoning",
		"DOI": "10.1016/j.tcs.2004.09.022",
		"JOURNAL": "Theoretical Computer Science",
		"KEYWORDS": "snf04 snf05 scg-pub piccola scg-none jb05 context-calculus",
		"NUMBER": "2-3",
		"PAGES": "367--396",
		"TITLE": "A Calculus for Reasoning about Software Components",
		"URL": "http://scg.unibe.ch/archive/papers/Ache05aPiccolaReasoning.pdf",
		"VOLUME": "331",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Ache05aPiccolaReasoning.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.tcs.2004.09.022"
	},
	{
		"key": "Aesc13a",
		"type": "inproceedings",
		"ABSTRACT": "This paper presents a case study of analyzing a legacy PL/1 ecosystem that has grown for 40 years to support the business needs of a large banking company. In order to support the stakeholders in analyzing it we developed St1-PL/1 — a tool that parses the code for association data and computes structural metrics which it then visualizes using top-down interactive exploration. Before building the tool and after demonstrating it to stakeholders we conducted several interviews to learn about legacy ecosystem analysis requirements. We briefly introduce the tool and then present results of analysing the case study. We show that although the vision for the future is to have an ecosystem architecture in which systems are as decoupled as possible the current state of the ecosystem is still removed from this. We also present some of the lessons learned during our discussions with stakeholders which include their interests in automatically assessing the quality of the legacy code.",
		"AUTHOR": "Aeschlimann, Erik and Lungu, Mircea and Nierstrasz, Oscar and Worms, Carl",
		"BOOKTITLE": "Proceedings of the 20th Working Conference on Reverse Engineering, WCRE 2013",
		"DOI": "10.1109/WCRE.2013.6671320",
		"KEYWORDS": "scg-pub snf-asa1 scg13 PL/1 ecosystems static analysis metrics visualization jb14",
		"MEDIUM": "2",
		"PAGES": "441 — 448",
		"PEERREVIEW": "yes",
		"TITLE": "Analyzing PL/1 Legacy Ecosystems: An Experience Report",
		"URL": "http://scg.unibe.ch/archive/papers/Aesc13a-PL1Ecosystem.pdf",
		"YEAR": "2013",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Aesc13a-PL1Ecosystem.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2013.6671320"
	},
	{
		"key": "Alle16a",
		"type": "inproceedings",
		"ABSTRACT": "Software is fundamental to academic research work, both as part of\n\t\tthe method and as the result of research. In June 2016 25 people\n\t\tgathered at Schloss Dagstuhl for a week-long PerSoftware is\n\t\tfundamental to academic research work, both as part of the method\n\t\tand as the result of research. In June 2016 25 people gathered at\n\t\tSchloss Dagstuhl for a week-long Perspectives Workshop and began\n\t\tto develop a manifesto which places emphasis on the scholarly\n\t\tvalue of academic software and on personal responsibility. Twenty\n\t\tpledges cover the recognition of academic software, the academic\n\t\tsoftware process and the intellectual content of academic\n\t\tsoftware. This is still work in progress. Through this lightning\n\t\ttalk, we aim to get feedback and hone these further, as well as to\n\t\tinspire the WSSSPE audience to think about actions they can take\n\t\tthemselves rather than actions they want others to take. We aim to\n\t\tpublish a more fully developed Dagstuhl Manifesto by December\n\t\t2016.spectives Workshop and began to develop a manifesto which\n\t\tplaces emphasis on the scholarly value of academic software and on\n\t\tpersonal responsibility. Twenty pledges cover the recognition of\n\t\tacademic software, the academic software process and the\n\t\tintellectual content of academic software. This is still work in\n\t\tprogress. Through this lightning talk, we aim to get feedback and\n\t\thone these further, as well as to inspire the WSSSPE audience to\n\t\tthink about actions they can take themselves rather than actions\n\t\tthey want others to take. We aim to publish a more fully developed\n\t\tDagstuhl Manifesto by December 2016.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Alice Allen and Cecilia Aragon and Christoph Becker and Jeffrey Carver and Andrei Chiş and Benoit Combemale and Mike Croucher and Kevin Crowston and Daniel Garijo and Ashish Gehani and Carole Goble and Robert Haines and Robert Hirschfeld and James Howison and Kathryn Huff and Caroline Jay and Daniel S. Katz and Claude Kirchner and Kateryna Kuksenok and Ralf Lämmel and Oscar Nierstrasz and Matt Turk and Rob van Nieuwpoort and Matthew Vaughn and Jurgen Vinju",
		"BOOKTITLE": "Proceedings of Workshop on Sustainable Software for Science: Practice and Experiences (WSSSPE 2016)",
		"EDITOR": "Gabrielle Allen and Jeffrey Carver and Sou-Cheng T.\n\t\tChoi and Tom Crick and Michael R. Crusoe and Sandra Gesing and\n\t\tRobert Haines and Michael Heroux and Lorraine J. Hwang and Daniel\n\t\tS. Katz and Kyle E. Niemeyer and Manish Parashar and Colin C.\n\t\tVenters",
		"PUBLISHER": "CEUR",
		"SERIES": "Proceedings of the Fourth Workshop on Sustainable Software for Science: Practice and Experiences (WSSSPE4)",
		"VOLUME": "1686",
		"MEDIUM": "1",
		"KEYWORDS": "scg16 scg-pub jb17 snf-none skip-doi Andrei Chis",
		"LOCATION": "Manchester, UK",
		"PEERREVIEW": "yes",
		"TITLE": "Lightning Talk: “I solemnly pledge” A Manifesto for Personal Responsibility in the Engineering of Academic Software",
		"PDF": "http://ceur-ws.org/Vol-1686/WSSSPE4_paper_15.pdf",
		"URL": "http://scg.unibe.ch/archive/papers/Alle16a-WSSPE.pdf",
		"YEAR": "2016"
	},
	{
		"key": "Arev01a",
		"type": "inproceedings",
		"ABSTRACT": "Integration of architectural descriptions in\n\t\t\t\t  development tools and environments, in order to take\n\t\t\t\t  architectural descriptions into account, is a\n\t\t\t\t  topical issue. Nowadays, the existing formalisms to\n\t\t\t\t  represent software architecture fail in providing a\n\t\t\t\t  clear semantics and only give an intuitive graphical\n\t\t\t\t  representation of the system as a whole. More\n\t\t\t\t  specifically, the framework architectures should\n\t\t\t\t  show the overall design and the specification of the\n\t\t\t\t  points of the variability of the framework, making\n\t\t\t\t  easier the reuse of the architectures, integration\n\t\t\t\t  with others frameworks and a reference to measure\n\t\t\t\t  the changes in subsequent versions of the\n\t\t\t\t  frameworks. In this paper we propose an approach to\n\t\t\t\t  describe the architecture of frameworks, combining\n\t\t\t\t  formal and non-formal formalisms: Wright, an\n\t\t\t\t  architectural description language developed at\n\t\t\t\t  Carnegie Mellon University, and architectural\n\t\t\t\t  patterns. Based on the study of several frameworks,\n\t\t\t\t  our objective was to produce a complete description\n\t\t\t\t  of a framework, to show the expressive power of both\n\t\t\t\t  approaches and to consider complementarity and\n\t\t\t\t  flexibility regarding to other approaches.",
		"AUTHOR": "Gabriela Arévalo and Isabelle Borne",
		"BOOKTITLE": "Proceedings of Langages et Modeles à Objets (LMO'01)",
		"KEYWORDS": "scg-old scg-pub skip-doi arevalo",
		"MONTH": "January",
		"PUBLISHER": "Hermes, Paris",
		"TITLE": "Architectural Description of Object Oriented Frameworks",
		"URL": "http://scg.unibe.ch/archive/papers/Arev01aLMO01.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Arev01aLMO01.pdf"
	},
	{
		"key": "Arev02a",
		"type": "inproceedings",
		"ABSTRACT": "This paper proposes the use of the formal technique\n\t\t\t\t  of Concept Analysis to analyse how classes in an\n\t\t\t\t  object-oriented inheritance hierarchy are coupled by\n\t\t\t\t  means of the inheritance and interfaces\n\t\t\t\t  relationships. To perform our analysis, we use the\n\t\t\t\t  information provided by the self-send and super-send\n\t\t\t\t  behaviour of each class in the hierarchy. Especially\n\t\t\t\t  for large and complex inheritance hierarchies, we\n\t\t\t\t  believe that this analysis can help in understanding\n\t\t\t\t  the software, in particular with how reuse is\n\t\t\t\t  achieved. Additionally, the proposed technique\n\t\t\t\t  allows us to identify weak spots in the inheritance\n\t\t\t\t  hierarchy that may be improved, and to serve as\n\t\t\t\t  guidelines for extending or customising an\n\t\t\t\t  object-oriented application framework. As a first\n\t\t\t\t  step, this position paper reports on an initial\n\t\t\t\t  experiment with the Magnitude hierarchy in the\n\t\t\t\t  Smalltalk programming language.",
		"AUTHOR": "Gabriela Arévalo and Tom Mens",
		"BOOKTITLE": "ECOOP 2002: Proceedings of the Inheritance Workshop",
		"EDITOR": "Andrew Black and Erik Ernst and Peter Grogono and Markky Sakkinen",
		"KEYWORDS": "snf02 scg-pub skip-doi scg-none jb02 arevalo",
		"MONTH": "June",
		"PAGES": "3--9",
		"PUBLISHER": "University of Jyväskylä",
		"TITLE": "Analysing Object Oriented Application Frameworks using Concept Analysis",
		"URL": "http://scg.unibe.ch/archive/papers/Arev02aECOOP02ApplicationFrameworks.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Arev02aECOOP02ApplicationFrameworks.pdf"
	},
	{
		"key": "Arev02b",
		"type": "inproceedings",
		"ABSTRACT": "This paper proposes to use the formal technique of\n\t\t\t\t  Concept Analysis to analyse how methods and classes\n\t\t\t\t  in an object-oriented inheritance hierarchy are\n\t\t\t\t  coupled by means of the inheritance and interfaces\n\t\t\t\t  relationships. Especially for large and complex\n\t\t\t\t  inheritance hierarchies, we believe that a formal\n\t\t\t\t  analysis of how behaviour is reused can provide\n\t\t\t\t  insight in how the hierarchy was built and the\n\t\t\t\t  different relationships among the classes. To\n\t\t\t\t  perform this analysis, we use behavioural\n\t\t\t\t  information provided by the self sends and super\n\t\t\t\t  sends made in each class of the hierarchy. The\n\t\t\t\t  proposed technique allows us to identify weak spots\n\t\t\t\t  in the inheritance hierarchy that may be improved,\n\t\t\t\t  and to serve as guidelines for extending or\n\t\t\t\t  customising an object-oriented application\n\t\t\t\t  framework. As a first step, this paper reports on an\n\t\t\t\t  initial experiment with the Magnitude hierarchy in\n\t\t\t\t  the Smalltalk programming language.",
		"AUTHOR": "Gabriela Arévalo and Tom Mens",
		"BOOKTITLE": "Advances in Object-oriented Information Systems: OOIS 2002 Workshops",
		"EDITOR": "Jean-Michel Bruel and Zohra Bellahsene",
		"KEYWORDS": "snf02 scg-pub skip-doi scg-none jb02 arevalo",
		"MONTH": "September",
		"PAGES": "53--63",
		"PUBLISHER": "Springer Verlag",
		"TITLE": "Analysing Object Oriented Framework Reuse using Concept Analysis",
		"URL": "http://scg.unibe.ch/archive/papers/Arev02bOOIS02FrameworkReuse.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Arev02bOOIS02FrameworkReuse.pdf"
	},
	{
		"key": "Arev03a",
		"type": "inproceedings",
		"ABSTRACT": "The functionalities of software artifacts are\n\t\t\t\t  defined by structural and behavioral dependencies.\n\t\t\t\t  During evolution and maintenance phases of a system,\n\t\t\t\t  the developer has to be able to understand how these\n\t\t\t\t  dependencies were defined and how they influence the\n\t\t\t\t  interaction of the artifacts. The developer must be\n\t\t\t\t  sure that modifications done in the system will not\n\t\t\t\t  break its behavior. In the most of the cases, this\n\t\t\t\t  happens because the dependencies are not documented.\n\t\t\t\t  We propose to tackle this problem in the context of\n\t\t\t\t  object oriented classes hierarchies using Concept\n\t\t\t\t  Analysis. We use different properties about\n\t\t\t\t  invocations in methods to analyze the dependencies\n\t\t\t\t  among the hierarchy classes in terms of class\n\t\t\t\t  behaviour. Based on these results, we show a set of\n\t\t\t\t  patterns that describe repeated kinds of behavior in\n\t\t\t\t  class hierarchies. We show the application of these\n\t\t\t\t  patterns in the specific case of Magnitude hierarchy\n\t\t\t\t  in Smalltalk.",
		"AUTHOR": "Gabriela Arévalo",
		"BOOKTITLE": "Proceedings of Langages et Modeles à Objets (LMO'03)",
		"KEYWORDS": "snf03 scg-pub skip-doi scg-none jb03 arevalo",
		"MONTH": "January",
		"PAGES": "47--59",
		"PUBLISHER": "Hermes, Paris",
		"TITLE": "Understanding Behavioral Dependencies in Class Hierarchies using Concept Analysis",
		"URL": "http://scg.unibe.ch/archive/papers/Arev03aLMO03UnderstandingDependencies.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Arev03aLMO03UnderstandingDependencies.pdf"
	},
	{
		"key": "Arev03b",
		"type": "inproceedings",
		"ABSTRACT": "Within object oriented software, the minimal unit of\n\t\t\t\t  development and testing is a class. So understanding\n\t\t\t\t  how a class is defined and behaves is important.\n\t\t\t\t  Considering that a class is composed of instance\n\t\t\t\t  variables and methods, the process is not so easy to\n\t\t\t\t  achieve because we must decide which different\n\t\t\t\t  viewpoints can help us to detect features of a\n\t\t\t\t  class. These viewpoints can include identifying\n\t\t\t\t  groups of methods accessing a (set of) instance\n\t\t\t\t  variable(s), groups of methods that interact among\n\t\t\t\t  themselves to provide a functionality or groups of\n\t\t\t\t  methods that behave as interface. Thus, with these\n\t\t\t\t  different groups, we are able to know the different\n\t\t\t\t  hidden characteristics of a class. In this position\n\t\t\t\t  paper, we propose to apply Concept Analysis to\n\t\t\t\t  generate the different groups of (collaborating)\n\t\t\t\t  entities and use these groups to define different\n\t\t\t\t  views. These views will help us to get the main\n\t\t\t\t  features of a class.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Gabriela Arévalo",
		"BOOKTITLE": "Proceedings of WOOR 2003 (4th International Workshop on Object-Oriented Reengineering)",
		"CVS": "ConAnWOOR03XRayViews",
		"KEYWORDS": "recast03 scg-pub skip-doi scg-none jb03 arevalo moose-pub",
		"MONTH": "July",
		"PAGES": "76--80",
		"PUBLISHER": "University of Antwerp",
		"TITLE": "X-Ray Views on a Class using Concept Analysis",
		"URL": "http://scg.unibe.ch/archive/papers/Arev03bWOOR03XRayViews.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Arev03bWOOR03XRayViews.pdf"
	},
	{
		"key": "Arev03c",
		"type": "inproceedings",
		"ABSTRACT": "Understanding the internal workings of classes is a\n\t\t\t\t  key prerequisite to maintaining an object-oriented\n\t\t\t\t  software system. Unfortunately, classical editing\n\t\t\t\t  and browsing tools offer mainly linear and textual\n\t\t\t\t  views of classes and their implementation. These\n\t\t\t\t  views fail to expose the semantic relationships\n\t\t\t\t  between the internal parts of a class. We propose\n\t\t\t\t  XRay views --a technique based on Concept Analysis--\n\t\t\t\t  which reveal the internal relationships between\n\t\t\t\t  groups of methods and attributes of a class. XRay\n\t\t\t\t  views are composed out of elementary collaborations\n\t\t\t\t  between attributes and methods, and help the\n\t\t\t\t  engineer to build a mental model of how a class\n\t\t\t\t  works internally. In this paper we present XRay\n\t\t\t\t  views, and illustrate the approach by applying it on\n\t\t\t\t  the Smalltalk class UIBuilder.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Gabriela Arévalo and Stéphane Ducasse and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of 18th Conference on Automated Software Engineering (ASE'03)",
		"CVS": "ConAnASE03XRayViews",
		"DOI": "10.1109/ASE.2003.1240318",
		"KEYWORDS": "recast03 scg-pub stefPub moose-pub arevalo scg-none jb04",
		"MONTH": "October",
		"NOTE": "Short paper",
		"PAGES": "267--270",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "X-Ray Views: Understanding the Internals of Classes",
		"URL": "http://scg.unibe.ch/archive/papers/Arev03cASE03XRayViews.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Arev03cASE03XRayViews.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ASE.2003.1240318"
	},
	{
		"key": "Arev03d",
		"type": "inproceedings",
		"ABSTRACT": "Understanding the internal workings of classes is a\n\t\t\t\t  key prerequisite to maintaining an object-oriented\n\t\t\t\t  software system. Unfortunately, classical editing\n\t\t\t\t  and browsing tools offer mainly linear and textual\n\t\t\t\t  views of classes and their implementation. These\n\t\t\t\t  views fail to expose the semantic relationships\n\t\t\t\t  between the internal parts of a class. We propose\n\t\t\t\t  XRay views --a technique based on Concept Analysis--\n\t\t\t\t  which reveal the internal relationships between\n\t\t\t\t  groups of methods and attributes of a class. XRay\n\t\t\t\t  views are composed out of elementary collaborations\n\t\t\t\t  between attributes and methods and help the engineer\n\t\t\t\t  to build a mental model of how a class works\n\t\t\t\t  internally. In this paper we present XRay views, and\n\t\t\t\t  illustrate the approach by applying it to three\n\t\t\t\t  Smalltalk classes: OrderedCollection, Scanner, and\n\t\t\t\t  UIBuilder.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Gabriela Arévalo and Stéphane Ducasse and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of 2nd International Workshop on MASPEGHI 2003 (ASE 2003)",
		"CVS": "ConAnMASPEGHI03XRayViews",
		"KEYWORDS": "snf04 scg-pub skip-doi stefPub arevalo scg-none jb04 moose-pub",
		"MONTH": "October",
		"PAGES": "9--18",
		"PUBLISHER": "CRIM — University of Montreal (Canada)",
		"TITLE": "Understanding Classes using X-Ray Views",
		"URL": "http://scg.unibe.ch/archive/papers/Arev03dMASPEGHI03XRayViews.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Arev03dMASPEGHI03XRayViews.pdf"
	},
	{
		"key": "Arev04a",
		"type": "inproceedings",
		"ABSTRACT": "A key problem during software development and\n\t\t\t\t  maintenance is to detect and recognize recurring\n\t\t\t\t  collaborations among software artifacts that are\n\t\t\t\t  implicit in the code. These collaboration patterns\n\t\t\t\t  are typically signs of applied idioms, conventions\n\t\t\t\t  and design patterns during the development of the\n\t\t\t\t  system, and may entail implicit contracts that\n\t\t\t\t  should be respected during maintenance, but are not\n\t\t\t\t  documented explicitly. In this paper we apply Formal\n\t\t\t\t  Concept Analysis to detect implicit collaboration\n\t\t\t\t  patterns. Our approach generalizes Antoniol and\n\t\t\t\t  Tonella one for detecting classical design patterns.\n\t\t\t\t  We introduce a variation to their algorithm to\n\t\t\t\t  reduce the computation time of the concepts, a\n\t\t\t\t  language-independent approach for object-oriented\n\t\t\t\t  languages, and a post-processing phase in which\n\t\t\t\t  pattern candidates are filtered out. We identify\n\t\t\t\t  collaboration patterns in the analyzed applications,\n\t\t\t\t  match them against libraries of known design\n\t\t\t\t  patterns, and establish relationships between\n\t\t\t\t  detected patterns and their nearest neighbours.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Gabriela Arévalo and Frank Buchli and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of WCRE '04 (11th Working Conference on Reverse Engineering)",
		"CVS": "ConAnPatternsWCRE04",
		"DOI": "10.1109/WCRE.2004.18",
		"KEYWORDS": "olit scg-pub scg-none jb05 recast05 snf04 arevalo moose-pub",
		"LOCATION": "Delft, The Netherlands",
		"MONTH": "November",
		"PAGES": "122--131",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Detecting Implicit Collaboration Patterns",
		"URL": "http://scg.unibe.ch/archive/papers/Arev04aWCRE04CollaborationPatterns.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Arev04aWCRE04CollaborationPatterns.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2004.18"
	},
	{
		"key": "Arev05b",
		"type": "inproceedings",
		"ABSTRACT": "Object-oriented applications are difficult to extend\n\t\t\t\t  and maintain, due to the presence of implicit\n\t\t\t\t  dependencies in the inheritance hierarchy. Although\n\t\t\t\t  these dependencies often correspond to well-known\n\t\t\t\t  schemas, such as hook and template methods, new\n\t\t\t\t  unanticipated dependency schemas occur in practice,\n\t\t\t\t  and can consequently be hard to recognize and\n\t\t\t\t  detect. To tackle this problem, we have applied\n\t\t\t\t  Concept Analysis to automatically detect recurring\n\t\t\t\t  dependency schemas in class hierarchies used in\n\t\t\t\t  object-oriented applications. In this paper we\n\t\t\t\t  describe our mapping of OO dependencies to the\n\t\t\t\t  formal framework of Concept Analysis, we apply our\n\t\t\t\t  approach to a non-trivial case study, and we report\n\t\t\t\t  on the kinds of dependencies that are uncovered with\n\t\t\t\t  this technique. As a result, we show how the\n\t\t\t\t  discovered dependency schemas correspond not only to\n\t\t\t\t  good design practices, but also to bad smells in\n\t\t\t\t  design.",
		"ACCEPTNUM": "33",
		"ACCEPTTOTAL": "81",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Gabriela Arévalo and Stéphane Ducasse and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of 9th European Conference on Software Maintenance and Reengineering (CSMR'05)",
		"CVS": "ConAnCSMR05ClassHierarchies",
		"DOI": "10.1109/CSMR.2005.24",
		"IMPACTFACTOR": "hors",
		"KEYWORDS": "scg-pub arevalo scg-none jb05 recast05 stefPub moose-pub",
		"LOCATION": "Manchester, United Kingdom",
		"MISC": "acceptance rate: 33/81 = 41",
		"MONTH": "March",
		"PAGES": "62--71",
		"PUBLISHER": "IEEE Computer Society",
		"RATE": "41%",
		"SELECTIF": "non",
		"TITLE": "Discovering Unanticipated Dependency Schemas in Class Hierarchies",
		"URL": "http://scg.unibe.ch/archive/papers/Arev05bCSMR05ClassHierarchies.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Arev05bCSMR05ClassHierarchies.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/CSMR.2005.24"
	},
	{
		"key": "Arev05c",
		"type": "inproceedings",
		"ABSTRACT": "A key difficulty in the maintenance and evolution of\n\t\t\t\t  complex software systems is to recognize and\n\t\t\t\t  understand the implicit dependencies that define\n\t\t\t\t  contracts that must be respected by changes to the\n\t\t\t\t  software. Formal Concept Analysis is a\n\t\t\t\t  well-established technique for identifying groups of\n\t\t\t\t  elements with common sets of properties. We have\n\t\t\t\t  successfully applied FCA to complex software systems\n\t\t\t\t  in order to automatically discover a variety of\n\t\t\t\t  different kinds of implicit, recurring sets of\n\t\t\t\t  dependencies amongst design artifacts. In this paper\n\t\t\t\t  we describe our approach, outline three case\n\t\t\t\t  studies, and draw various lessons from our\n\t\t\t\t  experiences. In particular, we discuss how our\n\t\t\t\t  approach is applied iteratively in order to draw the\n\t\t\t\t  maximum benefit offered by FCA.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Gabriela Arévalo and Stéphane Ducasse and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of 3rd International Conference on Formal Concept Analysis (ICFCA '05)",
		"CVS": "ConAnICFCA05LessonsLearned",
		"DOI": "10.1007/b105806",
		"IMPACTFACTOR": "hors",
		"KEYWORDS": "scg-pub scg-none jb05 recast05 arevalo stefPub",
		"LOCATION": "Lens, France",
		"MONTH": "February",
		"PAGES": "95--112",
		"PUBLISHER": "Springer Verlag",
		"SELECTIF": "non",
		"SERIES": "LNAI (Lecture Notes in Artificial Intelligence)",
		"TITLE": "Lessons Learned in Applying Formal Concept Analysis",
		"URL": "http://scg.unibe.ch/archive/papers/Arev05cICFCA05LessonsLearned.pdf",
		"VOLUME": "3403",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Arev05cICFCA05LessonsLearned.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/b105806"
	},
	{
		"key": "Arya11a",
		"type": "inproceedings",
		"ABSTRACT": "Software dependencies play a vital role in program comprehension, change impact\n\t\t\tanalysis and other software maintenance activities. Traditionally, these activities are\n\t\t\tsupported by source code analysis, however, the source code is sometimes inaccessible,\n\t\t\tand not all stakeholders have adequate knowledge to perform such analysis. For example,\n\t\t\tnon-technical domain experts and consultants raise most maintenance requests, however,\n\t\t\tthey cannot predict the cost and impact of the requested changes without the support of\n\t\t\tthe developers. We propose a novel approach to predict software dependencies by\n\t\t\texploiting coupling present in domain-level information. Our approach is independent of\n\t\t\tthe software implementation, hence, it can be used to evaluate architectural\n\t\t\tdependencies without access to the source code or the database. We evaluate our\n\t\t\tapproach with a case study on a large-scale enterprise system, in which we demonstrate\n\t\t\thow up to 68% of the source code dependencies and 77% of the database dependencies are\n\t\t\tpredicted solely based on domain information.",
		"AUTHOR": "Amir Aryani and Fabrizio Perin and Mircea Lungu and Abdun Naser Mahmood and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 18th Working Conference on Reverse Engineering (WCRE 2011)",
		"DOI": "10.1109/WCRE.2011.17",
		"ISSN": "1095-1350",
		"KEYWORDS": "internationalconference scg-pub snf-none ercim11 jb12 scg11",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "55-64",
		"PEERREVIEW": "yes",
		"TITLE": "Can We Predict Dependencies Using Domain information?",
		"URL": "http://scg.unibe.ch/archive/papers/Aria11aWCRE11.pdf",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Aria11aWCRE11.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2011.17"
	},
	{
		"key": "Arya14a",
		"type": "article",
		"ABSTRACT": "Software dependencies play a vital role in programme comprehension, change impact\n\t\tanalysis and other software maintenance activities. Traditionally, these activities are\n        supported by source code analysis; however, the source code is sometimes inaccessible or\n        difficult to analyse, as in hybrid systems composed of source code in multiple languages\n        using various paradigms (e.g. object-oriented programming and relational databases).\n        Moreover, not all stakeholders have adequate knowledge to perform such analyses. For\n        example, non-technical domain experts and consultants raise most maintenance requests;\n        however, they cannot predict the cost and impact of the requested changes without the\n        support of the developers. We propose a novel approach to predicting software dependencies\n        by exploiting the coupling present in domain-level information. Our approach is\n        independent of the software implementation; hence, it can be used to approximate\n        architectural dependencies without access to the source code or the database. As such, it\n        can be applied to hybrid systems with heterogeneous source code or legacy systems with\n        missing source code. In addition, this approach is based solely on information visible and\n        understandable to domain users; therefore, it can be efficiently used by domain experts\n        without the support of software developers. We evaluate our approach with a case study on\n        a large-scale enterprise system, in which we demonstrate how up to 65% of the source code\n        dependencies and 77 of the database dependencies are predicted solely based on domain\n        information.",
		"AUTHOR": "Aryani, Amir and Perin, Fabrizio and Lungu, Mircea and Mahmood, Abdun Naser and Nierstrasz, Oscar",
		"DOI": "10.1002/smr.1598",
		"ISSN": "2047-7481",
		"JOURNAL": "Journal of Software: Evolution and Process",
		"KEYWORDS": "scg-pub snf-asa1 scg14 jb13 domain-based coupling, architectural dependencies, database dependencies, source code analysis, programme comprehension",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"ANNOTE": "internationaljournal",
		"NB": "Was Arya13a",
		"NUMBER": "1",
		"PAGES": "50--76",
		"TITLE": "Predicting dependencies using domain-based coupling",
		"URL": "http://scg.unibe.ch/archive/papers/Arya14aJSME.pdf",
		"VOLUME": "26",
		"YEAR": "2014",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Arya14aJSME.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1002/smr.1598"
	},
	{
		"key": "Bali06a",
		"type": "inproceedings",
		"ABSTRACT": "Copy-paste programming is dangerous as it may lead\n\t\t\t\t  to hidden dependencies between different parts of\n\t\t\t\t  the system. Modifying clones is not always straight\n\t\t\t\t  forward, because we might not know all the places\n\t\t\t\t  that need modification. This is even more of a\n\t\t\t\t  problem when several developers need to know about\n\t\t\t\t  how to change the clones. In this paper, we\n\t\t\t\t  correlate the code clones with the time of the\n\t\t\t\t  modification and with the developer that performed\n\t\t\t\t  the modification to detect patterns of how\n\t\t\t\t  developers copy from one another. We develop a\n\t\t\t\t  visualization, named Clone Evolution View, to\n\t\t\t\t  represent the evolution of the duplicated code. We\n\t\t\t\t  show the relevance of our approach on several large\n\t\t\t\t  case studies and we distill our experience in forms\n\t\t\t\t  of interesting copy patterns.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Mihai Balint and Tudor Gîrba and Radu Marinescu",
		"BOOKTITLE": "Proceedings of International Conference on Program Comprehension (ICPC 2006)",
		"DOI": "10.1109/ICPC.2006.25",
		"KEYWORDS": "scg-pub scg-none jb06 fb06 girba moose-pub recast06 norex06",
		"MEDIUM": "2",
		"PAGES": "56--65",
		"PEERREVIEW": "yes",
		"TITLE": "How Developers Copy",
		"URL": "http://scg.unibe.ch/archive/papers/Bali06aHowDevelopersCopy.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Bali06aHowDevelopersCopy.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICPC.2006.25"
	},
	{
		"key": "Berg03a",
		"type": "inproceedings",
		"ABSTRACT": "Classical module systems support well the modular\n\t\t\t\t  development of applications but do not offer the\n\t\t\t\t  ability to add or replace a method in a class that\n\t\t\t\t  is not defined in that module. On the other hand,\n\t\t\t\t  languages that support method addition and\n\t\t\t\t  replacement do not provide a modular view of\n\t\t\t\t  applications, and their changes have a global\n\t\t\t\t  impact. The result is a gap between module systems\n\t\t\t\t  for object-oriented languages on one hand, and the\n\t\t\t\t  very desirable feature of method addition and\n\t\t\t\t  replacement on the other hand. To solve these\n\t\t\t\t  problems we present classboxes, a module system for\n\t\t\t\t  object-oriented languages that provides method\n\t\t\t\t  addition and replacement. Moreover, the changes made\n\t\t\t\t  by a classbox are only visible to that classbox (or\n\t\t\t\t  classboxes that import it), a feature we call local\n\t\t\t\t  rebinding. To validate the model, we have\n\t\t\t\t  implemented it in the Squeak Smalltalk environment,\n\t\t\t\t  and performed experiments modularising code.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Alexandre Bergel and Stéphane Ducasse and Roel Wuyts",
		"BOOKTITLE": "Proceedings of Joint Modular Languages Conference (JMLC'03)",
		"DOI": "10.1007/b12023",
		"INRIA": "hors",
		"ISBN": "978-3-540-40796-6",
		"KEYWORDS": "snf03 scg-pub scg-none jb03 module stefPub classbox alexandrePub alexPub noWorkshop",
		"MISC": "Best Paper Award",
		"PAGES": "122--131",
		"PUBLISHER": "Springer-Verlag",
		"SELECTIF": "non",
		"SERIES": "LNCS",
		"TITLE": "Classboxes: A Minimal Module Model Supporting Local Rebinding",
		"URL": "http://scg.unibe.ch/archive/papers/Berg03aClassboxes.pdf http://www.springerlink.com/index/G5C3J6EB427YCDH2",
		"VOLUME": "2789",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Berg03aClassboxes.pdf%20http://www.springerlink.com/index/G5C3J6EB427YCDH2",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/b12023"
	},
	{
		"key": "Berg03b",
		"type": "inproceedings",
		"ABSTRACT": "Classical module systems support well the modular\n\t\t\t\t  development of applications but do not offer the\n\t\t\t\t  ability to add or replace a method in a class that\n\t\t\t\t  is not defined in that module. On the other hand,\n\t\t\t\t  languages that support method addition and\n\t\t\t\t  replacement do not provide a modular view of\n\t\t\t\t  applications, and their changes have a global\n\t\t\t\t  impact. The result is a gap between module systems\n\t\t\t\t  for object-oriented languages on one hand, and the\n\t\t\t\t  very desirable feature of method addition and\n\t\t\t\t  replacement on the other hand. To solve these\n\t\t\t\t  problems we present classboxes, a module system for\n\t\t\t\t  object-oriented languages that provides method\n\t\t\t\t  addition and replacement. Moreover, the changes made\n\t\t\t\t  by a classbox are only visible to that classbox (or\n\t\t\t\t  classboxes that import it), a feature we call local\n\t\t\t\t  rebinding. To validate the model, we have\n\t\t\t\t  implemented it in the Squeak Smalltalk environment,\n\t\t\t\t  and performed experiments modularising code.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres05",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Alexandre Bergel and Stéphane Ducasse and Roel Wuyts",
		"BOOKTITLE": "Proceedings of the ECOOP '03 Workshop on Object-oriented Language Engineering for the Post-Java Era",
		"INRIA": "hors",
		"KEYWORDS": "snf03 scg-pub skip-doi scg-none jb03 stefPub alexandrePub module classbox alexPub",
		"MONTH": "July",
		"SELECTIF": "non",
		"TITLE": "The Classbox Module System",
		"URL": "http://scg.unibe.ch/archive/papers/Berg03bClassboxes.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Berg03bClassboxes.pdf"
	},
	{
		"key": "Berg04a",
		"type": "techreport",
		"ABSTRACT": "A class extension is a method that is defined in a\n\t\t\t\t  module, but whose class is defined elsewhere. Class\n\t\t\t\t  extensions offer a convenient way to incrementally\n\t\t\t\t  modify existing classes when subclassing is\n\t\t\t\t  inappropriate. Unfortunately existing approaches\n\t\t\t\t  suffer from various limitations. Either class\n\t\t\t\t  extensions have a global impact, with possibly\n\t\t\t\t  negative effects for unexpected clients, or they\n\t\t\t\t  have a purely local impact, with negative results\n\t\t\t\t  for collaborating clients. Furthermore, conflicting\n\t\t\t\t  class extensions are either disallowed, or resolved\n\t\t\t\t  by linearization, with consequent negative effects.\n\t\t\t\t  To solve these problems we present classboxes, a\n\t\t\t\t  module system for object-oriented languages that\n\t\t\t\t  provides for method addition and replacement.\n\t\t\t\t  Moreover, the changes made by a classbox are only\n\t\t\t\t  visible to that classbox (or classboxes that import\n\t\t\t\t  it), a feature we call local rebinding. To validate\n\t\t\t\t  the model we have implemented it in the Squeak\n\t\t\t\t  Smalltalk environment, and performed benchmarks.",
		"ADDRESS": "Universität Bern, Switzerland",
		"AERES": "AP",
		"AERESSTATUS": "aeres05",
		"ANNOTE": "report notrefereed technicalReport",
		"AUTHOR": "Alexandre Bergel and Stéphane Ducasse and Oscar Nierstrasz and Roel Wuyts",
		"CLASSIFICATION": "D.1.5 Object-oriented Programming; D.3.3 Language Constructs and Features",
		"GENERAL_TERMS": "Inheritance, Mixins, Multiple Inheritance, Traits, Reuse, Smalltalk",
		"INRIA": "hors",
		"INSTITUTION": "Institut für Informatik",
		"KEYWORDS": "snf-redundant scg-pub skip-doi scg-none jb04 snf04 stefPub alexPub alexandrePub",
		"MISC": "ClassboxTR04",
		"MONTH": "June",
		"NUMBER": "IAM-04-003",
		"SELECTIF": "non",
		"TITLE": "Classboxes: Controlling Visibility of Class Extensions",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Berg04aIAM-04-003.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Berg04aIAM-04-003.pdf"
	},
	{
		"key": "Berg04c",
		"type": "inproceedings",
		"ABSTRACT": "With prototype-based languages, concretization and\n\t\t\t\t  abstraction are unified into a single concept a\n\t\t\t\t  prototype. Prototype-based languages are based on a\n\t\t\t\t  simple set of principles: object-centered\n\t\t\t\t  representation, dynamic reshape of objects, cloning\n\t\t\t\t  and possibly message delegation. However, they all\n\t\t\t\t  differ in the interpretation and combination of\n\t\t\t\t  these principles. Therefore there is a need to\n\t\t\t\t  compare and understand. In this paper we present\n\t\t\t\t  Prototalk, a research and teaching vehicle to\n\t\t\t\t  understand, implement and compare prototype-based\n\t\t\t\t  languages. Prototalk is a framework that offers a\n\t\t\t\t  predefined set of language data structures and\n\t\t\t\t  mechanisms that can be composed and extended to\n\t\t\t\t  generate various prototype-based language\n\t\t\t\t  interpreters. It presents a classification of\n\t\t\t\t  languages based on different mechanisms in an\n\t\t\t\t  operational manner.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres05",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Alexandre Bergel and Christophe Dony and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of 12th International Smalltalk Conference (ISC'04)",
		"CVS": "PrototalkESUG04",
		"INRIA": "hors",
		"KEYWORDS": "scg-pub skip-doi scg-none jb05 snf04 stefPub alexPub alexandrePub noWorkshop",
		"MONTH": "September",
		"PAGES": "107--130",
		"SELECTIF": "non",
		"TITLE": "Prototalk: an Environment for Teaching, Understanding, Designing and Prototyping Object-Oriented Languages",
		"URL": "http://scg.unibe.ch/archive/papers/Berg04cprototalk.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Berg04cprototalk.pdf"
	},
	{
		"key": "Berg05a",
		"type": "article",
		"ABSTRACT": "A class extension is a method that is defined in a\n\t\t\t\t  module, but whose class is defined elsewhere. Class\n\t\t\t\t  extensions offer a convenient way to incrementally\n\t\t\t\t  modify existing classes when subclassing is\n\t\t\t\t  inappropriate. Unfortunately existing approaches\n\t\t\t\t  suffer from various limitations. Either class\n\t\t\t\t  extensions have a global impact, with possibly\n\t\t\t\t  negative effects for unexpected clients, or they\n\t\t\t\t  have a purely local impact, with negative results\n\t\t\t\t  for collaborating clients. Furthermore, conflicting\n\t\t\t\t  class extensions are either disallowed, or resolved\n\t\t\t\t  by linearization, with consequent negative effects.\n\t\t\t\t  To solve these problems we present classboxes, a\n\t\t\t\t  module system for object-oriented languages that\n\t\t\t\t  provides for method addition and replacement.\n\t\t\t\t  Moreover, the changes made by a classbox are only\n\t\t\t\t  visible to that classbox (or classboxes that import\n\t\t\t\t  it), a feature we call local rebinding. To validate\n\t\t\t\t  the model we have implemented it in the Squeak\n\t\t\t\t  Smalltalk environment, and performed benchmarks.",
		"AERES": "ACL",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Alexandre Bergel and Stéphane Ducasse and Oscar Nierstrasz and Roel Wuyts",
		"CVS": "ClassboxESUG04",
		"DOI": "10.1016/j.cl.2004.11.002",
		"IMPACTFACTOR": "0.467, SCI",
		"INRIA": "hors",
		"JOURNAL": "Journal of Computer Languages, Systems and Structures",
		"KEYWORDS": "scg-pub snf-actsc scg-none jb05 classbox snf05 stefPub onhindex(62) alexPub",
		"MISC": "SCI impact factor 0.467",
		"MONTH": "December",
		"NUMBER": "3-4",
		"PAGES": "107--126",
		"PUBLISHER": "Elsevier",
		"SELECTIF": "non",
		"TITLE": "Classboxes: Controlling Visibility of Class Extensions",
		"URL": "http://scg.unibe.ch/archive/papers/Berg05aclassboxesJournal.pdf",
		"VOLUME": "31",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Berg05aclassboxesJournal.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.cl.2004.11.002"
	},
	{
		"key": "Berg05b",
		"type": "inproceedings",
		"ABSTRACT": "Unanticipated changes to complex software systems\n\t\t\t\t  can introduce anomalies such as duplicated code,\n\t\t\t\t  suboptimal inheritance relationships and a\n\t\t\t\t  proliferation of run-time downcasts. Refactoring to\n\t\t\t\t  eliminate these anomalies may not be an option, at\n\t\t\t\t  least in certain stages of software evolution.\n\t\t\t\t  Classboxes are modules that restrict the visibility\n\t\t\t\t  of changes to selected clients only, thereby\n\t\t\t\t  offering more freedom in the way unanticipated\n\t\t\t\t  changes may be implemented, and thus reducing the\n\t\t\t\t  need for convoluted design anomalies. In this paper\n\t\t\t\t  we demonstrate how classboxes can be implemented in\n\t\t\t\t  statically-typed languages like Java. We also\n\t\t\t\t  present an extended case study of Swing, a Java\n\t\t\t\t  GUI package built on top of AWT, and we document the\n\t\t\t\t  ensuing anomalies that Swing introduces. We show how\n\t\t\t\t  Classbox/J, a prototype implementation of classboxes\n\t\t\t\t  for Java, is used to provide a cleaner\n\t\t\t\t  implementation of Swing using local refinement\n\t\t\t\t  rather than subclassing.",
		"ACCEPTNUM": "25",
		"ACCEPTTOTAL": "142",
		"ADDRESS": "New York, NY, USA",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference topconference",
		"AUTHOR": "Alexandre Bergel and Stéphane Ducasse and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of 20th International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA'05)",
		"DOI": "10.1145/1094811.1094826",
		"INRIA": "hors",
		"KEYWORDS": "snf05 stefPub alexPub snf06 scg-none jb06 scg-pub onhindex(97)",
		"MISC": "acceptance rate: 25/142 = 17",
		"PAGES": "177--189",
		"PUBLISHER": "ACM Press",
		"RATE": "17%",
		"SELECTIF": "oui",
		"TITLE": "Classbox/J: Controlling the Scope of Change in Java",
		"URL": "http://scg.unibe.ch/archive/papers/Berg05bclassboxjOOPSLA.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Berg05bclassboxjOOPSLA.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1094811.1094826"
	},
	{
		"key": "Berg05c",
		"type": "article",
		"ABSTRACT": "Each object-oriented programming language proposes\n\t\t\t\t  various grouping mechanisms to bundle interacting\n\t\t\t\t  classes (i.e., packages, modules, selector\n\t\t\t\t  namespaces, etc). To understand such diversity and\n\t\t\t\t  to compare the different approaches, a common\n\t\t\t\t  foundation is needed. As far as we are aware of, no\n\t\t\t\t  major attempt that would go in that direction has\n\t\t\t\t  been realized. In this paper we present a simple\n\t\t\t\t  module calculus together with a set of operators for\n\t\t\t\t  modeling the composition semantics of different\n\t\t\t\t  grouping mechanisms. Using this module calculus we\n\t\t\t\t  are able to express the semantics of Java\n\t\t\t\t  packages, C# namespaces, Ruby modules, selector\n\t\t\t\t  namespaces, gbeta classes, classboxes, MZScheme\n\t\t\t\t  units, and MixJuice modules. This calculus supports\n\t\t\t\t  the identification of system families sharing\n\t\t\t\t  similar characteristics. In addition it provides a\n\t\t\t\t  uniform way to represent and analyze fine-grained\n\t\t\t\t  module semantics.",
		"AERES": "ACL",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Alexandre Bergel and Stéphane Ducasse and Oscar Nierstrasz",
		"CVS": "ModuleAnalysisJUCS05",
		"IMPACTFACTOR": "0.337, SCI",
		"INRIA": "hors",
		"JOURNAL": "Journal of Universal Computer Science",
		"KEYWORDS": "scg-pub skip-doi scg-none jb06 classbox snf06 stefPub alexPub listic",
		"MISC": "SCI impact factor 0.337",
		"MONTH": "November",
		"NUMBER": "10",
		"PAGES": "1613--1644",
		"SELECTIF": "non",
		"TITLE": "Analyzing Module Diversity",
		"URL": "http://scg.unibe.ch/archive/papers/Berg05cModuleDiversity.pdf",
		"URL2": "http://www.jucs.org/jucs_11_10/analyzing_module_diversity",
		"VOLUME": "11",
		"YEAR": "2005",
		"BDSK-URL-1": "http://www.jucs.org/jucs_11_10/analyzing_module_diversity%20http://scg.unibe.ch/archive/papers/Berg05cModuleDiversity.pdf"
	},
	{
		"key": "Berg05d",
		"type": "inproceedings",
		"ABSTRACT": "On the one hand, traits are a powerful way of\n\t\t\t\t  structuring classes. Traits support the reuse of\n\t\t\t\t  method collections over several classes. However,\n\t\t\t\t  traits cannot be used when specifying unanticipated\n\t\t\t\t  changes to an application. On the other hand,\n\t\t\t\t  classboxes are a new module system that supports the\n\t\t\t\t  local redefinition of classes: a collection of\n\t\t\t\t  classes can be locally extended with variables\n\t\t\t\t  and/or methods and the existing clients do not get\n\t\t\t\t  impacted by changes. However, an extension applied\n\t\t\t\t  to a class by a classbox cannot be reused for other\n\t\t\t\t  classes. This paper describes how combining Traits\n\t\t\t\t  and Classboxes supports the safe introduction of\n\t\t\t\t  crosscutting collaborations: safe because the\n\t\t\t\t  existing clients of the classes do not get impacted,\n\t\t\t\t  crosscutting because collaborations between several\n\t\t\t\t  classes can be put in place in a unanticipated\n\t\t\t\t  manner. In the resulting system, a collaboration is\n\t\t\t\t  represented by a classbox and a role by a trait.",
		"ADDRESS": "Erfurt, Germany",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "nationalconference",
		"AUTHOR": "Alexandre Bergel and Stéphane Ducasse",
		"BOOKTITLE": "Net.ObjectDays (NODE'05)",
		"INRIA": "hors",
		"KEYWORDS": "snf05 scg-none jb06 scg-pub skip-doi alexPub stefPub listic",
		"MONTH": "September",
		"PAGES": "61--75",
		"SELECTIF": "non",
		"TITLE": "Supporting Unanticipated Changes with Traits and Classboxes",
		"URL": "http://scg.unibe.ch/archive/papers/Berg05dTraitsClassbox.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Berg05dTraitsClassbox.pdf"
	},
	{
		"key": "Berg05e",
		"type": "article",
		"ABSTRACT": "Atomically introducing changes to a group of classes\n\t\t\t\t  is a challenging task. In addition, certain\n\t\t\t\t  applications require that changes be applied\n\t\t\t\t  dynamically without shutting down and restarting the\n\t\t\t\t  application. In this paper we present an extension\n\t\t\t\t  of classboxes to make them dynamic. A classbox is a\n\t\t\t\t  kind of module that supports class extension and\n\t\t\t\t  instance variable addition. Class extensions and\n\t\t\t\t  definitions defined in a classbox represent an\n\t\t\t\t  aspect. In addition, with classboxes, aspects are\n\t\t\t\t  dynamically applied to, removed from hot- in a\n\t\t\t\t  system. Such aspects may crosscut a large number of\n\t\t\t\t  classes which are extended by adding or redefining\n\t\t\t\t  existing methods and adding new instance variables.\n\t\t\t\t  Finally the aspects are scoped i.e., they are local\n\t\t\t\t  to the classboxes that define them.",
		"AERES": "ACT",
		"ANNOTE": "nationaljournal",
		"AUTHOR": "Alexandre Bergel and Stéphane Ducasse",
		"CVS": "ClassboxJFDLPA04",
		"INRIA": "hors",
		"JOURNAL": "Revue des Sciences et Technologies de l'Information (RSTI) — L'Objet (Numéro spécial : Programmation par aspects)",
		"KEYWORDS": "scg-pub skip-doi scg-none jb05 classboxes snf05 stefPub alexandrePub alexPub listic",
		"MONTH": "November",
		"NUMBER": "3",
		"PAGES": "53--68",
		"PUBLISHER": "Hermes, Paris",
		"SELECTIF": "non",
		"TITLE": "Scoped and Dynamic Aspects with Classboxes",
		"URL": "http://scg.unibe.ch/archive/papers/Berg05eDynamicClassboxes.pdf",
		"VOLUME": "11",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Berg05eDynamicClassboxes.pdf"
	},
	{
		"key": "Berg06b",
		"type": "inproceedings",
		"ABSTRACT": "Prototyping new programming languages is often\n\t\t\t\t  assimilated as a task requiring heavy expertise in\n\t\t\t\t  parsing and compilation. This paper argues that\n\t\t\t\t  choosing as a host platform a language having\n\t\t\t\t  advanced reflective capabilities helps in reducing\n\t\t\t\t  the effort and time spent on developing new language\n\t\t\t\t  related constructs and tools. The Squeak Smalltalk\n\t\t\t\t  implementation provides very expressive reflective\n\t\t\t\t  facilities. In this paper we focus on having methods\n\t\t\t\t  as first class entities, enabling methods\n\t\t\t\t  manipulation as plain standard objects and\n\t\t\t\t  reification of method execution. Powerful language\n\t\t\t\t  related tools and efficient new programming\n\t\t\t\t  constructs can be quickly implemented. ByteSurgeon,\n\t\t\t\t  a bytecode manipulation library, and FacetS, an\n\t\t\t\t  aspect mechanism, serve as illustrations.",
		"AERES": "ACT",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Alexandre Bergel and Marcus Denker",
		"BOOKTITLE": "Proceedings of the ECOOP'06 Workshop on Revival of Dynamic Languages",
		"CVS": "SqueakRSP06",
		"INRIA": "hors",
		"KEYWORDS": "snf06 scg-pub skip-doi scg-none jb06 fb06 alexpub",
		"MEDIUM": "4",
		"MONTH": "July",
		"PEERREVIEW": "yes",
		"SELECTIF": "non",
		"TITLE": "Prototyping Languages, Related Constructs and Tools with Squeak",
		"URL": "http://scg.unibe.ch/archive/papers/Bergel06bRDLPrototyping.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Bergel06bRDLPrototyping.pdf"
	},
	{
		"key": "Berg07a",
		"type": "inproceedings",
		"ABSTRACT": "Traits offer a fine-grained mechanism to compose\n\t\t\t\t  classes from reusable components while avoiding\n\t\t\t\t  problems of fragility brought by multiple\n\t\t\t\t  inheritance and mixins. Traits as originally\n\t\t\t\t  proposed are stateless, that is, they contain\n\t\t\t\t  only methods, but no instance variables. State can\n\t\t\t\t  only be accessed within traits by accessors, which\n\t\t\t\t  become required methods of the trait.\n\t\t\t\t  Although this approach works reasonably well in\n\t\t\t\t  practice, it means that many traits, viewed as\n\t\t\t\t  software components, are artificially\n\t\t\t\t  incomplete, and classes that use such traits\n\t\t\t\t  may contain significant amounts of boilerplate glue\n\t\t\t\t  code. Although these limitations are largely\n\t\t\t\t  mitigated by proper tool support, we seek a cleaner\n\t\t\t\t  solution that supports stateful traits. The\n\t\t\t\t  key difficulty is how to handle conflicts that arise\n\t\t\t\t  when composed traits contribute instance variables\n\t\t\t\t  whose names clash. We present a solution that is\n\t\t\t\t  faithful to the guiding principle of stateless\n\t\t\t\t  traits: the client retains control of the\n\t\t\t\t  composition. Stateful traits consist of a minimal\n\t\t\t\t  extension to stateless traits in which instance\n\t\t\t\t  variables are purely local to the scope of a trait,\n\t\t\t\t  unless they are explicitly made accessible by the\n\t\t\t\t  composing client of a trait. Naming conflicts are\n\t\t\t\t  avoided, and variables of disjoint traits can be\n\t\t\t\t  explicitly merged by clients. We discuss and compare\n\t\t\t\t  two implementation strategies, and briefly present a\n\t\t\t\t  case study in which stateful traits have been used\n\t\t\t\t  to refactor the trait-based version of the Smalltalk\n\t\t\t\t  collection hierarchy.",
		"ADDRESS": "Berlin Heidelberg",
		"AERES": "ACL",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Alexandre Bergel and Stéphane Ducasse and Oscar Nierstrasz and Roel Wuyts",
		"BOOKTITLE": "Advances in Smalltalk — Proceedings of 14th International Smalltalk Conference (ISC 2006)",
		"DOI": "10.1007/978-3-540-71836-9_3",
		"INRIA": "hors",
		"ISBN": "978-3-540-71835-2",
		"ISSN": "0302-9743",
		"KEYWORDS": "scg07 stefPub scg-pub jb07 snf06 traits",
		"MEDIUM": "2",
		"MONTH": "August",
		"PAGES": "66--90",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer",
		"SELECTIF": "non",
		"SERIES": "LNCS",
		"TITLE": "Stateful Traits",
		"URL": "http://scg.unibe.ch/archive/papers/Berg07aStatefulTraits.pdf",
		"VOLUME": "4406",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Berg07aStatefulTraits.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-540-71836-9_3"
	},
	{
		"key": "Berg07c",
		"type": "inproceedings",
		"ABSTRACT": "Smalltalk is not only an object-oriented programming\n\t\t\t\t  language; it is also known for its extensive\n\t\t\t\t  integrated development environment supporting\n\t\t\t\t  interactive and dynamic programming. While the\n\t\t\t\t  default tools are adequate for browsing the code and\n\t\t\t\t  developing applications, it is often cumbersome to\n\t\t\t\t  extend the environment to support new language\n\t\t\t\t  constructs or to build additional tools supporting\n\t\t\t\t  new ways of navigating and presenting source code.\n\t\t\t\t  In this paper, we present the OmniBrowser, a browser\n\t\t\t\t  framework that supports the definition of browsers\n\t\t\t\t  based on an explicit metamodel. With OmniBrowser a\n\t\t\t\t  domain model is described in a graph and the\n\t\t\t\t  navigation in this graph is specified in its\n\t\t\t\t  associated metagraph. We present how new browsers\n\t\t\t\t  are built from predefined parts and how new tools\n\t\t\t\t  are easily described. The browser framework is\n\t\t\t\t  implemented in the Squeak Smalltalk environment.\n\t\t\t\t  This paper shows several concrete instantiations of\n\t\t\t\t  the framework: a remake of the ubiquitous Smalltalk\n\t\t\t\t  System Browser, and a coverage browser.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Alexandre Bergel and Stéphane Ducasse and Colin Putney and Roel Wuyts",
		"BOOKTITLE": "Advances in Smalltalk — Proceedings of 14th International Smalltalk Conference (ISC 2006)",
		"DOI": "10.1007/978-3-540-71836-9_3",
		"INRIA": "hors",
		"ISBN": "978-3-540-71835-2",
		"ISSN": "0302-9743",
		"KEYWORDS": "scg07 stefPub scg-pub jb07 snf06",
		"MEDIUM": "2",
		"MONTH": "August",
		"PAGES": "134--156",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer",
		"SELECTIF": "non",
		"SERIES": "LNCS",
		"TITLE": "Meta-Driven Browsers",
		"URL": "http://scg.unibe.ch/archive/papers/Berg07cOmnibrowser.pdf",
		"VOLUME": "4406",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Berg07cOmnibrowser.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-540-71836-9_3"
	},
	{
		"key": "Berg08a",
		"type": "article",
		"ABSTRACT": "Page-centric Web application frameworks fail to\n\t\t\t\t  offer adequate solutions to model composition and\n\t\t\t\t  control flow. Seaside allows Web applications to be\n\t\t\t\t  developed in the same way as desktop applications.\n\t\t\t\t  Control flow is modelled as a continuous piece of\n\t\t\t\t  code, and components may be composed, configured and\n\t\t\t\t  nested as one would expect from traditional user\n\t\t\t\t  interface frameworks.",
		"AERES": "AP",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "notrefereed",
		"AUTHOR": "Alexandre Bergel and Stéphane Ducasse and Lukas Renggli",
		"INRIA": "hors",
		"JOURNAL": "ERCIM News",
		"KEYWORDS": "scg-pub snf-none skip-doi alexPub stefPub scg-none jb08",
		"MONTH": "January",
		"SELECTIF": "non",
		"TITLE": "Seaside — Advanced Composition and Control Flow for Dynamic Web Applications",
		"URL": "http://ercim-news.ercim.eu/en72/special/seaside-advanced-composition-and-control-flow-for-dynamic-web-applications",
		"VOLUME": "72",
		"YEAR": "2008",
		"BDSK-URL-1": "http://ercim-news.ercim.org/content/view/325/536/"
	},
	{
		"key": "Berg08b",
		"type": "inproceedings",
		"ABSTRACT": "Following last two years' workshop on dynamic\n\t\t\t\t  languages at the ECOOP conference, the Dyla 2007\n\t\t\t\t  workshop was a successful and popular event. As its\n\t\t\t\t  name implies, the workshop's focus was on dynamic\n\t\t\t\t  languages and their applications. Topics and\n\t\t\t\t  discussions at the workshop included macro expansion\n\t\t\t\t  mechanisms, extension of the method lookup\n\t\t\t\t  algorithm, language interpretation, reflexivity and\n\t\t\t\t  languages for mobile ad hoc networks. The main goal\n\t\t\t\t  of this workshop was to bring together different\n\t\t\t\t  dynamic language communities and favouring cross\n\t\t\t\t  communities interaction. Dyla 2007 was organised as\n\t\t\t\t  a full day meeting, partly devoted to presentation\n\t\t\t\t  of submitted position papers and partly devoted to\n\t\t\t\t  tool demonstration. All accepted papers can be\n\t\t\t\t  downloaded from the workshop's web site. In this\n\t\t\t\t  report, we provide an overview of the presentations\n\t\t\t\t  and a summary of discussions.",
		"AERES": "DO",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "workshopproceedings",
		"AUTHOR": "Alexandre Bergel and Wolfgang De Meuter and Stéphane Ducasse and Oscar Nierstrasz and Roel Wuyts",
		"BOOKTITLE": "Object-Oriented Technology. ECOOP 2007 Workshop Reader",
		"DOI": "10.1007/978-3-540-78195-0",
		"INRIA": "hors",
		"ISBN": "978-3-540-78194-3",
		"KEYWORDS": "scg07 scg-pub stefPub jb08 snf-none",
		"MEDIUM": "2",
		"PAGES": "7--12",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"SELECTIF": "non",
		"SERIES": "LNCS",
		"TITLE": "Dynamic Languages and Applications, Report on the Workshop Dyla'07 at ECOOP 2007",
		"URL": "http://scg.unibe.ch/archive/papers/Berg08bDyla07Report.pdf",
		"URL2": "http://www.springer.com/computer/programming/book/978-3-540-78194-3",
		"VOLUME": "4906",
		"YEAR": "2008",
		"BDSK-URL-1": "http://dyla2007.unibe.ch/%20http://scg.unibe.ch/archive/papers/Berg08bDyla07Report.pdf%20http://www.springer.com/computer/programming/book/978-3-540-78194-3",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-540-78195-0"
	},
	{
		"key": "Berg08e",
		"type": "article",
		"ABSTRACT": "Traits offer a fine-grained mechanism to compose\n\t\t\t\t  classes from reusable components while avoiding\n\t\t\t\t  problems of fragility brought by multiple\n\t\t\t\t  inheritance and mixins. Traits as originally\n\t\t\t\t  proposed are stateless, that is, they contain only\n\t\t\t\t  methods, but no instance variables. State can only\n\t\t\t\t  be accessed within stateless traits by accessors,\n\t\t\t\t  which become required methods of the trait. Although\n\t\t\t\t  this approach works reasonably well in practice, it\n\t\t\t\t  means that many traits, viewed as software\n\t\t\t\t  components, are artificially incomplete, and\n\t\t\t\t  classes that use such traits may contain significant\n\t\t\t\t  amounts of boilerplate glue code. We present an\n\t\t\t\t  approach to stateful traits that is faithful to the\n\t\t\t\t  guiding principle of stateless traits: the client\n\t\t\t\t  retains control of the composition. Stateful traits\n\t\t\t\t  consist of a minimal extension to stateless traits\n\t\t\t\t  in which instance variables are purely local to the\n\t\t\t\t  scope of a trait, unless they are explicitly made\n\t\t\t\t  accessible by the composing client of a trait. We\n\t\t\t\t  demonstrate by means of a formal object calculus\n\t\t\t\t  that adding state to traits preserves the flattening\n\t\t\t\t  property: traits contained in a program can be\n\t\t\t\t  compiled away. We discuss and compare two\n\t\t\t\t  implementation strategies, and briefly present a\n\t\t\t\t  case study in which stateful traits have been used\n\t\t\t\t  to refactor the trait-based version of the Smalltalk\n\t\t\t\t  collection hierarchy.",
		"AERES": "ACL",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Alexandre Bergel and Stéphane Ducasse and Oscar Nierstrasz and Roel Wuyts",
		"DOI": "10.1016/j.cl.2007.05.003",
		"IMPACTFACTOR": "0.467, SCI",
		"INRIA": "hors",
		"ISSN": "1477-8424",
		"JOURNAL": "Journal of Computer Languages, Systems and Structures",
		"KEYWORDS": "traits smalltalklite scg07 stefPub scg-pub jb08 snf06",
		"MEDIUM": "2",
		"NUMBER": "2-3",
		"PAGES": "83--108",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Elsevier",
		"SELECTIF": "non",
		"TITLE": "Stateful Traits and their Formalization",
		"URL": "http://scg.unibe.ch/archive/papers/Berg08eStatefulTraits.pdf",
		"VOLUME": "34",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Berg08eStatefulTraits.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.cl.2007.05.003"
	},
	{
		"key": "Berg10d",
		"type": "inproceedings",
		"ABSTRACT": "Code profiling is an essential activity to increase\n\t\t\t\t  software quality. It is commonly employed in a wide\n\t\t\t\t  variety of tasks, such as supporting program\n\t\t\t\t  comprehension, determining execution bottlenecks,\n\t\t\t\t  and assessing code coverage by unit tests. Spy is an\n\t\t\t\t  innovative framework to easily build profilers and\n\t\t\t\t  visualize profiling information. The profiling\n\t\t\t\t  information is obtained by inserting dedicated code\n\t\t\t\t  before or after method execution. The gathered\n\t\t\t\t  profiling information is structured in line with the\n\t\t\t\t  application structure in terms of packages, classes,\n\t\t\t\t  and methods. Spy has been instantiated on four\n\t\t\t\t  occasions so far. We created profilers dedicated to\n\t\t\t\t  test coverage, time execution, type feedback, and\n\t\t\t\t  profiling evolution across version. We also\n\t\t\t\t  integrated Spy in the Pharo IDE. Spy has been\n\t\t\t\t  implemented in the Pharo Smalltalk programming\n\t\t\t\t  language and is available under the MIT license.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Alexandre Bergel and Felipe Baňados and Romain Robbes and David Röthlisberger",
		"BOOKTITLE": "Smalltalks 2010",
		"KEYWORD": "moose-pub",
		"KEYWORDS": "scg11 scg-pub snf-none jb12 roethlisberger skip-doi skip-pdf",
		"LOCATION": "Concepcion del Uruguay, Entre Rios, Argentina",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"TITLE": "Spy: A Flexible Code Profiling Framework",
		"YEAR": "2010"
	},
	{
		"key": "Berg11b",
		"type": "inproceedings",
		"ABSTRACT": "Domain-specific languages and models are increasingly\n\t\t\t\t  used within general-purpose host languages. While traditional\n\t\t\t\t  profiling tools perform well on host language code itself, they\n\t\t\t\t  often fail to provide meaningful results if the developers start\n\t\t\t\t  to build and use abstractions on top of the host language. In\n\t\t\t\t  this paper we motivate the need for dedicated profiling tools\n\t\t\t\t  with three different case studies. Furthermore, we present\n\t\t\t\t  an infrastructure that enables developers to quickly\n\t\t\t\t  prototype new profilers for their domain-specific\n\t\t\t\t  languages and models.",
		"ADDRESS": "Berlin, Heidelberg",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Alexandre Bergel and Oscar Nierstrasz and Lukas Renggli and Jorge Ressia",
		"BOOKTITLE": "Proceedings of the 49th International Conference on Objects, Models, Components and Patterns (TOOLS'11)",
		"DOI": "10.1007/978-3-642-21952-8_7",
		"KEYWORDS": "scg1 scg-pub scg11 jb11 snf11 helvetia bifrost metaspy",
		"MEDIUM": "2",
		"MONTH": "June",
		"PAGES": "68--82",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"RATEX": "28%",
		"SERIES": "LNCS",
		"TITLE": "Domain-Specific Profiling",
		"URL": "http://scg.unibe.ch/archive/papers/Berg11b-Profiling.pdf",
		"VOLUME": "6705",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Berg11b-Profiling.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-642-21952-8_7"
	},
	{
		"key": "Bert03a",
		"type": "inproceedings",
		"ABSTRACT": "Understanding object-oriented legacy systems is a\n\t\t\t\t  complex task exacerbated by the presence of late\n\t\t\t\t  binding and polymorphism. Moreover, the metaphor of\n\t\t\t\t  message sending and the anthropomorphism promoted by\n\t\t\t\t  object-oriented languages makes it difficult to\n\t\t\t\t  statically identify the precise role the objects\n\t\t\t\t  play at run-time. We propose a lightweight\n\t\t\t\t  visualization approach enriched with run-time\n\t\t\t\t  information which allows us to identify precise\n\t\t\t\t  aspects of the objects lifetime such as the role\n\t\t\t\t  played in the creation of other objects and the\n\t\t\t\t  communication architecture they support. Our\n\t\t\t\t  approach not only supports the run-time\n\t\t\t\t  understanding of an application but also allows one\n\t\t\t\t  to evaluate test understanding and test coverage.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Roland Bertuli and Stéphane Ducasse and Michele Lanza",
		"BOOKTITLE": "Proceedings of WOOR 2003 (4th International Workshop on Object-Oriented Reengineering)",
		"KEYWORDS": "snf03 scg-pub skip-doi scg-none jb03 stefPub moose-pub",
		"PAGES": "10--19",
		"PUBLISHER": "University of Antwerp",
		"TITLE": "Run-Time Information Visualization for Understanding Object-Oriented Systems",
		"URL": "http://scg.unibe.ch/archive/papers/Bert03aEcoopWorkshop.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Bert03aEcoopWorkshop.pdf"
	},
	{
		"key": "Blac02a",
		"type": "techreport",
		"ABSTRACT": "Traits are a programming language technology modeled\n\t\t\t\t  after mixins but avoiding their problems. In this\n\t\t\t\t  paper we refactor the Smalltalk collections\n\t\t\t\t  hierarchy using traits. We observed that the\n\t\t\t\t  original hierarchy contained much duplication of\n\t\t\t\t  code; traits let us remove all of it. Traits also\n\t\t\t\t  make possible much more general reuse of collection\n\t\t\t\t  code outside of the existing hierarchy; for example,\n\t\t\t\t  they make it easy to convert other collection-like\n\t\t\t\t  things into true collections. Our refactoring\n\t\t\t\t  reduced the size of the collection hierarchy by\n\t\t\t\t  approximately 12 per cent, with no measurable impact\n\t\t\t\t  on execution efficiency. More importantly,\n\t\t\t\t  understandability and reusability of the code was\n\t\t\t\t  significantly improved, and the path was paved for a\n\t\t\t\t  more intensive refactoring.",
		"ADDRESS": "Universität Bern, Switzerland",
		"ANNOTE": "report notrefereed",
		"AUTHOR": "Andrew P. Black and Nathanael Schärli and Stéphane Ducasse",
		"CLASSIFICATION": "D.2.6 Programming Environments D.2.10 Design D.1.5 Object-oriented Programming; D.3.3 Language Constructs and Features",
		"GENERAL_TERMS": "Inheritance, Mixins, Multiple Inheritance, Traits, Reuse, Smalltalk",
		"INSTITUTION": "Institut für Informatik",
		"KEYWORDS": "snf03 scg-pub skip-doi scg-none jb02 scg-traits stefPub schaerli",
		"MONTH": "November",
		"NOTE": "Also available as Technical Report CSE-02-014, OGI School of Science & Engineering, Beaverton, Oregon, USA",
		"NUMBER": "IAM-02-007",
		"TITLE": "Applying Traits to the Smalltalk Collection Hierarchy",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Blac02aTraitsHierarchy.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Blac02aTraitsHierarchy.pdf"
	},
	{
		"key": "Blac03a",
		"type": "inproceedings",
		"ABSTRACT": "Traits are a programming language technology that\n\t\t\t\t  promote the reuse of methods between unrelated\n\t\t\t\t  classes. This paper reports on a refactoring of the\n\t\t\t\t  Smalltalk collections classes using traits. The\n\t\t\t\t  original collection classes contained much\n\t\t\t\t  duplication of code; traits let us remove all of it.\n\t\t\t\t  We also found places where the protocols of the\n\t\t\t\t  collections lacked uniformity; traits allowed us to\n\t\t\t\t  correct these non-uniformities without code\n\t\t\t\t  duplication. Traits also make it possible to reuse\n\t\t\t\t  fragments of collection code outside of the existing\n\t\t\t\t  hierarchy; for example, they make it easy to convert\n\t\t\t\t  other collection-like things into true collections.\n\t\t\t\t  Our refactoring reduced the number of methods in the\n\t\t\t\t  collection classes by approximately 10 per cent.\n\t\t\t\t  More importantly, understandability maintainability\n\t\t\t\t  and reusability of the code were significantly\n\t\t\t\t  improved.",
		"ACCEPTNUM": "26",
		"ACCEPTTOTAL": "142",
		"ANNOTE": "internationalconference topconference",
		"AUTHOR": "Andrew P. Black and Nathanael Schärli and Stéphane Ducasse",
		"BOOKTITLE": "OOPSLA'03: Proceedings of 17th International Conference on Object-Oriented Programming Systems, Languages and Applications",
		"CVS": "TraitsRefactoringOOPSLA2003",
		"DOI": "10.1145/949305.949311",
		"KEYWORDS": "snf04 scg-pub scg-none jb02 scg-traits stefPub schaerli stlit-traits",
		"MISC": "acceptance rate: 26/142 = 18",
		"MONTH": "October",
		"PAGES": "47--64",
		"TITLE": "Applying Traits to the Smalltalk Collection Hierarchy",
		"URL": "http://scg.unibe.ch/archive/papers/Blac03aTraitsHierarchy.pdf",
		"VOLUME": "38",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Blac03aTraitsHierarchy.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/949305.949311"
	},
	{
		"key": "Blac04a",
		"type": "inproceedings",
		"ABSTRACT": "Traits are an object-oriented programming language\n\t\t\t\t  construct that allow groups of methods to be named\n\t\t\t\t  and reused in arbitrary places in an inheritance\n\t\t\t\t  hierarchy. Classes can use methods from traits as\n\t\t\t\t  well as defining their own methods and instance\n\t\t\t\t  variables. Traits thus enable a new style of\n\t\t\t\t  programming, in which traits rather than classes are\n\t\t\t\t  the primary unit of reuse. However, the additional\n\t\t\t\t  sub-structure provided by traits is always optional:\n\t\t\t\t  a class written using traits can also be viewed as a\n\t\t\t\t  flat collection of methods, with no change in its\n\t\t\t\t  semantics. This paper describes the tool that\n\t\t\t\t  supports these two alternate views of a class,\n\t\t\t\t  called the traits browser, and the programming\n\t\t\t\t  methodology that we are starting to develop around\n\t\t\t\t  the use of traits.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Andrew P. Black and Nathanael Schärli",
		"BOOKTITLE": "Proceedings ICSE 2004",
		"CVS": "TraitsProgrammingICSE2003",
		"DOI": "10.1109/ICSE.2004.1317489",
		"KEYWORDS": "snf04 scg-pub scg-none jb02 scg-traits schaerli",
		"MONTH": "May",
		"PAGES": "676--686",
		"TITLE": "Traits: Tools and Methodology",
		"URL": "http://scg.unibe.ch/archive/papers/Blac04aTraitsTools.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Blac04aTraitsTools.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSE.2004.1317489"
	},
	{
		"key": "Blac07a",
		"type": "book",
		"ABSTRACT": "Squeak by Example, intended for both students and\n\t\t\t\t  developers, will guide you gently through the Squeak\n\t\t\t\t  language and environment by means of a series of\n\t\t\t\t  examples and exercises. This book is made available\n\t\t\t\t  under the Creative Commons Attribution-ShareAlike\n\t\t\t\t  3.0 license.",
		"AERES": "OV",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "book",
		"AUTHOR": "Andrew Black and Stéphane Ducasse and Oscar Nierstrasz and Damien Pollet and Damien Cassou and Marcus Denker",
		"INRIA": "ADAM",
		"ISBN": "978-3-9523341-0-2",
		"KEYWORDS": "scg07 olit scg-pub jb08 snf-none skip-doi",
		"MEDIUM": "2",
		"PEERREVIEW": "no",
		"PUBLISHER": "Square Bracket Associates",
		"TITLE": "Squeak by Example",
		"URL": "https://scg.unibe.ch/assets/archive/books/SBE-2009-09-29.pdf",
		"YEAR": "2007"
	},
	{
		"key": "Blac09a",
		"type": "book",
		"ABSTRACT": "Pharo by Example, intended for both students and\n\t\t\t\t  developers, will guide you gently through the Pharo\n\t\t\t\t  language and environment by means of a series of\n\t\t\t\t  examples and exercises. This book is made available\n\t\t\t\t  under the Creative Commons Attribution-ShareAlike\n\t\t\t\t  3.0 license.",
		"AERES": "OV",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "book",
		"AUTHOR": "Andrew Black and Stéphane Ducasse and Oscar Nierstrasz and Damien Pollet and Damien Cassou and Marcus Denker",
		"INRIA": "ADAM",
		"ISBN": "978-3-9523341-4-0",
		"KEYWORDS": "olit scg09 scg-pub jb09 snf-none skip-doi",
		"MEDIUM": "2",
		"PEERREVIEW": "no",
		"PUBLISHER": "Square Bracket Associates",
		"TITLE": "Pharo by Example",
		"URL": "https://scg.unibe.ch/assets/archive/books/PBE1-2010-02-01.pdf",
		"YEAR": "2009"
	},
	{
		"key": "Blas21a",
		"type": "article",
		"TITLE": "RepliComment: Identifying Clones in Code Comments",
		"ABSTRACT": "Code comments are the primary means to document implementation,\n\tand facilitate program comprehension. Thus, their quality\n\tshould be a primary concern to improve program maintenance.\n\tWhile much effort has been dedicated to detecting bad smells\n\tsuch as clones in code, little work has focused on comments. In\n\tthis paper we present our solution to detect clones in comments\n\tthat developers should fix. RepliComment can automatically\n\tanalyze Java projects and report instances of copy-and-paste\n\terrors in comments, and can point developers to which comments\n\tshould be fixed. Moreover, it can report when clones are signs\n\tof poorly written comments. Developers should fix these\n\tinstances too in order to improve the quality of the code\n\tdocumentation. Our evaluation of ten well-known open source\n\tJava projects identified over 11K instances of comment clones,\n\tand over 1,300 of them are potentially critical. We improve on\n\tour own previous work, which could only find 36 issues in the\n\tsame dataset. Our manual inspection of 412 issues reported by\n\tRepliComment reveals that it achieves a precision of 79 in\n\treporting critical comment clones. The manual inspection of 200\n\tadditional comment clones that RepliComment filters out as\n\tbeing legitimate, could not evince any false negative.",
		"AUTHOR": "Blasi, Arianna and Stulova, Nataliia and Gorla, Alessandra and Nierstrasz, Oscar",
		"JOURNAL": "Journal of Systems & Software",
		"ANNOTE": "internationaljournal",
		"PAGES": "111069",
		"YEAR": "2021",
		"KEYWORDS": "scg-pub snf-asa3 scg21 jb22",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"DOI": "10.1016/j.jss.2021.111069",
		"URL": "http://scg.unibe.ch/archive/papers/Blas21a-RepliComment.pdf"
	},
	{
		"key": "Bolz08a",
		"type": "inproceedings",
		"ABSTRACT": "We report on our experiences with the Spy project,\n\t\t\t\t  including implementation details and benchmark\n\t\t\t\t  results. Spy is a re-implementation of the Squeak\n\t\t\t\t  (i.e., Smalltalk-80) VM using the PyPy toolchain.\n\t\t\t\t  The PyPy project allows code written in RPython, a\n\t\t\t\t  subset of Python, to be translated to a multitude of\n\t\t\t\t  different backends and architectures. During the\n\t\t\t\t  translation, many aspects of the implementation can\n\t\t\t\t  be independently tuned, such as the garbage\n\t\t\t\t  collection algorithm or threading implementation. In\n\t\t\t\t  this way, a whole host of interpreters can be\n\t\t\t\t  derived from one abstract interpreter definition.\n\t\t\t\t  Spy aims to bring these benefits to Squeak, allowing\n\t\t\t\t  for greater portability and, eventually, improved\n\t\t\t\t  performance. The current Spy codebase is able to run\n\t\t\t\t  a small set of benchmarks that demonstrate\n\t\t\t\t  performance superior to many similar Smalltalk VMs,\n\t\t\t\t  but which still run slower than in Squeak itself.\n\t\t\t\t  Spy was built from scratch over the course of a week\n\t\t\t\t  during a joint Squeak-PyPy Sprint in Bern last\n\t\t\t\t  autumn.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Carl Friedrich Bolz and Adrian Kuhn and Adrian Lienhard and Nicholas D. Matsakis and Oscar Nierstrasz and Lukas Renggli and Armin Rigo and Toon Verwaest",
		"BOOKTITLE": "Self-Sustaining Systems",
		"DOI": "10.1007/978-3-540-89275-5_7",
		"ISBN": "978-3-540-89274-8",
		"KEYWORDS": "scg08 scg-pub snf08 jb09 s3 PyPy Spy a hasler08 tverwaes akuhn",
		"MEDIUM": "2",
		"PAGES": "123--139",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer",
		"SERIES": "LNCS",
		"TITLE": "Back to the future in one week — implementing a Smalltalk VM in PyPy",
		"URL": "http://scg.unibe.ch/archive/papers/Bolz08aSpy.pdf",
		"VOLUME": "5142",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Bolz08aSpy.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-540-89275-5_7"
	},
	{
		"key": "Brue08b",
		"type": "inproceedings",
		"ABSTRACT": "Much of the knowledge about software systems is\n\t\t\t\t  implicit, and therefore difficult to recover by\n\t\t\t\t  purely automated techniques. Architectural layers\n\t\t\t\t  and the externally visible features of software\n\t\t\t\t  systems are two examples of information that can be\n\t\t\t\t  difficult to detect from source code alone, and that\n\t\t\t\t  would benefit from additional human knowledge.\n\t\t\t\t  Typical approaches to reasoning about data involve\n\t\t\t\t  encoding an explicit meta-model and expressing\n\t\t\t\t  analyses at that level. Due to its informal nature,\n\t\t\t\t  however, human knowledge can be difficult to\n\t\t\t\t  characterize up-front and integrate into such a\n\t\t\t\t  meta-model. We propose a generic, annotation-based\n\t\t\t\t  approach to capture such knowledge during the\n\t\t\t\t  reverse engineering process. Annotation types can be\n\t\t\t\t  iteratively defined, refined and transformed,\n\t\t\t\t  without requiring a fixed meta-model to be defined\n\t\t\t\t  in advance. We show how our approach supports\n\t\t\t\t  reverse engineering by implementing it in a tool\n\t\t\t\t  called Metanool and by applying it to (i) analyzing\n\t\t\t\t  architectural layering, (ii) tracking reengineering\n\t\t\t\t  tasks, (iii) detecting design flaws, and (iv)\n\t\t\t\t  analyzing features.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Andrea Brühlmann and Tudor Gîrba and Orla Greevy and Oscar Nierstrasz",
		"BOOKTITLE": "International Conference on Model Driven Engineering Languages and Systems (Models 2008)",
		"DOI": "10.1007/978-3-540-87875-9_46",
		"EDITOR": "Krzysztof Czarnecki et al.",
		"ISBN": "978-3-540-87874-2",
		"KEYWORDS": "scg08 scg-pub jb09 hasler08 girba moose-pub annotations meta-modeling",
		"MEDIUM": "2",
		"PAGES": "660-674",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Enriching Reverse Engineering with Annotations",
		"URL": "http://scg.unibe.ch/archive/papers/Brue08b-Metanool.pdf",
		"VOLUME": "5301",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Brue08b-Metanool.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-540-87875-9_46"
	},
	{
		"key": "Brun09a",
		"type": "techreport",
		"ABSTRACT": "Virtual machines emulating hardware devices are\n\t\t\t\t  generally implemented in low-level languages and\n\t\t\t\t  using a low-level style for performance reasons.\n\t\t\t\t  This trend results in largely difficult to\n\t\t\t\t  understand, difficult to extend and unmaintainable\n\t\t\t\t  systems. As new general techniques for virtual\n\t\t\t\t  machines arise, it gets harder to incorporate or\n\t\t\t\t  test these techniques because of early design and\n\t\t\t\t  optimization decisions. In this paper we show how\n\t\t\t\t  such decisions can be postponed to later phases by\n\t\t\t\t  separating virtual machine implementation issues\n\t\t\t\t  from the high-level machine-specific model. We\n\t\t\t\t  construct compact models of whole-system VMs in a\n\t\t\t\t  high-level language, which exclude all low-level\n\t\t\t\t  implementation details. We use the pluggable\n\t\t\t\t  translation toolchain PyPy to translate those models\n\t\t\t\t  to executables. During the translation process, the\n\t\t\t\t  toolchain reintroduces the VM implementation and\n\t\t\t\t  optimization details for specific target platforms.\n\t\t\t\t  As a case study we implement an executable model of\n\t\t\t\t  a hardware gaming device. We show that our approach\n\t\t\t\t  to VM building increases understandability,\n\t\t\t\t  maintainability and extendability while preserving\n\t\t\t\t  performance.",
		"ANNOTE": "report notrefereed",
		"AUTHOR": "Camillo Bruni and Toon Verwaest and Marcus Denker",
		"INSTITUTION": "University of Bern, Institute of Applied Mathematics and Computer Sciences",
		"KEYWORDS": "scg09 scg-pub jb09 snf09 skip-doi tverwaes",
		"MEDIUM": "2",
		"NUMBER": "IAM-09-002",
		"PEERREVIEW": "yes",
		"TITLE": "PyGirl: Generating Whole-System VMs from high-level models using PyPy",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Brun09aPyGirlTechreport.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Brun09aPyGirlTechreport.pdf"
	},
	{
		"key": "Brun09c",
		"type": "inproceedings",
		"ABSTRACT": "Virtual machines (VMs) emulating hardware devices\n\t\t\t\t  are generally implemented in low-level languages for\n\t\t\t\t  performance reasons. This results in unmaintainable\n\t\t\t\t  systems that are difficult to understand. In this\n\t\t\t\t  paper we report on our experience using the PyPy\n\t\t\t\t  toolchain to improve the portability and reduce the\n\t\t\t\t  complexity of whole-system VM implementations. As a\n\t\t\t\t  case study we implement a VM prototype for a\n\t\t\t\t  Nintendo Game Boy, called PyGirl, in which the\n\t\t\t\t  high-level model is separated from low-level VM\n\t\t\t\t  implementation issues. We shed light on the process\n\t\t\t\t  of refactoring from a low-level VM implementation in\n\t\t\t\t  Java to a high-level model in RPython. We show that\n\t\t\t\t  our whole-system VM written with PyPy is\n\t\t\t\t  significantly less complex than standard\n\t\t\t\t  implementations, without substantial loss in\n\t\t\t\t  performance.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Camillo Bruni and Toon Verwaest",
		"BOOKTITLE": "Objects, Components, Models and Patterns, Proceedings of TOOLS Europe 2009",
		"DOI": "10.1007/978-3-642-02571-6_19",
		"KEYWORDS": "scg09 scg-pub jb09 snf09 tverwaes",
		"MEDIUM": "2",
		"PAGES": "328--347",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNBIP",
		"TITLE": "PyGirl: Generating Whole-System VMs from High-Level Prototypes using PyPy",
		"URL": "http://scg.unibe.ch/archive/papers/Brun09cPyGirl.pdf",
		"VOLUME": "33",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Brun09cPyGirl.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-642-02571-6_19"
	},
	{
		"key": "Bueh22a",
		"type": "inproceedings",
		"AUTHOR": "Noah Bühlmann and Mohammad Ghafari",
		"TITLE": "How Do Developers Deal with Security Issue Reports on GitHub?",
		"YEAR": "2022",
		"ISBN": "9781450387132",
		"PUBLISHER": "Association for Computing Machinery",
		"ADDRESS": "New York, NY, USA",
		"URL": "https://arxiv.org/pdf/2112.10359",
		"DOI": "10.1145/3477314.3507123",
		"ABSTRACT": "Security issue reports are the primary means of informing development teams of security\n\t\trisks in projects, but little is known about current practices. We aim to understand the\n\t\tcharacteristics of these reports in open-source projects and uncover opportunities to improve\n\t\tdeveloper practices. We analysed 3 493 security issue reports in 182 different projects on GitHub\n\t\tand manually studied 333 reports, and their discussions and pull requests. We found that, the\n\t\tnumber of security issue reports has increased over time, they are resolved faster, and they are\n\t\treported in earlier development stages compared to past years. Nevertheless, a tiny group of\n\t\tdevelopers are involved frequently, security issues progress slowly, and a great number of them has\n\t\tbeen pending for a long time. We realized that only a small subset of security issue reports\n\t\tinclude reproducibility data, a potential fix is rarely suggested, and there is no hint regarding\n\t\thow a reporter spotted an issue. We noted that the resolution time of an issue is significantly\n\t\tshorter when the first reaction to a security report is fast and when a reference to a known\n\t\tvulnerability exists.",
		"BOOKTITLE": "Proceedings of the 37th ACM/SIGAPP Symposium on Applied Computing",
		"PAGES": "1580--1589",
		"NUMPAGES": "10",
		"KEYWORDS": "scg-pub snf-none security, developer practice, open-source software development",
		"LOCATION": "Virtual Event",
		"SERIES": "SAC '22"
	},
	{
		"key": "Call11a",
		"type": "inproceedings",
		"ABSTRACT": "The dynamic and reflective features of programming\n\t\t\t\t  languages are powerful constructs that programmers often\n\t\t\t\t  mention as extremely useful. However, the ability to\n\t\t\t\t  modify a program at runtime can be both a boon---\n\t\t\t\t  in terms of flexibility---, and a curse---in terms of tool support.\n\t\t\t\t  For instance, usage of these features hampers the design\n\t\t\t\t  of type systems, the accuracy of static analysis techniques,\n\t\t\t\t  or the introduction of optimizations by compilers. In this\n\t\t\t\t  paper, we perform an empirical study of a large Smalltalk\n\t\t\t\t  codebase---often regarded as the poster-child in terms\n\t\t\t\t  of availability of these features---, in order to assess how\n\t\t\t\t  much these features are actually used in practice,\n\t\t\t\t  whether some are used more than others, and in which\n\t\t\t\t  kinds of projects. These results are useful to make informed\n\t\t\t\t  decisions about which features to consider\n\t\t\t\t  when designing language extensions or tool support.",
		"ADDRESS": "New York, NY, USA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Oscar Callaú and Romain Robbes and Éric Tanter and David Röthlisberger",
		"BOOKTITLE": "Proceedings of the 8th Working Conference on Mining Software Repositories (MSR 2011)",
		"DOI": "10.1145/1985441.1985448",
		"JOURNAL": "msr",
		"KEYWORDS": "scg-pub scg11 snf11 jb11 roethlisberger sde-ecosystems",
		"MEDIUM": "2",
		"PAGES": "23--32",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "How Developers Use the Dynamic Features of Programming Languages: The Case of Smalltalk",
		"URL": "http://scg.unibe.ch/archive/papers/Call11aDynamicFeaturesMSR2011.pdf",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Call11aDynamicFeaturesMSR2011.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1985441.1985448"
	},
	{
		"key": "Cara14a",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Andrea Caracciolo and Mircea Lungu and Oscar Nierstrasz",
		"BOOKTITLE": "European Conference on Software Architecture (ECSA)",
		"ABSTRACT": "Software architecture is the result of a design effort\n\t\taimed at ensuring a certain set of quality attributes. As we show,\n\t\tquality requirements are commonly specified in practice but are rarely\n\t\tvalidated using automated techniques. In this paper we analyze and\n\t\tclassify commonly specified quality requirements after interviewing\n\t\tprofessionals and running a survey. We report on tools used to validate\n\t\tthose requirements and comment on the obstacles encountered by\n\t\tpractitioners when performing such activity (e.g., insufficient\n\t\ttool-support; poor understanding of users needs). Finally we discuss\n\t\topportunities for increasing the adoption of automated tools based on\n\t\tthe information we collected during our study (e.g., using a\n\t\tbusiness-readable notation for expressing quality requirements;\n\t\tincreasing awareness by monitoring non-functional aspects of a system).",
		"MONTH": "August",
		"PUBLISHER": "Springer Berlin Heidelberg",
		"SERIES": "Lecture Notes in Computer Science",
		"VOLUME": "8627",
		"PAGES": "374--389",
		"TITLE": "How Do Software Architects Specify and Validate Quality Requirements?",
		"YEAR": "2014",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa1 scg14 jb14 arch-constr-survey",
		"DOI": "10.1007/978-3-319-09970-5_32",
		"URL": "http://scg.unibe.ch/archive/papers/Cara14a-SpecifyValidateQualityRequirements.pdf",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Cara14a-SpecifyValidateQualityRequirements.pdf"
	},
	{
		"key": "Cara14b",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Andrea Caracciolo and Mircea Lungu and Oscar Nierstrasz",
		"ABSTRACT": "Software architecture consists of a set of design choices that can be\n\t\tpartially expressed in form of rules that the implementation must conform to.\n\t\tArchitectural rules are intended to ensure properties that fulfill fundamental\n\t\tnon-functional requirements. Verifying architectural rules is often a non- trivial\n\t\tactivity: available tools are often not very usable and support only a narrow subset of\n\t\tthe rules that are commonly specified by practitioners. In this paper we present a new\n\t\thighly-readable declarative language for specifying architectural rules. With our\n\t\tapproach, users can specify a wide variety of rules using a single uniform notation.\n\t\tRules can get tested by third-party tools by conforming to pre-defined specification\n\t\ttemplates. Practitioners can take advantage of the capabilities of a growing number of\n\t\ttesting tools without dealing with them directly.",
		"TITLE": "Dicto: A Unified DSL for Testing Architectural Rules",
		"BOOKTITLE": "Proceedings of the 2014 European Conference on Software Architecture Workshops",
		"SERIES": "ECSAW '14",
		"YEAR": "2014",
		"ISBN": "978-1-4503-2778-7",
		"LOCATION": "Vienna, Austria",
		"PAGES": "21:1--21:4",
		"ARTICLENO": "21",
		"NUMPAGES": "4",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa1 scg14 jb14 dicto-dsl DSL, Software Architecture, Validation",
		"URL": "http://scg.unibe.ch/archive/papers/Cara14b-Dicto.pdf",
		"DOI": "10.1145/2642803.2642824",
		"ACMID": "2642824",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA"
	},
	{
		"key": "Cara14c",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Andrea Caracciolo and Andrei Chiş and Boris Spasojević and Mircea Lungu",
		"ABSTRACT": "Software corpora facilitate reproducibility of analyses, however, static analysis for an entire corpus still requires considerable effort, often duplicated unnecessarily by multiple users. Moreover, most corpora are designed for single languages increasing the effort for cross-language analysis. To address these aspects we propose Pangea, an infrastructure allowing fast development of static analyses on multi-language corpora. Pangea uses language-independent meta-models stored as object model snapshots that can be directly loaded into memory and queried without any parsing overhead. To reduce the effort of performing static analyses, Pangea provides out-of-the box support for: creating and refining analyses in a dedicated environment, deploying an analysis on an entire corpus, using a runner that supports parallel execution, and exporting results in various formats. In this tool demonstration we introduce Pangea and provide several usage scenarios that illustrate how it reduces the cost of analysis.",
		"TITLE": "Pangea: A Workbench for Statically Analyzing Multi-Language Software Corpora",
		"BOOKTITLE": "Source Code Analysis and Manipulation (SCAM), 2014 IEEE 14th International Working Conference on",
		"YEAR": "2014",
		"MONTH": "September",
		"LOCATION": "Victoria, British Columbia, Canada",
		"NUMPAGES": "6",
		"PAGES": "71--76",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"DOI": "10.1109/SCAM.2014.38",
		"ISBN": "978-1-4799-6148-1",
		"KEYWORDS": "scg-pub snf-asa1 scg14 jb15 pangea software corpora Andrei Chis Spasojevic",
		"URL": "http://scg.unibe.ch/archive/papers/Cara14c.pdf",
		"PUBLISHER": "IEEE"
	},
	{
		"key": "Cara14d",
		"type": "article",
		"ABSTRACT": "Dicto is a declarative language for specifying architectural rules using a single uniform notation. Once defined, rules can automatically be validated using adapted off-the-shelf tools.",
		"TITLE": "Dicto: Keeping Software Architecture Under Control",
		"ANNOTE": "notrefereed",
		"AUTHOR": "Andrea Caracciolo and Mircea Lungu and Oscar Nierstrasz",
		"JOURNAL": "ERCIM News",
		"PEERREVIEW": "no",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa1 scg14 jb15 skip-doi dicto-dsl DSL Software Architecture Validation",
		"MONTH": "October",
		"URL": "http://ercim-news.ercim.eu/en99/special/dicto-keeping-software-architecture-under-control",
		"VOLUME": "99",
		"YEAR": "2014"
	},
	{
		"key": "Cara15a",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Andrea Caracciolo",
		"TITLE": "A Unified Approach to Automatic Testing of Architectural Constraints",
		"BOOKTITLE": "Proceedings of ICSE 2015 (37st International Conference on Software Engineering), Doctoral Symposium",
		"VOLUME": "2",
		"PAGES": "871-874",
		"KEYWORDS": "scg-pub snf-asa1 scg15 jb15 dicto-dsl",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"PUBLISHER": "ACM Press",
		"ABSTRACT": "Architectural decisions are often encoded in the form of constraints and guidelines. Non-functional requirements can be ensured by checking the conformance of the implementation against this kind of invariant. Conformance checking is often a costly and error-prone process that involves the use of multiple tools, differing in effectiveness, complexity and scope of applicability. To reduce the overall effort entailed by this activity, we propose a novel approach that supports verification of human- readable declarative rules through the use of adapted off-the-shelf tools. Our approach consists of a rule specification DSL, called Dicto, and a tool coordination framework, called Probo. The approach has been implemented in a soon to be evaluated prototype.",
		"YEAR": "2015",
		"DOI": "10.1109/ICSE.2015.281",
		"URL": "http://scg.unibe.ch/archive/papers/Cara15a.pdf"
	},
	{
		"key": "Cara15b",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Andrea Caracciolo and Mircea Lungu and Oscar Nierstrasz",
		"TITLE": "A Unified Approach to Architecture Conformance Checking",
		"ABSTRACT": "Software erosion can be controlled by periodically checking for consistency between the de facto architecture and its theoretical counterpart. Studies show that this process is often not automated and that developers still rely heavily on manual reviews, despite the availability of a large number of tools. This is partially due to the high cost involved in setting up and maintaining tool-specific and incompatible test specifications that replicate otherwise documented invariants. To reduce this cost, our approach consists in unifying the functionality provided by existing tools under the umbrella of a common business-readable DSL. By using a declarative language, we are able to write tool-agnostic rules that are simple enough to be understood by non-technical stakeholders and, at the same time, can be interpreted as a rigorous specification for checking architecture conformance",
		"BOOKTITLE": "Proceedings of the 12th Working IEEE/IFIP Conference on Software Architecture (WICSA)",
		"KEYWORDS": "scg-pub snf-asa1 scg15 jb15 dicto-dsl",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"PUBLISHER": "ACM Press",
		"YEAR": "2015",
		"MONTH": "May",
		"PAGES": "41-50",
		"DOI": "10.1109/WICSA.2015.11",
		"URL": "http://scg.unibe.ch/archive/papers/Cara15b.pdf"
	},
	{
		"key": "Cara15c",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Andrea Caracciolo",
		"ABSTRACT": "Software architecture erodes over time and needs to be constantly monitored to be kept consistent with its original intended design. Consistency is rarely monitored using automated techniques. The cost associated to such an activity is typically not considered proportional to its benefits.\nTo improve this situation, we propose Dicto, a uniform DSL for specifying architectural invariants. This language is designed to reduce the cost of consistency checking by offering a framework in which existing validation tools can be matched to newly-defined language constructs.\nIn this paper we discuss how such a DSL can be qualitatively and qualitatively evaluated in practice.",
		"TITLE": "On the Evaluation of a DSL for Architectural Consistency Checking",
		"BOOKTITLE": "Extended Abstracts of the Eighth Seminar on Advanced Techniques and Tools for Software Evolution (SATToSE 2015)",
		"YEAR": "2015",
		"MONTH": "July",
		"LOCATION": "Mons, Belgium",
		"PAGES": "55--57",
		"NUMPAGES": "3",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa1 scg15 jb16 dicto-dsl DSL skip-doi",
		"URL": "http://scg.unibe.ch/archive/papers/Cara15c.pdf"
	},
	{
		"key": "Cara16b",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Andrea Caracciolo and Bledar Aga and Mircea Lungu and Oscar Nierstrasz",
		"TITLE": "Marea: a Semi-automatic Decision Support System for Breaking Dependency Cycles",
		"ABSTRACT": "Dependency cycles are commonly recognized as one of the most critical quality anti-patterns. Cycles compromise the modularity of a system, prevent proper reuse and increase the cost of maintenance and testing. Many tools are capable of detecting and visualizing package cycles existing within software projects. Unfortunately, detecting cycles is only half of the work. Once detected, cycles need to be removed and this typically results in a complex process that is only partially supported by current tools. We propose a tool that offers an intelligent guidance mechanism to support developers in removing package cycles. Our tool, Marea, simulates different refactoring strategies and suggests the most cost-effective sequence of refactoring operations that will break the cycle. The optimal refactoring strategy is determined based on a custom profit function. Our approach has been validated on multiple projects and executes in linear time.",
		"KEYWORDS": "scg-pub snf-asa1 scg16 jb16 dicto-dsl",
		"BOOKTITLE": "Proceedings of the 23rd IEEE International Conference on Software Analysis, Evolution, and Reengineering (SANER)",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"YEAR": "2016",
		"MONTH": "March",
		"DOI": "10.1109/SANER.2016.11",
		"URL": "http://scg.unibe.ch/archive/papers/Cara16b.pdf"
	},
	{
		"key": "Cara16c",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Andrea Caracciolo and Mircea Lungu and Oskar Truffer and Kirill Levitin and Oscar Nierstrasz",
		"TITLE": "Evaluating an Architecture Conformance Monitoring Solution",
		"ABSTRACT": "Architectural rules are often defined but rarely tested. Current tools offer limited functionality and often require significant effort to be configured, automated and integrated within existing platforms. We propose a platform that is aimed at reducing the overall cost of setting up and maintaining an architectural conformance monitoring environment by decoupling the conceptual representation of a user-defined rule from its technical specification prescribed by the underlying analysis tools. The user is no longer expected to encode her constraints according to the syntax of the chosen tool, but can use a simple high-level DSL that is automatically compiled to an executable specification through custom adapters developed to support the interaction with existing off-the-shelf tools. In this paper we analyze three case studies to show how this approach can be successfully adopted to support truly diverse industrial projects. By discussing qualitative aspects of the approach, we investigate limitations and opportunities for improving general quality assessment solutions in general and DSL-based conformance tools in particular.",
		"KEYWORDS": "scg-pub snf-asa1 scg16 jb16 dicto-dsl arch-constr-eval",
		"BOOKTITLE": "Proceedings of the 7th IEEE International Workshop on Empirical Software Engineering in Practice (IWESEP)",
		"DOI": "10.1109/IWESEP.2016.12",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"YEAR": "2016",
		"MONTH": "March",
		"URL": "http://scg.unibe.ch/archive/papers/Cara16c.pdf"
	},
	{
		"key": "Chis13a",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"ABSTRACT": "The debugger is an essential tool in any programming environment, as it helps developers understand the dynamic behaviour of software systems. However, traditional debuggers fail in answering domain-specific questions, as the semantics of what they show and do are fixed. In this paper we introduce our work towards a moldable debugger which, unlike traditional debuggers, both adapts itself and can be adapted to a particular debugging context. Thus, it allows developers to answer their questions by using concepts from their own application domains.",
		"AUTHOR": "Andrei Chiş and Oscar Nierstrasz and Tudor Gîrba",
		"BOOKTITLE": "Proceedings of the 7th Workshop on Dynamic Languages and Applications",
		"SERIES": "DYLA '13",
		"DOI": "10.1145/2489798.2489801",
		"KEYWORDS": "scg-pub snf-asa1 scg13 jb14 Debugging Customization Domain-specific-tools Smalltalk Andrei Chis girba",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"TITLE": "Towards a Moldable Debugger",
		"URL": "http://scg.unibe.ch/archive/papers/Chis13a-TowardsMoldableDebugger.pdf",
		"YEAR": "2013",
		"ISBN": "978-1-4503-2041-2",
		"LOCATION": "Montpellier, France",
		"PAGES": "2:1--2:6",
		"ARTICLENO": "2",
		"NUMPAGES": "6",
		"ACMID": "2489801",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Chis13a-TowardsMoldableDebugger.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/2489798.2489801"
	},
	{
		"key": "Chis14a",
		"type": "inproceedings",
		"ABSTRACT": "Answering run-time questions in object-oriented systems involves reasoning about and exploring connections between multiple objects. Developer questions exercise various aspects of an object and require multiple kinds of interactions depending on the relationships between objects, the application domain and the differing developer needs. Nevertheless, traditional object inspectors, the essential tools often used to reason about objects, favor a generic view that focuses on the low-level details of the state of individual objects. This leads to an inefficient effort, increasing the time spent in the inspector. To improve the inspection process, we propose the Moldable Inspector, a novel approach for an extensible object inspector. The Moldable Inspector allows developers to look at objects using multiple interchangeable presentations and supports a workflow in which multiple levels of connecting objects can be seen together. Both these aspects can be tailored to the domain of the objects and the question at hand. We further exemplify how the proposed solution improves the inspection process, introduce a prototype implementation and discuss new directions for extending the Moldable Inspector.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Andrei Chiş and Tudor Gîrba and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of International Workshop on Smalltalk Technologies (IWST 2014)",
		"MEDIUM": "1",
		"KEYWORDS": "scg14 scg-pub jb14 snf-asa1 skip-doi, Andrei Chis, Tudor Girba, girba",
		"LOCATION": "Cambridge, England",
		"PEERREVIEW": "yes",
		"TITLE": "The Moldable Inspector: a framework for domain-specific object inspection",
		"URL": "http://scg.unibe.ch/archive/papers/Chis14a-MoldableInspector.pdf",
		"YEAR": "2014"
	},
	{
		"key": "Chis14b",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Chiş, Andrei and Gîrba, Tudor and Nierstrasz, Oscar",
		"TITLE": "The Moldable Debugger: A Framework for Developing Domain-Specific Debuggers",
		"ABSTRACT": "Debuggers are crucial tools for developing object-oriented software systems\n\t\tas they give developers direct access to the running systems. Nevertheless, traditional\n\t\tdebuggers rely on generic mechanisms to explore and exhibit the execution stack and system\n\t\tstate, while developers reason about and formulate domain-specific questions using concepts\n\t\tand abstractions from their application domains. This creates an abstraction gap between the\n\t\tdebugging needs and the debugging support leading to an inefficient and error-prone debugging\n\t\teffort. To reduce this gap, we propose a framework for developing domain-specific debuggers\n\t\tcalled the Moldable Debugger. The Moldable Debugger is adapted to a domain by creating and\n\t\tcombining domain-specific debugging operations with domain-specific debugging views, and adapts\n\t\titself to a domain by selecting, at run time, appropriate debugging operations and views.\n\t\tWe motivate the need for domain-specific debugging, identify a set of key requirements and show\n\t\thow our approach improves debugging by adapting the debugger to several domains.",
		"YEAR": "2014",
		"ISBN": "978-3-319-11244-2",
		"BOOKTITLE": "Software Language Engineering",
		"VOLUME": "8706",
		"SERIES": "Lecture Notes in Computer Science",
		"EDITOR": "Combemale, Benoît and Pearce, David J. and Barais, Olivier and Vinju, Jurgen J.",
		"DOI": "10.1007/978-3-319-11245-9_6",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"URL": "http://scg.unibe.ch/archive/papers/Chis14b-MoldableDebugger.pdf",
		"PUBLISHER": "Springer International Publishing",
		"PAGES": "102-121",
		"LANGUAGE": "English",
		"KEYWORDS": "scg-pub snf-asa1, scg14 jb15 debugging, development environments, customization, Andrei Chis, Tudor Girba, girba",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Chis14b-MoldableDebugger.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-319-11245-9_6"
	},
	{
		"key": "Chis15a",
		"type": "inproceedings",
		"ABSTRACT": "Object inspectors are an essential category of tools that allow developers to comprehend the run-time of object-oriented systems. Traditional object inspectors favor a generic view that focuses on the low-level details of the state of single objects. Based on 16 interviews with software developers and a follow-up survey with 62 respondents we identified a need for object inspectors that support different high-level ways to visualize and explore objects, depending on both the object and the current developer need. We propose the Moldable Inspector, a novel inspector model that enables developers to adapt the inspection workflow to suit their immediate needs by making the inspection context explicit, providing multiple interchangeable domain-specific views for each object, and supporting  a workflow that groups together multiple levels of connected objects. We show that the Moldable Inspector can address multiple kinds of development needs involving a wide range of objects.",
		"AUTHOR": "Andrei Chiş and Tudor Gîrba and Oscar Nierstrasz and Aliaksei Syrel",
		"TITLE": "The Moldable Inspector",
		"BOOKTITLE": "Proceedings of the 2015 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software",
		"ANNOTE": "internationalconference",
		"SERIES": "Onward! 2015",
		"YEAR": "2015",
		"LOCATION": "Pittsburgh, PA, USA",
		"PAGES": "44--60",
		"NUMPAGES": "17",
		"URL": "http://scg.unibe.ch/archive/papers/Chis15a-MoldableInspector.pdf",
		"DOI": "10.1145/2814228.2814234",
		"ISBN": "978-1-4503-3688-8",
		"ACMID": "2814234",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA",
		"KEYWORDS": "scg-pub scg15 jb16 snf-asa1, Andrei Chis, Tudor Girba, girba feenk-pub",
		"PEERREVIEW": "yes",
		"MEDIUM": "2"
	},
	{
		"key": "Chis15b",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"ABSTRACT": "Understanding the run-time behaviour of object-oriented applications entails the comprehension of run-time objects. Traditional object inspectors favor generic views that focus on the low-level details of the state of single objects. While universally applicable, this generic approach does not take into account the varying needs of developers that could benefit from tailored views and exploration possibilities. GTInspector is a novel moldable object inspector that provides different high-level ways to visualize and explore objects, adapted to both the object and the current developer need. More information about the GTInspector can be found at: scg.unibe.ch/research/moldableinspector",
		"AUTHOR": "Andrei Chiş and Tudor Gîrba and Oscar Nierstrasz and Aliaksei Syrel",
		"TITLE": "GTInspector: A Moldable Domain-Aware Object Inspector",
		"BOOKTITLE": "Proceedings of the Companion Publication of the 2015 ACM SIGPLAN Conference on Systems, Programming, and Applications: Software for Humanity",
		"SERIES": "SPLASH Companion 2015",
		"YEAR": "2015",
		"LOCATION": "Pittsburgh, PA, USA",
		"PAGES": "15--16",
		"NUMPAGES": "2",
		"URL": "http://scg.unibe.ch/archive/papers/Chis15b-GTInspector.pdf",
		"DOI": "10.1145/2814189.2814194",
		"ISBN": "978-1-4503-3722-9",
		"ACMID": "2814194",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA",
		"KEYWORDS": "scg-pub scg15 jb16 snf-asa1, Andrei Chis, Tudor Girba, girba feenk-pub",
		"PEERREVIEW": "yes",
		"MEDIUM": "2"
	},
	{
		"key": "Chis15c",
		"type": "article",
		"ABSTRACT": "Understanding the run-time behavior of software systems can be a challenging activity. Debuggers are an essential category of tools used for this purpose as they give developers direct access to the running systems. Nevertheless, traditional debuggers rely on generic mechanisms to introspect and interact with the running systems, while developers reason about and formulate domain-specific questions using concepts and abstractions from their application domains. This mismatch creates an abstraction gap between the debugging needs and the debugging support leading to an inefficient and error-prone debugging effort, as developers need to recover concrete domain concepts using generic mechanisms. To reduce this gap, and increase the efficiency of the debugging process, we propose a framework for developing domain-specific debuggers, called the Moldable Debugger, that enables debugging at the level of the application domain. The Moldable Debugger is adapted to a domain by creating and combining domain-specific debugging operations with domain-specific debugging views, and adapts itself to a domain by selecting, at run time, appropriate debugging operations and views. To ensure the proposed model has practical applicability (i.e., can be used in practice to build real debuggers), we discuss, from both a performance and usability point of view, three implementation strategies. We further motivate the need for domain-specific debugging, identify a set of key requirements and show how our approach improves debugging by adapting the debugger to several domains.",
		"TITLE": "Practical domain-specific debuggers using the Moldable Debugger framework",
		"JOURNAL": "Computer Languages, Systems & Structures",
		"VOLUME": "44, Part A",
		"PAGES": "89--113",
		"YEAR": "2015",
		"ANNOTE": "internationaljournal",
		"NOTE": "Special issue on the 6th and 7th International Conference on Software Language Engineering (SLE 2013 and SLE 2014)",
		"ISSN": "1477-8424",
		"DOI": "10.1016/j.cl.2015.08.005",
		"URL": "http://scg.unibe.ch/archive/papers/Chis15c-PracticalDomainSpecificDebuggers.pdf",
		"PEERREVIEW": "yes",
		"AUTHOR": "Andrei Chiş and Marcus Denker and Tudor Gîrba and Oscar Nierstrasz",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub scg15 jb16 snf-asa1 Andrei Chis, Tudor Girba, Debugging, Customization, Domain-specific tools, User interfaces, Programming environments, Smalltalk, girba feenk-pub"
	},
	{
		"key": "Chis15d",
		"type": "inproceedings",
		"ABSTRACT": "Developers commonly ask detailed and domain-specific questions about the software systems they are developing and maintaining. Integrated development environments (IDEs) form an essential category of tools for developing software that should support software engineering decision making. Unfortunately, rigid and generic IDEs that focus on low-level programming tasks, that promote code rather than data, and that suppress customization, offer limited support for informed decision making during software development. We propose to improve decision making within IDEs by moving from generic to context-aware IDEs through moldable tools. In this paper, we promote the idea of moldable tools, illustrate it with concrete examples, and discuss future research directions.",
		"AUTHOR": "Andrei Chiş and Tudor Gîrba and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 6th Workshop on Evaluation and Usability of Programming Languages and Tools",
		"SERIES": "PLATEAU '15",
		"DOI": "10.1145/2846680.2846684",
		"KEYWORDS": "scg-pub scg15 jb16 snf-asa1, internationalworkshop, Andrei Chis,Tudor Girba, girba feenk-pub",
		"LOCATION": "Pittsburgh, PA, USA",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"TITLE": "Towards moldable development tools",
		"URL": "http://scg.unibe.ch/archive/papers/Chis15d_TowardsMoldableDevelopmentTools.pdf",
		"YEAR": "2015",
		"ISBN": "978-1-4503-3907-0",
		"PAGES": "25--26",
		"ACMID": "2846684",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA"
	},
	{
		"key": "Chis16a",
		"type": "inproceedings",
		"ABSTRACT": "Software systems involve many different kinds of domain-specific and interrelated software entities.\nA common strategy employed by developers to deal with this reality is to perform exploratory investigations by means of searching.\nNevertheless, most integrated development environments (IDEs) support searching through generic and disconnected search tools.\nThis impedes search tasks over domain-specific entities as considerable effort is wasted by developers locating and linking data and concepts relevant to their application domains. To tackle this problem we propose Spotter, a moldable framework for supporting contextual-aware searching in IDEs by enabling developers to easily create custom searches for domain objects.  In this paper we motivate a set of requirements for Spotter and show, through usage scenarios, that Spotter improves program comprehension by reducing the effort required to find and search through concepts from a wide range of domains. Furthermore, we show that by taking code into account, Spotter can provide a single entry point for embedding search support within an IDE.",
		"AUTHOR": "Andrei Chiş and Tudor Gîrba and Juraj Kubelka and Oscar Nierstrasz and Stefan Reichhart and Aliaksei Syrel",
		"BOOKTITLE": "Proceedings of the 2016 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software",
		"ANNOTE": "internationalconference",
		"SERIES": "Onward! 2016",
		"TITLE": "Moldable, context-aware searching with Spotter",
		"DOI": "10.1145/2986012.2986023",
		"PAGES": "128--144",
		"NUMPAGES": "17",
		"LOCATION": "Amsterdam, Netherlands",
		"YEAR": "2016",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"PUBLISHER": "ACM",
		"KEYWORDS": "scg-pub scg16 jb17 snf-asa2 Andrei Chis, Spotter, Tudor Girba, girba feenk-pub",
		"URL": "http://scg.unibe.ch/archive/papers/Chis16a-MoldableContextAwareSearchingWithSpotter.pdf",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Chis16a-MoldableContextAwareSearchingWithSpotter.pdf",
		"ADDRESS": "New York, NY, USA"
	},
	{
		"key": "Chis16b",
		"type": "inproceedings",
		"ABSTRACT": "Developing and evolving software requires developers to continuously make decisions about how to steer the design and implementation of their applications. To make informed decisions developers commonly formulate detailed and domain-specific questions about their software systems and  use tools to explore available information and answer those questions. Development tools however focus on generic programming tasks while program comprehension and analysis tools typically are not tightly integrated with their development tools and environments. This  has a negative effect on program comprehension as it increases the effort and the time needed to obtain an answer. To improve program comprehension we propose that developers build software using development tools tailored to their specific application domains, as this can directly answer domain-specific questions. We introduce moldable development as an approach for developing software in which developers evolve development tools together with their applications.  In this paper we sketch the idea of moldable development and give examples to illustrate how it can be applied in practice. Through these examples we show that given a low cost for extending development tools, developers can create relevant and useful customizations to help them evolve their own applications.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Andrei Chiş and Tudor Gîrba and Juraj Kubelka and Oscar Nierstrasz and Stefan Reichhart and Aliaksei Syrel",
		"BOOKTITLE": "Proceedings of the Programming Experience 2016 (PX/16) Workshop",
		"SERIES": "PX/16",
		"LOCATION": "Rome, Italy",
		"TITLE": "Exemplifying Moldable Development",
		"DOI": "10.1145/2984380.2984385",
		"ISBN": "978-1-4503-4776-1",
		"PAGES": "33--42",
		"NUMPAGES": "10",
		"YEAR": "2016",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"ACMID": "2984385",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA",
		"LANGUAGE": "English",
		"URL": "http://scg.unibe.ch/archive/papers/Chis16b-ExemplifyingMoldableDevelopment.pdf",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Chis16b-ExemplifyingMoldableDevelopment.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/2984380.2984385",
		"KEYWORDS": "scg-pub, snf-asa2, scg16, jb16, internationalworkshop, Andrei Chis, Domain-specific tools, User interfaces, Programming environments, Program comprehension, Tudor Girba, girba feenk-pub"
	},
	{
		"key": "Chis16e",
		"type": "inproceedings",
		"ABSTRACT": "Reasoning about object-oriented applications requires developers to answer contextual questions about their domain objects. Tailored development tools can support developers in this activity by providing relevant domain-specific information. Nonetheless, a high effort for extending development tools to handle domain-specific objects, together with diverging mechanisms for creating, sharing and discovering extensions, discourage developers to adapt their tools. To address this, we propose to enable contextual behavior in development tools by allowing domain objects to decide how they are handled in development tools. We show that combining this idea with mechanisms for specifying extensions using  internal DSLs can significantly reduce the cost of tailoring development tools to specific domains.",
		"AUTHOR": "Andrei Chiş ",
		"TITLE": "Towards object-aware development tools",
		"BOOKTITLE": "Companion Proceedings of the 2016 ACM SIGPLAN International Conference on Systems, Programming, Languages and Applications: Software for Humanity",
		"SERIES": "SPLASH Companion 2016",
		"YEAR": "2016",
		"LOCATION": "Amsterdam, Netherlands",
		"PAGES": "65-66",
		"NUMPAGES": "2",
		"URL": "http://scg.unibe.ch/archive/papers/Chis16e-ObjectAwareDevelopmentTools.pdf",
		"DOI": "10.1145/2984043.2998546",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA",
		"KEYWORDS": "scg-pub, snf-asa2, scg16, jb17, Andrei Chis",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Chis16e-ObjectAwareDevelopmentTools.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/2984043.2998546"
	},
	{
		"key": "Chis17a",
		"type": "incollection",
		"ABSTRACT": "Object-oriented programming aims to facilitate navigation between domain concepts and the code that addresses those domains by enabling developers to directly model those domain concepts in the code. To make informed decisions developers then  formulate detailed and domain-specific questions about their systems in terms of domain concepts, and use tools to explore available information and answer those questions. Development tools however focus mainly on object-oriented idioms and do not expose or exploit domain concepts constructed on top of object-oriented programming idioms. Analysis tools are typically not tightly integrated with development tools. This has a negative effect on program comprehension, increasing the effort and the time for obtaining answers. To improve program comprehension we propose to better integrate domain concepts and program comprehension tools into the development environment through moldable tools. Moldable tools are development tools that are aware of the current development context and support inexpensive creation of domain-specific extensions. We elaborate on the idea of moldable tools and show how to apply moldable tools to support object-oriented programming. Through practical examples we show how developers can embed domain concepts into their development tools.",
		"AUTHOR": "Andrei Chiş and Tudor Gîrba and Juraj Kubelka and Oscar Nierstrasz and Stefan Reichhart and Aliaksei Syrel",
		"BOOKTITLE": "PAUSE: Present And Ulterior Software Engineering",
		"EDITOR": "Manuel Mazzara, Bertrand Meyer",
		"TITLE": "Moldable Tools for Object-oriented Development",
		"PAGES": "77--101",
		"PUBLISHER": "Springer, Cham",
		"DOI": "10.1007/978-3-319-67425-4_6",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb18, Andrei Chis, Tudor Girba, girba feenk-pub",
		"URL": "http://scg.unibe.ch/archive/papers/Chis17a-MoldableToolsPAUSE.pdf",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Chis16c-MoldableToolsPAUSE.pdf",
		"BDSK-URL-2": "https://link.springer.com/chapter/10.1007/978-3-319-67425-4_6",
		"YEAR": "2017"
	},
	{
		"key": "Ciup99b",
		"type": "proceedings",
		"ADDRESS": "Forschungszentrum Informatik, Haid-und-Neu-Strasse 10-14, 76131 Karlsruhe, Germany",
		"ANNOTE": "workshopproceedings",
		"EDITOR": "Oliver Ciupke and Stéphane Ducasse",
		"KEYWORDS": "skip-pdf stefPub scg-pub skip-abstract skip-doi scg-none jb-none",
		"MONTH": "June",
		"NOTE": "FZI 2-6-6/99",
		"TITLE": "Proceedings of the ECOOP '99 Workshop on Experiences in Object-Oriented Re-Engineering",
		"YEAR": "1999"
	},
	{
		"key": "Corr16a",
		"type": "inproceedings",
		"AUTHOR": "Claudio Corrodi and Alexander Heußner and Christopher M. Poskitt",
		"TITLE": "A Graph-Based Semantics Workbench for Concurrent Asynchronous Programs",
		"ABSTRACT": "A number of novel programming languages and libraries have been proposed that offer simpler-to-use models of concurrency than threads. It is challenging, however, to devise execution models that successfully realise their abstractions without forfeiting performance or introducing unintended behaviours. This is exemplified by SCOOP---a concurrent object-oriented message-passing language---which has seen multiple semantics proposed and implemented over its evolution. We propose a \"semantics workbench\" with fully and semi-automatic tools for SCOOP, that can be used to analyse and compare programs with respect to different execution models. We demonstrate its use in checking the consistency of semantics by applying it to a set of representative programs, and highlighting a deadlock-related discrepancy between the principal execution models of the language. Our workbench is based on a modular and parameterisable graph transformation semantics implemented in the GROOVE tool. We discuss how graph transformations are leveraged to atomically model intricate language abstractions, and how the visual yet algebraic nature of the model can be used to ascertain soundness.",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"BOOKTITLE": "Proc. International Conference on Fundamental Approaches to Software Engineering (FASE 2016)",
		"VOLUME": "9633",
		"SERIES": "LNCS",
		"PAGES": "31--48",
		"PUBLISHER": "Springer Berlin Heidelberg",
		"YEAR": "2016",
		"ISBN": "978-3-662-49665-7",
		"DOI": "10.1007/978-3-662-49665-7_3",
		"KEYWORDS": "scg-pub snf-none scg16 jb16",
		"URL": "http://arxiv.org/abs/1603.00307",
		"ADDRESS": "Berlin, Heidelberg",
		"ANNOTE": "internationalconference"
	},
	{
		"key": "Corr16b",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Claudio Corrodi",
		"ABSTRACT": "Debuggers are central tools in IDEs for inspecting and repairing software systems. However, they are often generic tools that operate on a low level of abstraction. Developers need to use simple breakpoint capabilities and interpret the raw data presented by the debugger. They are confronted with a large abstraction gap between application domain and debugger presentations. We propose an approach for debugging object-oriented programs, using expressive and flexible breakpoints that operate on sets of objects instead of a particular line of source code. This allows developers to adapt the debugger to their domain and work on a higher level of abstraction, which enables them to be more productive. We give an overview of the approach and demonstrate the idea with a simple use case, and we discuss how our approach differs from existing work.",
		"TITLE": "Towards Efficient Object-Centric Debugging with Declarative Breakpoints",
		"LOCATION": "Bergen, Norway",
		"NUMPAGES": "8",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa2 scg16 jb16 skip-doi",
		"PUBLISHER": "CEUR",
		"BOOKTITLE": "Post-proceedings of the 9th Seminar on Advanced Techniques and Tools for Software Evolution (SATToSE 2016)",
		"VOLUME": "1791",
		"YEAR": "2016",
		"MONTH": "July",
		"PDF": "http://ceur-ws.org/Vol-1791/paper-04.pdf",
		"URL": "http://scg.unibe.ch/archive/papers/Corr16b-DeclarativeBreakpoints.pdf"
	},
	{
		"key": "Corr18a",
		"type": "inproceedings",
		"AUTHOR": "Claudio Corrodi and Timo Spring and Mohammad Ghafari and Oscar Nierstrasz",
		"TITLE": "Idea: Benchmarking Android Data Leak Detection Tools",
		"EDITOR": "Mathias Payer and Awais Rashid and Jose M. Such",
		"BOOKTITLE": "Engineering Secure Software and Systems",
		"YEAR": "2018",
		"PUBLISHER": "Springer International Publishing",
		"ADDRESS": "Cham",
		"PAGES": "116--123",
		"ABSTRACT": "Virtual application stores for mobile platforms contain many malign and benign applications that exhibit security issues, such as the leaking of sensitive data. In recent years, researchers have proposed a myriad of techniques and tools to detect such issues automatically. However, it is unclear how these approaches perform compared to each other. The tools are often no longer available, thus comparing different approaches is almost infeasible.",
		"ISBN": "978-3-319-94496-8",
		"DOI": "10.1007/978-3-319-94496-8_9",
		"KEYWORDS": "scg-pub security snf-asa2 scg18 jb18",
		"PEERREVIEW": "yes",
		"ANNOTE": "internationalconference",
		"URL": "http://scg.unibe.ch/archive/papers/Corr18a.pdf",
		"MEDIUM": "2"
	},
	{
		"key": "Cruz98b",
		"type": "inproceedings",
		"ABSTRACT": "Most of the work on coordination technology so far\n\t\t\t\t  has focused on the development of special\n\t\t\t\t  coordination languages and environments that provide\n\t\t\t\t  the basic mechanisms for realizing the coordination\n\t\t\t\t  layer of an open system. It is clear that the idea\n\t\t\t\t  of managing separately the coordination aspect from\n\t\t\t\t  the computation in a language has a lot of\n\t\t\t\t  advantages in the development of those systems.\n\t\t\t\t  Nevertheless, most of the coordination languages do\n\t\t\t\t  not take care that additionally to managing\n\t\t\t\t  coordination requirements, they must manage other\n\t\t\t\t  kinds of \"openness\" related requirements in Open\n\t\t\t\t  Systems. The most important requirement being to\n\t\t\t\t  support the evolution of the coordination\n\t\t\t\t  requirements themselves. This problem manifests\n\t\t\t\t  during the software development process by the\n\t\t\t\t  development over and over again of solutions to\n\t\t\t\t  similar coordination problems. To tackle this\n\t\t\t\t  problem, and instead of proposing a new language, we\n\t\t\t\t  are attempting to develop an open set of adaptable\n\t\t\t\t  and reusable software components that realize\n\t\t\t\t  various useful coordination abstractions. With these\n\t\t\t\t  components we provide explicit separation of\n\t\t\t\t  coordination from computation, and facilitate reuse\n\t\t\t\t  and evolution of coordination aspects in Open\n\t\t\t\t  Systems.",
		"ADDRESS": "Vienna, Austria",
		"AUTHOR": "Juan Carlos Cruz and Sander Tichelaar",
		"BOOKTITLE": "Ninth International Workshop on Database and Expert Systems Applications",
		"DOI": "10.1109/DEXA.1998.707460",
		"EDITOR": "Roland R. Wagner",
		"KEYWORDS": "snf-none scg-pub scg-coord-98 scg-none jb98 tich-papunr",
		"MISC": "August 26-28",
		"MONTH": "August",
		"PAGES": "578--582",
		"PUBLISHER": "IEEE Computer Press",
		"TITLE": "Managing Evolution of Coordination Aspects in Open Systems",
		"URL": "http://scg.unibe.ch/archive/papers/Cruz98bManagingEvolution.pdf",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Cruz98bManagingEvolution.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/DEXA.1998.707460"
	},
	{
		"key": "Cruz99a",
		"type": "inproceedings",
		"ABSTRACT": "Although coordination of concurrent objects is a\n\t\t\t\t  fundamental as-pect of object-oriented concurrent\n\t\t\t\t  programming, there is only little support for its\n\t\t\t\t  specification and abstraction at the language level.\n\t\t\t\t  This is a problem because coordination is often\n\t\t\t\t  buried in the code of the coordinated objects,\n\t\t\t\t  leading to a lack of abstraction and reuse. Here we\n\t\t\t\t  present CoLaS, a coordination model and its\n\t\t\t\t  implementation based on the notion of Coordination\n\t\t\t\t  Groups. By clearly identifying and separating the\n\t\t\t\t  coordination from the co-ordinated objects CoLaS\n\t\t\t\t  provides a better abstraction and reuse of the\n\t\t\t\t  coordination and the coordinated objects. Moreover\n\t\t\t\t  CoLaS's high dynamicity provides better support for\n\t\t\t\t  coordination of active objects.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Juan-Carlos Cruz and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of Coordination '99",
		"KEYWORDS": "stefPub olit scg-pub skip-doi scg-coord-99 snf99 flo colas scg-none jb99",
		"PAGES": "355--371",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "A Group Based Approach for Coordinating Active Objects",
		"URL": "http://scg.unibe.ch/archive/papers/Cruz99aGroupBasedApproach.pdf",
		"VOLUME": "1594",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Cruz99aGroupBasedApproach.pdf"
	},
	{
		"key": "Cruz99b",
		"type": "inproceedings",
		"ABSTRACT": "Open Distributed Systems are the dominating\n\t\t\t\t  intellectual issue of the end of this century.\n\t\t\t\t  Figuring out how to build those systems will become\n\t\t\t\t  a central issue in distributed system research in\n\t\t\t\t  the next future. Although CORBA seems to provide all\n\t\t\t\t  the necessary support to construct those systems. It\n\t\t\t\t  provides a very limited support to the evolution of\n\t\t\t\t  requirements in those systems. The main problem is\n\t\t\t\t  that the description of the elements from which\n\t\t\t\t  systems are built, and the way in which they are\n\t\t\t\t  composed are mixed into the application code. Making\n\t\t\t\t  them difficult to understand, modify and customize.\n\t\t\t\t  We think that a solution to this problem goes\n\t\t\t\t  through the introduction of the so called\n\t\t\t\t  coordination models and languages into the CORBA\n\t\t\t\t  model. We propose in this paper the introduction of\n\t\t\t\t  our object coordination model called CoLaS into the\n\t\t\t\t  CORBA model.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Juan-Carlos Cruz and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of International Workshop in Future Trends in Distributed Computing Systems '99",
		"DOI": "10.1109/FTDCS.1999.818794",
		"KEYWORDS": "olit scg-pub scg-coord-99 snf99 scg-none jb99 stefPub",
		"TITLE": "Coordinating Open Distributed Systems",
		"URL": "http://scg.unibe.ch/archive/papers/Cruz99FTDCS.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Cruz99FTDCS.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/FTDCS.1999.818794"
	},
	{
		"key": "Cruz01a",
		"type": "inproceedings",
		"ABSTRACT": "Open Distributed Systems are the dominating\n\t\t\t\t  intellectual issue of the research in distributed\n\t\t\t\t  systems. Figuring out how to build and maintain\n\t\t\t\t  those systems becomes a central issue in distributed\n\t\t\t\t  systems research today. Although CORBA seems to\n\t\t\t\t  provide all the necessary support to the\n\t\t\t\t  construction of those systems, CORBA provides a very\n\t\t\t\t  limited support to the evolution of their\n\t\t\t\t  requirements. The main problem is that the\n\t\t\t\t  description of the elements from which the systems\n\t\t\t\t  are built, and the way in which they are composed\n\t\t\t\t  are mixed into the application code, making systems\n\t\t\t\t  difficult to understand, modify and customize. A\n\t\t\t\t  possible solution to this problem goes through the\n\t\t\t\t  introduction of the so-called coordination models\n\t\t\t\t  and languages into the CORBA model. We propose in\n\t\t\t\t  this paper a coordination programming system called\n\t\t\t\t  CORODS which introduces the CoLaSD coordination\n\t\t\t\t  model and language into the CORBA model. CoLaSD is a\n\t\t\t\t  coordination model based on the notion of\n\t\t\t\t  Coordination Groups, entities that specify, control\n\t\t\t\t  and enforces the coordination of groups of\n\t\t\t\t  collaborating active objects.",
		"ADDRESS": "Le Croisic, France",
		"AUTHOR": "Juan-Carlos Cruz",
		"BOOKTITLE": "Proceedings of LMO 2001",
		"KEYWORDS": "olit scg-pub skip-doi scg coordination scg-none jb01",
		"PAGES": "11--26",
		"TITLE": "CORODS: A Coordination Programming System for Open Distributed Systems",
		"URL": "http://scg.unibe.ch/archive/papers/Cruz01LMO.pdf",
		"VOLUME": "7",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Cruz01LMO.pdf"
	},
	{
		"key": "Cruz01b",
		"type": "inproceedings",
		"ABSTRACT": "Cooperative Object Information Systems are systems\n\t\t\t\t  build from objects that work together as a single\n\t\t\t\t  system. Objects that cooperate in the realization of\n\t\t\t\t  common tasks. Cooperative Object Information Systems\n\t\t\t\t  are systems constrained to continuously adapt to new\n\t\t\t\t  requirements: new objects are introduced into the\n\t\t\t\t  systems, cooperation protocols change, etc. Building\n\t\t\t\t  Cooperative Object Information Systems is difficult\n\t\t\t\t  because most of the concurrent and distributed\n\t\t\t\t  object oriented programming languages and frameworks\n\t\t\t\t  used to build them, provide only limited support for\n\t\t\t\t  their specification and abstraction, making them\n\t\t\t\t  difficult to understand, modify and customize. We\n\t\t\t\t  show in this paper how combining distributed active\n\t\t\t\t  objects, and object oriented coordination models and\n\t\t\t\t  languages, particularly the CoLaSD coordination\n\t\t\t\t  model and language, we can simplify the development\n\t\t\t\t  of Cooperative Object Information Systems, and\n\t\t\t\t  facilitate at the same time the evolution of their\n\t\t\t\t  requirements.",
		"ADDRESS": "Calgary, Canada",
		"AUTHOR": "Juan-Carlos Cruz",
		"BOOKTITLE": "Proceedings of OOIS 2001",
		"KEYWORDS": "olit scg-pub skip-doi scg coordination scg-none jb01",
		"TITLE": "Supporting Development of Object Information Systems with CoLaSD",
		"URL": "http://scg.unibe.ch/archive/papers/Cruz01OOIS.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Cruz01OOIS.pdf"
	},
	{
		"key": "Cruz02a",
		"type": "inproceedings",
		"ABSTRACT": "An important family of existing coordination models\n\t\t\t\t  and languages is based on the idea of trapping the\n\t\t\t\t  messages exchanged by the coordinated entities and\n\t\t\t\t  by the specification of rules governing the\n\t\t\t\t  coordination. No model, including our CoLaS\n\t\t\t\t  coordination model, justifies clearly the reason of\n\t\t\t\t  their coordination rules. Why these rules and not\n\t\t\t\t  others? Are they all necessary? These are questions\n\t\t\t\t  that remain still open. In order to try to provide\n\t\t\t\t  an answer, in particular for the CoLaS model, we\n\t\t\t\t  propose in this paper OpenCoLaS, a framework for\n\t\t\t\t  building CoLaS coordination dialects. The OpenCoLaS\n\t\t\t\t  framework allows to experiment with the definition\n\t\t\t\t  of coordination rules.",
		"ADDRESS": "York, United Kingdom",
		"AUTHOR": "Juan-Carlos Cruz",
		"BOOKTITLE": "Proceedings of COORDINATION 2002",
		"KEYWORDS": "snf03 olit scg-pub skip-doi scg coordination scg-none jb02",
		"TITLE": "OpenCoLaS — a Coordination Framework for CoLaS Dialects",
		"URL": "http://scg.unibe.ch/archive/papers/Cruz02Coordination.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Cruz02Coordination.pdf"
	},
	{
		"key": "DeVo00a",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "De Volder, Kris and Fabry, Johan and Wuyts, Roel",
		"BOOKTITLE": "Proceedings of the ECOOP 2000: Fifth International Workshop on Component-Oriented Programming",
		"KEYWORDS": "scg-old scg-pub skip-abstract skip-doi",
		"TITLE": "Logic Meta Components as a Generic Component Model",
		"URL": "http://scg.unibe.ch/archive/papers/DeVo00a.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/DeVo00a.pdf"
	},
	{
		"key": "Dean15a",
		"type": "incollection",
		"TITLE": "Domain Globalization: Using Languages to Support Technical and Social Coordination",
		"AUTHOR": "Deantoni, Julien and Brun, Cédric and Caillaud, Benoit and France, Robert B. and Karsai, Gabor and Nierstrasz, Oscar and Syriani, Eugene",
		"ABSTRACT": "When a project is realized in a globalized environment, multiple\n\t\tstakeholders from different organizations work on\n\t\tthe same system. Depending on the stakeholders and their\n\t\torganizations, various (possibly overlapping) concerns\n\t\tare raised in the development of the system. In this\n\t\tcontext a Domain Specific Language (DSL) supports the\n\t\twork of a group of stakeholders who are responsible for\n\t\taddressing a specific set of concerns. This chapter\n\t\tidentifies the open challenges arising from the\n\t\tcoordination of globalized domain-specific languages. We\n\t\tidentify two types of coordination: technical\n\t\tcoordination and social coordination. After presenting an\n\t\toverview of the current state of the art, we discuss\n\t\tfirst the open challenges arising from the composition of\n\t\tmultiple DSLs, and then the open challenges associated to\n\t\tthe collaboration in a globalized environment.",
		"YEAR": "2015",
		"ISBN": "978-3-319-26171-3",
		"BOOKTITLE": "Globalizing Domain-Specific Languages",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"VOLUME": "9400",
		"SERIES": "Lecture Notes in Computer Science",
		"EDITOR": "Combemale, Benoit and Cheng, Betty H.C. and France, Robert B. and Jézéquel, Jean-Marc and Rumpe, Bernhard",
		"DOI": "10.1007/978-3-319-26172-0_5",
		"PUBLISHER": "Springer International Publishing",
		"KEYWORDS": "scg-pub scg15 jb16 skip-pdf",
		"PAGES": "70-87"
	},
	{
		"key": "Deme97a",
		"type": "book",
		"EDITOR": "Serge Demeyer and Harald Gall",
		"KEYWORDS": "olit famoos-wrkproc scg-pub skip-abstract skip-doi toBeChecked snf97 scg-none jb97 sergedem-wrkproc oorp",
		"MONTH": "September",
		"PUBLISHER": "Technical University of Vienna — Information Systems Institute — Distributed Systems Group",
		"SERIES": "TUV-1841-97-10",
		"TITLE": "Proceedings of the ESEC/FSE Workshop on Object-Oriented Re-engineering",
		"URL": "http://scg.unibe.ch/archive/famoos/ESEC97/",
		"YEAR": "1997"
	},
	{
		"key": "Deme97b",
		"type": "article",
		"ABSTRACT": "Since the early 1980s, object-oriented frameworks\n\t\t\t\t  have demonstrated that programmers can encapsulate a\n\t\t\t\t  reusable, tailorable software architecture as a\n\t\t\t\t  collection of collaborating, extensible object\n\t\t\t\t  classes. Such frameworks are particularly important\n\t\t\t\t  for developing open systems in which not only\n\t\t\t\t  functionality but architecture is reused across a\n\t\t\t\t  family of related applications. Unfortunately, the\n\t\t\t\t  design of frameworks remains an art rather than a\n\t\t\t\t  science, because of the inherent conflict between\n\t\t\t\t  reuse — packaging software components that can be\n\t\t\t\t  reused in as many contexts as possible — and\n\t\t\t\t  tailorability — designing software architectures\n\t\t\t\t  easily adapted to target requirements.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Serge Demeyer and Theo Dirk Meijler and Oscar Nierstrasz and Patrick Steyaert",
		"DOI": "10.1145/262793.262805",
		"JOURNAL": "Communications of the ACM",
		"KEYWORDS": "olit famoos-papref hypermedia zypher scg-pub snf97 onhindex(68) scg-none jb97 sergedem-papref",
		"MONTH": "October",
		"NUMBER": "10",
		"PAGES": "60--64",
		"PUBLISHER": "ACM Press",
		"TITLE": "Design Guidelines for Tailorable Frameworks",
		"URL": "http://scg.unibe.ch/archive/papers/Deme97bDesignGuidelines.pdf",
		"VOLUME": "40",
		"YEAR": "1997",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Deme97bDesignGuidelines.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/262793.262805"
	},
	{
		"key": "Deme97m",
		"type": "inproceedings",
		"ABSTRACT": "This document describes a hypothetical \"Framework\n\t\t\t\t  Browser\" in the form of a scenario describing the\n\t\t\t\t  ideal framework programming environment.",
		"AUTHOR": "Serge Demeyer",
		"BOOKTITLE": "Proceedings of the 3rd Workshop on Open Hypermedia Systems — Hypertext '97",
		"EDITOR": "Uffe Kock Wiil",
		"KEYWORDS": "olit hypermedia zypher scg-pub skip-doi toBeChecked snf97 scg-none jb97 sergedem-papunr",
		"MONTH": "April",
		"PAGES": "26--36",
		"PUBLISHER": "The Danish National Centre for IT Research — Forskerparken Gustav Wieds Vej 10 — DK-8000 Aarhus C — Denmark",
		"SERIES": "CIT Scientific report SR-97-01",
		"TITLE": "A Framework Browser Scenario",
		"URL": "http://www.iam.unibe.ch/~demeyer/Deme97m/ http://www.iam.unibe.ch/~demeyer/Deme97m/OHWS3scenaria.html http://www.daimi.aau.dk/~kock/OHS-HT97/",
		"YEAR": "1997",
		"BDSK-URL-1": "http://www.iam.unibe.ch/~demeyer/Deme97m/%20http://www.iam.unibe.ch/~demeyer/Deme97m/OHWS3scenaria.html%20http://www.daimi.aau.dk/~kock/OHS-HT97/"
	},
	{
		"key": "Deme98c",
		"type": "book",
		"ADDRESS": "Kaiserslautern, Germany",
		"EDITOR": "Serge Demeyer and Jan Bosch",
		"ISBN": "3-540-65460-7-(Donation-Serge)",
		"KEYWORDS": "skip-pdf olit ecoop98proc scg-pub skip-abstract skip-doi toBeChecked scglib snf98 scg-none jb98 sergedem-volume scg-none jb98",
		"MONTH": "December",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Object-Oriented Technology (ECOOP'98 Workshop Reader)",
		"VOLUME": "1543",
		"YEAR": "1998"
	},
	{
		"key": "Deme98m",
		"type": "article",
		"AUTHOR": "Serge Demeyer and Harald Gall",
		"JOURNAL": "Software Engineering Notes",
		"KEYWORDS": "olit famoos-papunr scg-pub skip-abstract skip-doi toBeChecked snf98 sergedem-papunr scg-none jb98",
		"MONTH": "January",
		"NUMBER": "1",
		"PAGES": "28--29",
		"PUBLISHER": "ACM",
		"TITLE": "Workshop on Object-Oriented Re-engineering (WOOR'97)",
		"URL": "http://scg.unibe.ch/archive/famoos/ESEC97/WOOR97rprt.html",
		"VOLUME": "23",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/famoos/ESEC97/WOOR97rprt.html"
	},
	{
		"key": "Deme98n",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Serge Demeyer and Stéphane Ducasse",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP '98 Workshop Reader)",
		"EDITOR": "Serge Demeyer and Jan Bosch",
		"KEYWORDS": "olit famoos-papunr scg-pub skip-pdf skip-abstract skip-doi snf98 metrics scg-none jb98 stefPub",
		"PAGES": "247--249",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Do Metrics Support Framework Development?",
		"VOLUME": "1543",
		"YEAR": "1998"
	},
	{
		"key": "Deme98o",
		"type": "inproceedings",
		"AUTHOR": "Serge Demeyer",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP '98 Workshop Reader)",
		"EDITOR": "Serge Demeyer and Jan Bosch",
		"KEYWORDS": "olit famoos-papunr scg-pub skip-abstract skip-doi toBeChecked snf98 sergedem-papunr scg-none jb98",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Analysis of Overridden Methods to Infer Hot Spots",
		"URL": "http://www.iam.unibe.ch/~demeyer/Deme98o/ http://www.iam.unibe.ch/~demeyer/Deme98o/paper.html",
		"VOLUME": "1543",
		"YEAR": "1998",
		"BDSK-URL-1": "http://www.iam.unibe.ch/~demeyer/Deme98o/%20http://www.iam.unibe.ch/~demeyer/Deme98o/paper.html"
	},
	{
		"key": "Deme98p",
		"type": "misc",
		"ABSTRACT": "Whereas a design pattern describes and discusses a\n\t\t\t\t  solution to a design problem, a reverse engineering\n\t\t\t\t  pattern describes how to understand aspects of an\n\t\t\t\t  object-oriented design and how to identify problems\n\t\t\t\t  in that design. In the context of a project\n\t\t\t\t  developing a methodology for reengineering\n\t\t\t\t  object-oriented legacy systems into frameworks,\n\t\t\t\t  weare working on a pattern language for\n\t\t\t\t  reengineering. This paper presents three samples of\n\t\t\t\t  that pattern language, all dealing with reverse\n\t\t\t\t  engineering.",
		"AUTHOR": "Serge Demeyer and Matthias Rieger and Sander Tichelaar",
		"KEYWORDS": "olit famoos-papunr scg-pub skip-doi sergedem-papunr tich-papunr snf98 scg-none jb98",
		"MONTH": "April",
		"NOTE": "Writing Workshop at EuroPLOP '98",
		"TITLE": "Three Reverse Engineering Patterns",
		"URL": "http://scg.unibe.ch/archive/papers/Deme98pThreeRevEngPatterns.pdf",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Deme98pThreeRevEngPatterns.pdf"
	},
	{
		"key": "Deme99a",
		"type": "inproceedings",
		"ABSTRACT": "Maturing a well designed framework requires a set of\n\t\t\t\t  software metrics to steer the iterative development\n\t\t\t\t  process. Based on a case study of the\n\t\t\t\t  VisualWorks/Smalltalk framework for user-interface\n\t\t\t\t  building, we conclude that today's size and\n\t\t\t\t  inheritance metrics are not reliable to detect\n\t\t\t\t  problems but are useful in measuring stability. We\n\t\t\t\t  expect that this work will contribute to the\n\t\t\t\t  application of metrics as a project management\n\t\t\t\t  tool.",
		"ANNOTE": "nationalconference",
		"AUTHOR": "Serge Demeyer and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of Languages et Modèles à Objets (LMO'99)",
		"EDITOR": "Jacques Malenfant",
		"KEYWORDS": "olit famoos-papref scg-pub skip-doi snf99 scg-none jb99 oorp stefPub moose-pub",
		"PAGES": "69--82",
		"PUBLISHER": "HERMES Science Publications, Paris",
		"TITLE": "Metrics, Do They Really Help?",
		"URL": "http://scg.unibe.ch/archive/papers/Deme99aDemeyerDucasseLMO99.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Deme99aDemeyerDucasseLMO99.pdf"
	},
	{
		"key": "Deme99b",
		"type": "article",
		"ABSTRACT": "Object-oriented frameworks are a particularly\n\t\t\t\t  appealing approach towards software reuse. An\n\t\t\t\t  object-oriented framework represents a design for a\n\t\t\t\t  family of applications, where variations in the\n\t\t\t\t  application domain are tackled by filling in the\n\t\t\t\t  so-called hot spots. However, experience has shown\n\t\t\t\t  that the current object-oriented mechanisms (class\n\t\t\t\t  inheritance and object composition) are not able to\n\t\t\t\t  elegantly support the \"fill in the hot spot\" idea.\n\t\t\t\t  This paper introduces class composition as a more\n\t\t\t\t  productive approach towards hot spots, offering all\n\t\t\t\t  of the advantages of both class inheritance and\n\t\t\t\t  object composition but involving extra work for the\n\t\t\t\t  framework designer.",
		"AUTHOR": "Serge Demeyer and Matthias Rieger and Theo Dirk Meijler and Edzard Gelsema",
		"JOURNAL": "Theory and Practice of Object Systems (TAPOS)",
		"KEYWORDS": "olit famoos-papref face scg-pub skip-doi toBeChecked snf98 sergedem-papref scg-none jb98",
		"MONTH": "April",
		"NUMBER": "2",
		"PAGES": "73--81",
		"PUBLISHER": "John Wiley & Sons",
		"TITLE": "Class Composition for Specifying Framework Design",
		"URL": "http://scg.unibe.ch/archive/papers/Deme99bClassComposition.pdf",
		"VOLUME": "5",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Deme99bClassComposition.pdf"
	},
	{
		"key": "Deme99c",
		"type": "inproceedings",
		"ABSTRACT": "Surprising as it may seem, many of the early\n\t\t\t\t  adopters of the object-oriented paradigm already\n\t\t\t\t  face a number of problems typically encountered in\n\t\t\t\t  large-scale legacy systems. Consequently, reverse\n\t\t\t\t  engineering techniques are relevant in an\n\t\t\t\t  object-oriented context as well. This paper\n\t\t\t\t  investigates a hybrid approach, combining the\n\t\t\t\t  immediate appeal of visualisations with the\n\t\t\t\t  scalability of metrics. We validate such a hybrid\n\t\t\t\t  approach by showing how CodeCrawler ---the\n\t\t\t\t  experimental platform we built--- allowed us to\n\t\t\t\t  understand the program structure of, and identify\n\t\t\t\t  potential design anomalies in a public domain\n\t\t\t\t  software system.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Serge Demeyer and Stéphane Ducasse and Michele Lanza",
		"BOOKTITLE": "Proceedings of 6th Working Conference on Reverse Engineering (WCRE '99)",
		"DOI": "10.1109/WCRE.1999.806958",
		"EDITOR": "Francoise Balmas and Mike Blaha and Spencer Rugaber",
		"KEYWORDS": "olit famoos-papref scg-pub snf99 scg-none jb99 oorp stefPub moose-pub",
		"MONTH": "October",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "A Hybrid Reverse Engineering Platform Combining Metrics and Program Visualization",
		"URL": "http://scg.unibe.ch/archive/papers/Deme99cCodeCrawler.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Deme99cCodeCrawler.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.1999.806958"
	},
	{
		"key": "Deme99d",
		"type": "inproceedings",
		"ABSTRACT": "UML is currently embraced as \"the\" standard in\n\t\t\t\t  object-oriented modeling languages, the recent work\n\t\t\t\t  of OMG on the Meta Object Faci lity (MOF) being the\n\t\t\t\t  most noteworthy example. We welcome these\n\t\t\t\t  standardisation efforts, yet warn against the\n\t\t\t\t  tendency to use UML as the panacea for all exchange\n\t\t\t\t  standards. In particular, we argue that UML is not\n\t\t\t\t  sufficient to serve as a tool-interoperability\n\t\t\t\t  standard for integrating round-trip engineering\n\t\t\t\t  tools, because one is forced to rely on UML's\n\t\t\t\t  built-in extension mechanisms to a dequately model\n\t\t\t\t  the reality in source-code. Meanwhile, our\n\t\t\t\t  argumentation includes a number of constructive\n\t\t\t\t  suggestions that we ho pe will influence future\n\t\t\t\t  releases of the UML and MOF standards.",
		"ACCEPTNUM": "44",
		"ACCEPTTOTAL": "166",
		"ADDRESS": "Kaiserslautern, Germany",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Serge Demeyer and Stéphane Ducasse and Sander Tichelaar",
		"BOOKTITLE": "Proceedings UML '99 (The Second International Conference on The Unified Modeling Language)",
		"EDITOR": "Bernhard Rumpe",
		"KEYWORDS": "olit famoos-papref scg-pub skip-doi snf99 scg-none jb99 stefPub moose-pub",
		"MISC": "acceptance rate: 44/166 = 26, SCI impact 0.515, ranked 39/69",
		"MONTH": "October",
		"PAGES": "630--644",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Why Unified is not Universal. UML Shortcomings for Coping with Round-trip Engineering",
		"URL": "http://scg.unibe.ch/archive/papers/Deme99dUML99.pdf",
		"VOLUME": "1723",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Deme99dUML99.pdf"
	},
	{
		"key": "Deme99e",
		"type": "misc",
		"AUTHOR": "Isabelle Borne and Serge Demeyer and Galal Hassan Galal",
		"KEYWORDS": "olit famoos-wrkproc scg-pub skip-abstract skip-doi toBeChecked sergedem-wrkproc scg-none jb99",
		"MONTH": "June",
		"TITLE": "Proceedings of the ECOOP'99 Workshop on Object-Oriented Architectural Evolution",
		"URL": "http://www.iam.unibe.ch/~demeyer/Deme99e/ http://www.emn.fr/borne/ECOOP99-OOAE.html",
		"YEAR": "1999",
		"BDSK-URL-1": "http://www.iam.unibe.ch/~demeyer/Deme99e/%20http://www.emn.fr/borne/ECOOP99-OOAE.html"
	},
	{
		"key": "Deme99f",
		"type": "book",
		"DOI": "10.1145/340855.340857",
		"EDITOR": "Serge Demeyer and Harald Gall",
		"KEYWORDS": "olit famoos-wrkproc scg-pub skip-abstract sergedem-wrkproc snf99 scg-none jb99",
		"MONTH": "September",
		"PUBLISHER": "Technical University of Vienna — Information Systems Institute — Distributed Systems Group",
		"SERIES": "TUV-1841-99-13",
		"TITLE": "Proceedings of the ESEC/FSE'99 Workshop on Object-Oriented Re-engineering (WOOR'99)",
		"URL": "http://www.iam.unibe.ch/~demeyer/Deme99f/",
		"YEAR": "1999",
		"BDSK-URL-1": "http://www.iam.unibe.ch/~demeyer/Deme99f/",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/340855.340857"
	},
	{
		"key": "Deme99m",
		"type": "inproceedings",
		"ABSTRACT": "-No abstract, the paper is only 2 pages-",
		"AUTHOR": "Serge Demeyer",
		"BOOKTITLE": "Proceedings of the 1st Workshop on Structural Computing — Hypertext '99",
		"EDITOR": "Peter Nuernberg",
		"KEYWORDS": "olit famoos-papunr scg-pub skip-doi toBeChecked sergedem-papunr snf99 scg-none jb99",
		"MONTH": "February",
		"TITLE": "Structural Computing: The Case for Reengineering Tools",
		"URL": "http://www.iam.unibe.ch/~demeyer/Deme99m/ http://www.iam.unibe.ch/~demeyer/Deme99m/ht99_02.html",
		"YEAR": "1999",
		"BDSK-URL-1": "http://www.iam.unibe.ch/~demeyer/Deme99m/%20http://www.iam.unibe.ch/~demeyer/Deme99m/ht99_02.html"
	},
	{
		"key": "Deme99n",
		"type": "inproceedings",
		"ABSTRACT": "This pattern language describes how to reverse\n\t\t\t\t  engineer an object-oriented software system. Since\n\t\t\t\t  the only way to achieve a truly reusable\n\t\t\t\t  object-oriented design is recognised to be iterative\n\t\t\t\t  development, reverse engineering is indeed an\n\t\t\t\t  essential facet of any object-oriented development\n\t\t\t\t  process. The pattern language itself covers the\n\t\t\t\t  different phases one encounters when reverse\n\t\t\t\t  engineering a large software system: from being\n\t\t\t\t  unfamiliar with a software system up untill\n\t\t\t\t  preparations for actual reengineering. What you read\n\t\t\t\t  here is a short version of a complete pattern\n\t\t\t\t  language. We present only five patterns in full\n\t\t\t\t  detail and include a summary for the remaining\n\t\t\t\t  patterns.",
		"ADDRESS": "Konstanz, Germany",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Serge Demeyer and Stéphane Ducasse and Sander Tichelaar",
		"BOOKTITLE": "Proceedings of the 4th European Conference on Pattern Languages of Programming and Computing, 1999",
		"EDITOR": "Paul Dyson",
		"KEYWORDS": "olit famoos-papunr scg-pub skip-doi sergedem-papunr tich-papunr snf99 scg-none jb99 stefPub",
		"MONTH": "July",
		"PUBLISHER": "UVK Universitätsverlag Konstanz GmbH",
		"TITLE": "A Pattern Language for Reverse Engineering",
		"URL": "http://scg.unibe.ch/archive/papers/Deme99nEuroplop99.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Deme99nEuroplop99.pdf"
	},
	{
		"key": "Deme00a",
		"type": "inproceedings",
		"ABSTRACT": "Reverse engineering is the process of uncovering the\n\t\t\t\t  design and the design rationale from a functioning\n\t\t\t\t  software system. Reverse engineering is an integral\n\t\t\t\t  part of any successful software system, because\n\t\t\t\t  changing requirements lead to implementations that\n\t\t\t\t  drift from their original design. In contrast to\n\t\t\t\t  traditional reverse engineering techniques -which\n\t\t\t\t  analyse a single snapshot of a system- we focus the\n\t\t\t\t  reverse engineering effort by determining where the\n\t\t\t\t  implementation has changed. Since changes of\n\t\t\t\t  object-oriented software are often phrased in terms\n\t\t\t\t  of refactorings, we propose a set of heuristics for\n\t\t\t\t  detecting refactorings by applying lightweight,\n\t\t\t\t  object-oriented metrics to successive versions of a\n\t\t\t\t  software system. We validate our approach with three\n\t\t\t\t  separate case studies of mature object-oriented\n\t\t\t\t  software systems for which multiple versions are\n\t\t\t\t  available. The case studies suggest that the\n\t\t\t\t  heuristics support the reverse engineering process\n\t\t\t\t  by focusing attention on the relevant parts of a\n\t\t\t\t  software system.",
		"ACCEPTNUM": "26",
		"ACCEPTTOTAL": "142",
		"ADDRESS": "New York NY",
		"ANNOTE": "internationalconference topconference",
		"AUTHOR": "Serge Demeyer and Stéphane Ducasse and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of 15th International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA '00)",
		"DOI": "10.1145/353171.353183",
		"KEYWORDS": "olit scg-pub scg-none jb00 snf00 oorp stefPub moose-pub onhindex(208)",
		"MISC": "acceptance rate: 26/142 = 18, SCI impact factor 0.190, ranked 66/77",
		"NOTE": "Also in ACM SIGPLAN Notices 35 (10)",
		"PAGES": "166--178",
		"PUBLISHER": "ACM Press",
		"TITLE": "Finding Refactorings via Change Metrics",
		"URL": "http://scg.unibe.ch/archive/papers/Deme00aFindingRefactoring.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Deme00aFindingRefactoring.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/353171.353183"
	},
	{
		"key": "Deme00d",
		"type": "inproceedings",
		"ABSTRACT": "Since object-oriented programming is usually\n\t\t\t\t  associated with iterative development, reverse\n\t\t\t\t  engineering must be considered an essential facet of\n\t\t\t\t  the object-oriented paradigm. The reverse\n\t\t\t\t  engineering pattern language presented here\n\t\t\t\t  summarises the reverse engineering experience\n\t\t\t\t  gathered as part of the FAMOOS project, a project\n\t\t\t\t  with the explicit goal of investigating reverse and\n\t\t\t\t  reengineering techniques in an object-oriented\n\t\t\t\t  context. Due to limitations on EuroPLOP submissions,\n\t\t\t\t  only part of the full pattern language is presented,\n\t\t\t\t  namely the patterns describing how to gain an\n\t\t\t\t  initial understanding of a software system.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Serge Demeyer and Stéphane Ducasse and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of EuroPLoP '2000",
		"ISBN": "3-87940-775-4",
		"KEYWORDS": "snf-none stefPub olit scg-pub skip-doi scg-none jb00",
		"PAGES": "189--208",
		"PUBLISHER": "UVK GmbH",
		"TITLE": "A Pattern Language for Reverse Engineering",
		"URL": "http://scg.unibe.ch/archive/papers/Deme00dRevEng.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Deme00dRevEng.pdf"
	},
	{
		"key": "Deme00m",
		"type": "article",
		"AUTHOR": "Serge Demeyer and Harald Gall",
		"DOI": "10.1145/340855.340857",
		"JOURNAL": "Software Engineering Notes",
		"KEYWORDS": "olit famoos-papunr scg-pub skip-abstract toBeChecked snf99 scg-none sergedem-papunr scg-none jb-none",
		"MONTH": "January",
		"NUMBER": "1",
		"PUBLISHER": "ACM",
		"TITLE": "Workshop on Object-Oriented Re-engineering (WOOR'99)",
		"URL": "http://scg.unibe.ch/archive/famoos/ESEC99/WOOR99report.html",
		"VOLUME": "25",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/famoos/ESEC99/WOOR99report.html",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/340855.340857"
	},
	{
		"key": "Deme02a",
		"type": "book",
		"ABSTRACT": "The rapid growth of object-oriented development over\n\t\t\t\t  the past twenty years has given rise to many\n\t\t\t\t  object-oriented systems that are large, complex and\n\t\t\t\t  hard to maintain. Object-Oriented Reengineering\n\t\t\t\t  Patterns addresses the problem of understanding and\n\t\t\t\t  reengineering such object-oriented legacy systems.\n\t\t\t\t  This book collects and distills successful\n\t\t\t\t  techniques in planning a reengineering project,\n\t\t\t\t  reverse-engineering, problem detection, migration\n\t\t\t\t  strategies and software redesign. The material in\n\t\t\t\t  this book is presented as a set of \"reengineering\n\t\t\t\t  patterns\" — recurring solutions that experts apply\n\t\t\t\t  while reengineering and maintaining object-oriented\n\t\t\t\t  systems. The principles and techniques described in\n\t\t\t\t  this book have been observed and validated in a\n\t\t\t\t  number of industrial projects, and reflect best\n\t\t\t\t  practice in object-oriented reengineering.",
		"ANNOTE": "book",
		"AUTHOR": "Serge Demeyer and Stéphane Ducasse and Oscar Nierstrasz",
		"ISBN": "1-55860-639-4",
		"KEYWORDS": "olit scg-pub skip-doi scg-none jb02 patterns reeng snf02 stefPub moose-pub onhindex(291)",
		"PUBLISHER": "Morgan Kaufmann",
		"TITLE": "Object-Oriented Reengineering Patterns",
		"URL": "http://scg.unibe.ch/download/oorp",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/download/oorp"
	},
	{
		"key": "Deme03a",
		"type": "inproceedings",
		"ANNOTE": "workshopproceedings",
		"AUTHOR": "Serge Demeyer and Stéphane Ducasse and Kim Mens and Adrian Trifu and Rajesh Vasa",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP'03 Workshop Reader)",
		"KEYWORDS": "skip-pdf skip-doi skip-abstract scg-pub scg-none jb04 stefPub recast03",
		"PAGES": "72-85",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Report of the ECOOP'03 Workshop on Object-Oriented Reengineering",
		"YEAR": "2003"
	},
	{
		"key": "Deme03b",
		"type": "misc",
		"ANNOTE": "workshopproceedings",
		"AUTHOR": "Wolfgang Demeuter and Stéphane Ducasse and Theo D'hondt and Ole Lehrmann Madsen",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP'03 Workshop Reader)",
		"KEYWORDS": "skip-pdf skip-doi skip-abstract scg-pub scg-none jb04 stefPub snf03",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Report of the ECOOP'03 Workshop on Object-Oriented Language Engineering in Post-Java Era",
		"YEAR": "2003"
	},
	{
		"key": "Deme05a",
		"type": "inproceedings",
		"ABSTRACT": "The notion of refactoring — transforming the\n\t\t\t\t  source-code of an object-oriented program without\n\t\t\t\t  changing its external behaviour — has been studied\n\t\t\t\t  intensively within the last decade. This diversity\n\t\t\t\t  has created a plethora of toy-examples, cases and\n\t\t\t\t  code snippets, which make it hard to assess the\n\t\t\t\t  current state-of-the-art. Moreover, due to this\n\t\t\t\t  diversity, there is currently no accepted way of\n\t\t\t\t  teaching good refactoring practices, despite the\n\t\t\t\t  acknowledgment in the software engineering body of\n\t\t\t\t  knowledge. Therefore, this paper presents a common\n\t\t\t\t  example — the LAN simulation — which has been\n\t\t\t\t  used by a number of European Universities for both\n\t\t\t\t  research and teaching purposes.",
		"ACCEPTNUM": "13",
		"ACCEPTTOTAL": "54",
		"ADDRESS": "Los Alamitos CA",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Serge Demeyer and Filip Van Rysselberghe and Tudor Gîrba and Jacek Ratzinger and Radu Marinescu and Tom Mens and Bart Du Bois and Dirk Janssens and Stéphane Ducasse and Michele Lanza and Matthias Rieger and Harald Gall and Michel Wermelinger and Mohammad El-Ramly",
		"BOOKTITLE": "Proceedings of IWPSE 2005 (8th International Workshop on Principles of Software Evolution)",
		"DOI": "10.1109/IWPSE.2005.30",
		"INRI": "hors",
		"KEYWORDS": "scg-pub evolution stefPub jointERCIM girba recast06 scg-none jb06 moose-pub",
		"LOCATION": "Lisbon, Portugal",
		"MISC": "acceptance rate: 13/54=24",
		"PAGES": "123--131",
		"PUBLISHER": "IEEE Computer Society Press",
		"RATE": "24%",
		"SELECTIF": "oui",
		"TITLE": "The LAN-simulation: A Research and Teaching Example for Refactoring",
		"URL": "http://scg.unibe.ch/archive/papers/Deme05aLANRefactoring.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Deme05aLANRefactoring.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/IWPSE.2005.30"
	},
	{
		"key": "Deme06a",
		"type": "inproceedings",
		"ANNOTE": "workshopproceedings",
		"AUTHOR": "Serge Demeyer and Kim Mens and Roel Wuyts and Yann-Gaël Guéehéneuc and Andy Zaidman and Neil Walkinshaw and Ademar Aguiar and Stéphane Ducasse",
		"BOOKTITLE": "Object-Oriented Technology. ECOOP'05 Workshop Reader",
		"KEYWORDS": "scg-pub skip-abstract skip-doi scg-none jb-none stefPub",
		"TITLE": "Report of the 6th ECOOP'05 Workshop on Object-Oriented Reengineering",
		"URL": "https://released.info.ucl.ac.be/pmwiki/uploads/Publications/ReportOfTheSixthInternationalWorkshopOnObject-OrientedReengineering/ecoop05reader.pdf",
		"YEAR": "2006"
	},
	{
		"key": "Deme08a",
		"type": "book",
		"ABSTRACT": "The rapid growth of object-oriented development over\n\t\t\t\t  the past twenty years has given rise to many\n\t\t\t\t  object-oriented systems that are large, complex and\n\t\t\t\t  hard to maintain. Object-Oriented Reengineering\n\t\t\t\t  Patterns addresses the problem of understanding and\n\t\t\t\t  reengineering such object-oriented legacy systems.\n\t\t\t\t  This book collects and distills successful\n\t\t\t\t  techniques in planning a reengineering project,\n\t\t\t\t  reverse-engineering, problem detection, migration\n\t\t\t\t  strategies and software redesign. The material in\n\t\t\t\t  this book is presented as a set of \"reengineering\n\t\t\t\t  patterns\" — recurring solutions that experts apply\n\t\t\t\t  while reengineering and maintaining object-oriented\n\t\t\t\t  systems. The principles and techniques described in\n\t\t\t\t  this book have been observed and validated in a\n\t\t\t\t  number of industrial projects, and reflect best\n\t\t\t\t  practice in object-oriented reengineering.",
		"ANNOTE": "book",
		"AUTHOR": "Serge Demeyer and Stéphane Ducasse and Oscar Nierstrasz",
		"ISBN": "978-3-9523341-2-6",
		"KEYWORDS": "olit scg08 scg-pub snf-none jb09 skip-doi stefPub mooseCincom moose-pub",
		"MEDIUM": "2",
		"PEERREVIEW": "no",
		"PUBLISHER": "Square Bracket Associates",
		"TITLE": "Object-Oriented Reengineering Patterns",
		"URL": "http://scg.unibe.ch/download/oorp/",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/download/oorp/"
	},
	{
		"key": "Deni09a",
		"type": "inproceedings",
		"ABSTRACT": "The increasing amount of data available about\n\t\t\t\t  software systems poses new challenges for re- and\n\t\t\t\t  reverse engineering research, as the proposed\n\t\t\t\t  approaches need to scale. In this context, concerns\n\t\t\t\t  about meta-modeling and analysis techniques need to\n\t\t\t\t  be augmented by technical concerns about how to\n\t\t\t\t  reuse and how to build upon the efforts of previous\n\t\t\t\t  research. MOOSE is an extensive infrastructure for\n\t\t\t\t  reverse engineering evolved for over 10 years that\n\t\t\t\t  promotes the reuse of engineering efforts in\n\t\t\t\t  research. MOOSE accommodates various types of data\n\t\t\t\t  modeled in the FAMIX family of meta-models. The goal\n\t\t\t\t  of this half-day workshop is to strengthen the\n\t\t\t\t  community of researchers and practitioners who are\n\t\t\t\t  working in re- and reverse engineering, by providing\n\t\t\t\t  a forum for building future research starting from\n\t\t\t\t  MOOSE and FAMIX as shared infrastructure.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Simon Denier and Tudor Gîrba",
		"BOOKTITLE": "16th Working Conference on Software Maintenance and Reengineering (WCRE 2009)",
		"DOI": "10.1109/WCRE.2009.56",
		"KEYWORDS": "scg09 scg-pub girba jb10 moose-pub hasler10",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "325--326",
		"PEERREVIEW": "yes",
		"TITLE": "Workshop on FAMIX and Moose in Software Reengineering (FAMOOSr 2009)",
		"URL": "http://scg.unibe.ch/archive/papers/Deni09aFAMOOSr2009.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Deni09aFAMOOSr2009.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2009.56"
	},
	{
		"key": "Denk06a",
		"type": "article",
		"ABSTRACT": "Transforming programs to alter their semantics is of\n\t\t\t\t  wide interest, for purposes as diverse as\n\t\t\t\t  off-the-shelf component adaptation, optimization,\n\t\t\t\t  trace generation, and experimentation with new\n\t\t\t\t  language features. The current wave of interest in\n\t\t\t\t  advanced technologies for better separation of\n\t\t\t\t  concerns, such as aspect-oriented programming, is a\n\t\t\t\t  solid testimony of this fact. Strangely enough,\n\t\t\t\t  almost all proposals are formulated in the context\n\t\t\t\t  of Java, in which tool providers encounter severe\n\t\t\t\t  restrictions due to the rigidity of the environment.\n\t\t\t\t  This paper present ByteSurgeon, a library to\n\t\t\t\t  transform binary code in Smalltalk. ByteSurgeon\n\t\t\t\t  takes full advantage of the flexibility of the\n\t\t\t\t  Squeak environment to enable bytecode transformation\n\t\t\t\t  at runtime, thereby allowing dynamic, on-the-fly\n\t\t\t\t  modification of applications. ByteSurgeon operates\n\t\t\t\t  on bytecode in order to cope with situations where\n\t\t\t\t  the source code is not available, while providing\n\t\t\t\t  appropriate high-level abstractions so that users do\n\t\t\t\t  not need to program at the bytecode level. We\n\t\t\t\t  illustrate the use of ByteSurgeon via the\n\t\t\t\t  implementation of method wrappers and a simple MOP,\n\t\t\t\t  and report on its efficiency.",
		"AERES": "ACL",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Marcus Denker and Stéphane Ducasse and Éric Tanter",
		"DOI": "10.1016/j.cl.2005.10.002",
		"IMPACTFACTOR": "0.467, SCI 2005",
		"JOURNAL": "Journal of Computer Languages, Systems and Structures",
		"KEYWORDS": "scg-pub stefPub scg-none jb06 snf-actsc snf06",
		"MISC": "SCI impact factor 0.467 (2005)",
		"MONTH": "July",
		"NUMBER": "2-3",
		"PAGES": "125--139",
		"PUBLISHER": "Elsevier",
		"SELECTIF": "non",
		"TITLE": "Runtime Bytecode Transformation for Smalltalk",
		"URL": "http://scg.unibe.ch/archive/papers/Denk06aRuntimeByteCodeESUGJournal.pdf",
		"VOLUME": "32",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Denk06aRuntimeByteCodeESUGJournal.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.cl.2005.10.002"
	},
	{
		"key": "Denk06c",
		"type": "inproceedings",
		"ABSTRACT": "The developers of tools for dynamic analysis are\n\t\t\t\t  faced with choosing from the many approaches to\n\t\t\t\t  gathering runtime data. Typically, dynamic analysis\n\t\t\t\t  involves instrumenting the program under\n\t\t\t\t  investigation to record its runtime behavior.\n\t\t\t\t  Current approaches for byte-code based systems like\n\t\t\t\t  Java and Smalltalk rely often on inserting byte-code\n\t\t\t\t  into the program under analysis. However, detailed\n\t\t\t\t  knowledge of the target programming language or\n\t\t\t\t  virtual machine is required to implement dynamic\n\t\t\t\t  analysis tools. Obtaining and exploiting this\n\t\t\t\t  knowledge to build better analysis tools is\n\t\t\t\t  cumbersome and often distracts the tool builder from\n\t\t\t\t  the actual goal, which is the analysis of the\n\t\t\t\t  runtime behavior of a system. In this paper, we\n\t\t\t\t  argue that we need to adopt a higher level view of a\n\t\t\t\t  software system when considering the task of\n\t\t\t\t  abstracting runtime information. We focus on\n\t\t\t\t  object-oriented virtual machine based languages. We\n\t\t\t\t  want to be able to deal with the runtime system as a\n\t\t\t\t  collection of reified first-class entities. We\n\t\t\t\t  propose to achieve this by introducing a layer of\n\t\t\t\t  abstraction, i.e., a behavioral middle layer. This\n\t\t\t\t  has the advantage that the task of collecting\n\t\t\t\t  dynamic information is not concerned with low level\n\t\t\t\t  details of a specific language or virtual machine.\n\t\t\t\t  The positive effect of such a behavioral middle\n\t\t\t\t  layer is twofold: on the one hand it provides us\n\t\t\t\t  with a standard API for all dynamic analysis based\n\t\t\t\t  tools to use, on the other hand it allows the tool\n\t\t\t\t  developer to abstract from the actual implementation\n\t\t\t\t  technique.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Marcus Denker and Orla Greevy and Michele Lanza",
		"BOOKTITLE": "2nd International Workshop on Program Comprehension through Dynamic Analysis (PCODA 2006)",
		"KEYWORDS": "scg-pub skip-doi snf07 scg-none jb07 fb06 reflectivity",
		"MEDIUM": "2",
		"PAGES": "32--38",
		"PEERREVIEW": "yes",
		"TITLE": "Higher Abstractions for Dynamic Analysis",
		"URL": "http://scg.unibe.ch/archive/papers/Denk06cHigherAbstractionsPCODA06.pdf http://www.lore.ua.ac.be/Events/PCODA2006/index.html",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Denk06cHigherAbstractionsPCODA06.pdf%20http://www.lore.ua.ac.be/Events/PCODA2006/index.html"
	},
	{
		"key": "Denk07a",
		"type": "inproceedings",
		"ABSTRACT": "Over the last few years, we actively participated in\n\t\t\t\t  the maintenance and evolution of Squeak, an\n\t\t\t\t  open-source Smalltalk. The community is constantly\n\t\t\t\t  faced with the problem of enabling changes while at\n\t\t\t\t  the same time preserving compatibility. In this\n\t\t\t\t  paper we describe the current situation, the\n\t\t\t\t  problems that faced the community and we outline the\n\t\t\t\t  solutions that have been put in place. We also\n\t\t\t\t  identify some areas where problems continue to exist\n\t\t\t\t  and propose these as potential problems to addressed\n\t\t\t\t  by the research community.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Marcus Denker and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of the ERCIM Working Group on Software Evolution (2006)",
		"DOI": "10.1016/j.entcs.2006.08.003",
		"INRIA": "hors",
		"ISSN": "1571-0661",
		"KEYWORDS": "scg07 stefPub scg-pub snf06 recast06 jb07",
		"MEDIUM": "2",
		"MONTH": "January",
		"PAGES": "81--91",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Elsevier",
		"SELECTIF": "non",
		"SERIES": "Electronic Notes in Theoretical Computer Science",
		"TITLE": "Software Evolution from the Field: an Experience Report from the Squeak Maintainers",
		"URL": "http://scg.unibe.ch/archive/papers/Denk07aErcimEvolutionSqueak.pdf",
		"VOLUME": "166",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Denk07aErcimEvolutionSqueak.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.entcs.2006.08.003"
	},
	{
		"key": "Denk07b",
		"type": "inproceedings",
		"ABSTRACT": "Reflection has proved to be a powerful feature to\n\t\t\t\t  support the design of development environments and\n\t\t\t\t  to extend languages. However, the granularity of\n\t\t\t\t  structural reflection stops at the method level.\n\t\t\t\t  This is a problem since without sub-method\n\t\t\t\t  reflection developers have to duplicate efforts, for\n\t\t\t\t  example to introduce transparently pluggable\n\t\t\t\t  type-checkers or fine-grained profilers. In this\n\t\t\t\t  paper we present Persephone, an efficient\n\t\t\t\t  implementation of a sub-method meta-object protocol\n\t\t\t\t  (MOP) based on AST annotations and dual methods (a\n\t\t\t\t  compiled method and its meta-object) that reconcile\n\t\t\t\t  AST expressiveness with bytecode execution. We\n\t\t\t\t  validate the MOP by presenting TreeNurse, a method\n\t\t\t\t  instrumentation framework and TypePlug, an optional,\n\t\t\t\t  pluggable type system which is based on Persephone.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Marcus Denker and Stéphane Ducasse and Adrian Lienhard and Philippe Marschall",
		"BOOKTITLE": "Journal of Object Technology, Special Issue. Proceedings of TOOLS Europe 2007",
		"CACHED": "http://scg.unibe.ch/archive/papers/Denk07bPersephoneTools.pdf",
		"DOI": "10.5381/jot.2007.6.9.a14",
		"INRIA": "hors",
		"ISSN": "1660-1769",
		"KEYWORDS": "scg07 scg-pub jb08 snf07 jot snf-bmcc reflectivity",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "231--251",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ETH",
		"SELECTIF": "non",
		"TITLE": "Sub-Method Reflection",
		"URL": "http://www.jot.fm/contents/issue_2007_10/paper14.html",
		"VOLUME": "6/9",
		"YEAR": "2007",
		"BDSK-URL-1": "http://www.jot.fm/issues/issue_2007_10/paper14.html"
	},
	{
		"key": "Denk07c",
		"type": "inproceedings",
		"ABSTRACT": "Real world software systems change continuously to\n\t\t\t\t  meet new demands. Most programming languages and\n\t\t\t\t  development environments, however, are more\n\t\t\t\t  concerned with limiting the effects of change rather\n\t\t\t\t  than enabling and exploiting change. Various\n\t\t\t\t  techniques and technologies to exploit change have\n\t\t\t\t  been developed over the years, but there exists no\n\t\t\t\t  common support for these approaches. We propose\n\t\t\t\t  Changeboxes as a general-purpose mechanism for\n\t\t\t\t  encapsulating change as a first-class entity in a\n\t\t\t\t  running software system. Changeboxes support\n\t\t\t\t  multiple, concurrent and possibly inconsistent views\n\t\t\t\t  of software artifacts within the same running\n\t\t\t\t  system. Since Changeboxes are first-class, they can\n\t\t\t\t  be manipulated to control the scope of change in a\n\t\t\t\t  running system.Furthermore, Changeboxes capture the\n\t\t\t\t  semantics of change. Changeboxes can be used, for\n\t\t\t\t  example, to encapsulate refactorings, or to replay\n\t\t\t\t  or analyze the history of changes. In this paper we\n\t\t\t\t  introduce Changeboxes by means of a prototype\n\t\t\t\t  implementation. We illustrate the benefits that\n\t\t\t\t  Changeboxes offer for evolving software systems, and\n\t\t\t\t  we present the results of a preliminary performance\n\t\t\t\t  evaluation that assesses the costs associated with\n\t\t\t\t  Changeboxes while suggesting possible strategies for\n\t\t\t\t  improvement.",
		"ADDRESS": "Lugano, Switzerland",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Marcus Denker and Tudor Gîrba and Adrian Lienhard and Oscar Nierstrasz and Lukas Renggli and Pascal Zumkehr",
		"BOOKTITLE": "ICDL'07: Proceedings of the 15th International Conference on Dynamic Languages",
		"DOI": "10.1145/1352678.1352681",
		"ISBN": "978-1-60558-084-5",
		"KEYWORDS": "scg07 scg-pub jb08 snf08 girba cop-lit",
		"MEDIUM": "2",
		"MONTH": "August",
		"PAGES": "25--49",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM Digital Library",
		"TITLE": "Encapsulating and Exploiting Change with Changeboxes",
		"URL": "http://scg.unibe.ch/archive/papers/Denk07cChangeboxes.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Denk07cChangeboxes.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1352678.1352681"
	},
	{
		"key": "Denk07d",
		"type": "inproceedings",
		"ABSTRACT": "The dynamic analysis approach to feature\n\t\t\t\t  identification describes a technique for capturing\n\t\t\t\t  feature behavior and mapping it to source code.\n\t\t\t\t  Major drawbacks of this approach are (1) large\n\t\t\t\t  amounts of data and (2) lack of support for\n\t\t\t\t  sub-method elements. In this paper we propose to\n\t\t\t\t  leverage sub-method reflection to identify and model\n\t\t\t\t  features. We perform an on-the-fly analysis\n\t\t\t\t  resulting in annotating the operations participating\n\t\t\t\t  in a feature's behavior with meta-data.The primary\n\t\t\t\t  advantage of our annotation approach is that we\n\t\t\t\t  obtain a fine-grained level of granularity while at\n\t\t\t\t  the same time eliminating the need to retain and\n\t\t\t\t  analyze large traces for feature analysis.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Marcus Denker and Orla Greevy and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 3rd International Workshop on Program Comprehension through Dynamic Analysis (PCODA 2007)",
		"ISSN": "1872-5392",
		"KEYWORDS": "scg07 scg-pub skip-doi snf08 jb08 reflectivity",
		"MEDIUM": "2",
		"PAGES": "29--33",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Technische Universiteit Delft",
		"TITLE": "Supporting Feature Analysis with Runtime Annotations",
		"URL": "http://scg.unibe.ch/archive/papers/Denk07dFeatureAnnotationPCODA.pdf",
		"URL2": "http://swerl.tudelft.nl/bin/view/Main/PCODA2007",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Denk07dFeatureAnnotationPCODA.pdf%20http://swerl.tudelft.nl/bin/view/Main/PCODA2007"
	},
	{
		"key": "Denk08b",
		"type": "inproceedings",
		"ABSTRACT": "Behavioral reflection is crucial to support for\n\t\t\t\t  example functional upgrades, on-the-fly debugging,\n\t\t\t\t  or monitoring critical applications. However the use\n\t\t\t\t  of reflective features can lead to severe problems\n\t\t\t\t  due to infinite metacall recursion even in simple\n\t\t\t\t  cases. This is especially a problem when reflecting\n\t\t\t\t  on core language features since there is a high\n\t\t\t\t  chance that such features are used to implement the\n\t\t\t\t  reflective behavior itself. In this paper we analyze\n\t\t\t\t  the problem of infinite meta-object call recursion\n\t\t\t\t  and solve it by providing a first class\n\t\t\t\t  representation of meta-level execution: at any point\n\t\t\t\t  in the execution of a system it can be determined if\n\t\t\t\t  we are operating on a meta-level or base level so\n\t\t\t\t  that we can prevent infinite recursion. We present\n\t\t\t\t  how meta-level execution can be represented by a\n\t\t\t\t  meta-context and how reflection becomes\n\t\t\t\t  context-aware. Our solution makes it possible to\n\t\t\t\t  freely apply behavioral reflection even on system\n\t\t\t\t  classes: the meta-context brings stability to\n\t\t\t\t  behavioral reflection. We validate the concept with\n\t\t\t\t  a robust implementation and we present benchmarks.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres12",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Marcus Denker and Mathieu Suen and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of TOOLS EUROPE 2008",
		"DOI": "10.1007/978-3-540-69824-1_13",
		"HAL": "inria-00271286,p56w09p",
		"INRIA": "RMD",
		"ISSN": "1865-1348",
		"KEYWORDS": "scg08 scg-pub jb08 fb08 snf08 reflectivity",
		"MEDIUM": "2",
		"PAGES": "218--237",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"SELECTIF": "non",
		"SERIES": "LNBIP",
		"TITLE": "The Meta in Meta-object Architectures",
		"URL": "http://scg.unibe.ch/archive/papers/Denk08bMetaContextLNBIP.pdf",
		"VOLUME": "11",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Denk08bMetaContextLNBIP.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-540-69824-1_13"
	},
	{
		"key": "Denk10a",
		"type": "inproceedings",
		"ABSTRACT": "A feature represents a functional requirement\n\t\t\t\t  fulfilled by a system. Since many maintenance tasks\n\t\t\t\t  are expressed in terms of features, it is important\n\t\t\t\t  to establish the correspondence between a feature\n\t\t\t\t  and its implementation in source code. Traditional\n\t\t\t\t  approaches to establish this correspondence exercise\n\t\t\t\t  features to generate a trace of runtime events,\n\t\t\t\t  which is then processed by post-mortem analysis.\n\t\t\t\t  These approaches typically generate large amounts of\n\t\t\t\t  data to analyze. Due to their static nature, these\n\t\t\t\t  approaches do not support incremental and\n\t\t\t\t  interactive analysis of features. We propose a\n\t\t\t\t  radically different approach called live feature\n\t\t\t\t  analysis, which provides a model at runtime of\n\t\t\t\t  features. Our approach analyzes features on a\n\t\t\t\t  running system and also makes it possible to grow\n\t\t\t\t  feature representations by exercising different\n\t\t\t\t  scenarios of the same feature, and identifies\n\t\t\t\t  execution elements even to the sub-method level. We\n\t\t\t\t  describe how live feature analysis is implemented\n\t\t\t\t  effectively by annotating structural representations\n\t\t\t\t  of code based on abstract syntax trees. We\n\t\t\t\t  illustrate our live analysis with a case study where\n\t\t\t\t  we achieve a more complete feature representation by\n\t\t\t\t  exercising and merging variants of feature behavior\n\t\t\t\t  and demonstrate the efficiency or our technique with\n\t\t\t\t  benchmarks.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Marcus Denker and Jorge Ressia and Orla Greevy and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of MODELS 2010 Part II",
		"DOI": "10.1007/978-3-642-16129-2_11",
		"ISBN": "978-3-642-16128-5",
		"KEYWORDS": "snf10 jb11 scg-pub scg10 bifrost",
		"MEDIUM": "2",
		"MISC": "Acceptance rate: 20.8",
		"MONTH": "October",
		"PAGES": "138--152",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Modeling Features at Runtime",
		"URL": "http://scg.unibe.ch/archive/papers/Denk10a-Models10-FeatureModels.pdf",
		"VOLUME": "6395",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Denk10a-Models10-FeatureModels.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-642-16129-2_11"
	},
	{
		"key": "Deri96a",
		"type": "inproceedings",
		"ABSTRACT": "The increasing complexity and heterogeneity of\n\t\t\t\t  modern networks has pushed industry and research\n\t\t\t\t  towards a single and consistent way of managing\n\t\t\t\t  networks. The effort to define a single\n\t\t\t\t  industry-standard API for network management\n\t\t\t\t  basically failed because it did not address aspects\n\t\t\t\t  like complexity and ease of programming. Recently, a\n\t\t\t\t  common approach is to map established network\n\t\t\t\t  management standards into another object model,\n\t\t\t\t  often based on the emerging Corba standard.\n\t\t\t\t  Unfortunately even this approach has shown many\n\t\t\t\t  drawbacks related primarily to the significant\n\t\t\t\t  amount of code that has to be linked with the final\n\t\t\t\t  application and to the many limitations and\n\t\t\t\t  imperfections of the mapping itself. This paper\n\t\t\t\t  describes a new approach to inter-domain management\n\t\t\t\t  that attempts to overcome the limitations of current\n\t\t\t\t  solutions. The goal is to allow people to write\n\t\t\t\t  hybrid CMIP and SNMP-based network management\n\t\t\t\t  applications using a single and simple object model.\n\t\t\t\t  Relevant characteristics of this approach are that\n\t\t\t\t  it is light, extensible, object-oriented,\n\t\t\t\t  language-neutral, built upon software-components,\n\t\t\t\t  string-syntax based and Internet-ready. This\n\t\t\t\t  demonstrates that it is feasible to implement simple\n\t\t\t\t  and light applications for inter-domain management\n\t\t\t\t  without the need for expensive or complex\n\t\t\t\t  technologies.",
		"AUTHOR": "Luca Deri",
		"BOOKTITLE": "ECOOP '96 Workshop on 'OO Technologies For Network and Service Management' Proceedings",
		"BROKENURL": "http://www.zurich.ibm.com/~lde/SimpleNM.ps.Z",
		"KEYWORDS": "olit scg-pub skip-doi toBeChecked snf96 scg-none jb96",
		"MONTH": "July",
		"TITLE": "Network Management for the 90s",
		"YEAR": "1996"
	},
	{
		"key": "Deri96b",
		"type": "inproceedings",
		"ABSTRACT": "Network management standards provide a basis for\n\t\t\t\t  hiding differences between network resources, along\n\t\t\t\t  with a method of managing them in a consistent way.\n\t\t\t\t  Frequently, network management tools are based on\n\t\t\t\t  proprietary products and are often complex both to\n\t\t\t\t  use and to install. The increasing popularity of the\n\t\t\t\t  World Wide Web, with its established user interface\n\t\t\t\t  and the ability to run on almost any platform,\n\t\t\t\t  offers a new way to provide wide access to complex\n\t\t\t\t  software applications. This paper describes the\n\t\t\t\t  architecture and implementation of two new network\n\t\t\t\t  management applications that are accessible through\n\t\t\t\t  the web and are targeted to run on powerful hosts as\n\t\t\t\t  well as small mobile computers. The GDMO/ASN.1\n\t\t\t\t  Search Engine enables users to perform complex\n\t\t\t\t  queries and to navigate OSI management documents\n\t\t\t\t  exploiting the web hypertext facilities. Liaison is\n\t\t\t\t  a web-based browser for CMIP/SNMP agents equipped\n\t\t\t\t  with powerful tools such as a directory service and\n\t\t\t\t  a metadata facility.",
		"AUTHOR": "Luca Deri",
		"BOOKTITLE": "2nd International IEEE Workshop on Systems Management Proceedings",
		"BROKENURL": "http://www.zurich.ibm.com/~lde/Surfin.ps.Z",
		"KEYWORDS": "olit scg-pub skip-doi toBeChecked snf96 scg-none jb96",
		"MONTH": "June",
		"PAGES": "158--167",
		"TITLE": "Surfin' Network Resources Across the Web",
		"YEAR": "1996"
	},
	{
		"key": "Deza08a",
		"type": "inproceedings",
		"ABSTRACT": "The demands of developing modern, highly dynamic\n\t\t\t\t  applications have led to an increasing interest in\n\t\t\t\t  dynamic programming languages and mechanisms. Not\n\t\t\t\t  only applications must evolve over time, but the\n\t\t\t\t  object models themselves may need to be adapted to\n\t\t\t\t  the requirements of different run-time contexts.\n\t\t\t\t  Class-based models and prototype-based models, for\n\t\t\t\t  example, may need to co-exist to meet the demands of\n\t\t\t\t  dynamically evolving applications. Multi-dimensional\n\t\t\t\t  dispatch, fine-grained and dynamic software\n\t\t\t\t  composition, and run-time evolution of behaviour are\n\t\t\t\t  further examples of diverse mechanisms which may\n\t\t\t\t  need to co-exist in a dynamically evolving run-time\n\t\t\t\t  environment How can we model the semantics of these\n\t\t\t\t  highly dynamic features, yet still offer some\n\t\t\t\t  reasonable safety guarantees? To this end we present\n\t\t\t\t  an original calculus in which objects can adapt\n\t\t\t\t  their behaviour at run-time to changing contexts.\n\t\t\t\t  Both objects and environments are represented by\n\t\t\t\t  first-class mappings between variables and values.\n\t\t\t\t  Message sends are dynamically resolved to method\n\t\t\t\t  calls. Variables may be dynamically bound, making it\n\t\t\t\t  possible to model a variety of dynamic mechanisms\n\t\t\t\t  within the same calculus. Despite the highly dynamic\n\t\t\t\t  nature of the calculus, safety properties are\n\t\t\t\t  assured by a type assignment system.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Mariangiola Dezani-Ciancaglini and Paola Giannini and Oscar Nierstrasz",
		"BDSK-URL-1": "http://homepages.fh-regensburg.de/~mpool/mpool08/programme.html http://scg.unibe.ch/archive/papers/Deza08aEvolvingObjects.pdf",
		"BOOKTITLE": "Proceedings of the 6th International Workshop on Multiparadigm Programming with Object-Oriented Languages (MPOOL 2008)",
		"KEYWORDS": "snf08 scg08 scg-pub skip-doi jb08 cop-lit",
		"MEDIUM": "2",
		"NOTE": "Extended version published in Scientific Annals of Computer Science",
		"PEERREVIEW": "yes",
		"TITLE": "A Calculus of Evolving Objects",
		"URL": "http://scg.unibe.ch/archive/papers/Deza08aEvolvingObjects.pdf",
		"URL2": "http://homepages.fh-regensburg.de/~mpool/mpool08/programme.html",
		"YEAR": "2008",
		"BDSK-URL-2": "http://homepages.fh-regensburg.de/~mpool/mpool08/programme.html%20http://scg.unibe.ch/archive/papers/Deza08aEvolvingObjects.pdf"
	},
	{
		"key": "Deza08b",
		"type": "article",
		"ABSTRACT": "The demands of developing modern, highly dynamic\n\t\t\t\t  applications have led to an increasing interest in\n\t\t\t\t  dynamic programming languages and mechanisms. Not\n\t\t\t\t  only must applications evolve over time, but the\n\t\t\t\t  object models themselves may need to be adapted to\n\t\t\t\t  the requirements of different run-time contexts.\n\t\t\t\t  Class-based models and prototype-based models, for\n\t\t\t\t  example, may need to co-exist to meet the demands of\n\t\t\t\t  dynamically evolving applications. Multi-dimensional\n\t\t\t\t  dispatch, fine-grained and dynamic software\n\t\t\t\t  composition, and run-time evolution of behaviour are\n\t\t\t\t  further examples of diverse mechanisms which may\n\t\t\t\t  need to co-exist in a dynamically evolving run-time\n\t\t\t\t  environment. How can we model the semantics of these\n\t\t\t\t  highly dynamic features, yet still offer some\n\t\t\t\t  reasonable safety guarantees? To this end we present\n\t\t\t\t  an original calculus in which objects can adapt\n\t\t\t\t  their behaviour at run-time. Both objects and\n\t\t\t\t  environments are represented by first-class mappings\n\t\t\t\t  between variables and values. Message sends are\n\t\t\t\t  dynamically resolved to method calls. Variables may\n\t\t\t\t  be dynamically bound, making it possible to model a\n\t\t\t\t  variety of dynamic mechanisms within the same\n\t\t\t\t  calculus. Despite the highly dynamic nature of the\n\t\t\t\t  calculus, safety properties are assured by a type\n\t\t\t\t  assignment system.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Mariangiola Dezani-Ciancaglini and Paola Giannini and Oscar Nierstrasz",
		"BDSK-URL-1": "http://www.info.uaic.ro/bin/Annals/XVIII http://scg.unibe.ch/archive/papers/Deza08bEvolvingObjects.pdf",
		"JOURNAL": "Scientific Annals of Computer Science",
		"KEYWORDS": "snf09 scg08 scg-pub skip-doi jb09 cop-lit",
		"MEDIUM": "2",
		"ORGANIZATION": "“A.I. Cuza” University, Iaşi, România",
		"PAGES": "63-98",
		"PEERREVIEW": "yes",
		"PUBLISHER": "“A.I. Cuza” University Press, Iaşi",
		"TITLE": "A Calculus of Evolving Objects",
		"URL": "http://scg.unibe.ch/archive/papers/Deza08bEvolvingObjects.pdf",
		"URL2": "http://www.info.uaic.ro/bin/Annals/XVIII",
		"VOLUME": "XVIII",
		"YEAR": "2008",
		"BDSK-URL-2": "http://www.info.uaic.ro/bin/Annals/XVIII%20http://scg.unibe.ch/archive/papers/Deza08bEvolvingObjects.pdf"
	},
	{
		"key": "Dout09a",
		"type": "article",
		"ABSTRACT": "In rapidly evolving domains such as Computer\n\t\t\t\t  Assisted Orthopaedic Surgery (CAOS) emphasis is\n\t\t\t\t  often put first on innovation and new functionality,\n\t\t\t\t  rather than in developing the common infrastructure\n\t\t\t\t  needed to support integration and reuse of these\n\t\t\t\t  innovations. In fact, developing such an\n\t\t\t\t  infrastructure is often considered to be a high-risk\n\t\t\t\t  venture given the volatility of such a domain. We\n\t\t\t\t  present CompAS, a method that exploits the very\n\t\t\t\t  evolution of innovations in the domain to carry out\n\t\t\t\t  the necessary quantitative and qualitative\n\t\t\t\t  commonality and variability analysis, especially in\n\t\t\t\t  the case of scarce system documentation. We show how\n\t\t\t\t  our technique applies to the CAOS domain by using\n\t\t\t\t  conference proceedings as a key source of\n\t\t\t\t  information about the evolution of features in CAOS\n\t\t\t\t  systems over a period of several years. We detect\n\t\t\t\t  and classify evolution patterns to determine\n\t\t\t\t  functional commonality and variability. We also\n\t\t\t\t  identify non-functional requirements to help capture\n\t\t\t\t  domain variability. We have validated our approach\n\t\t\t\t  by evaluating the degree to which representative\n\t\t\t\t  test systems can be covered by the common and\n\t\t\t\t  variable features produced by our analysis.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Gisèle Douta and Haydar Talib and Oscar Nierstrasz and Frank Langlotz",
		"DOI": "10.1016/j.infsof.2008.05.017",
		"ISSN": "0950-5849",
		"JOURNAL": "Information and Software Technology",
		"KEYWORDS": "scg09 scg-pub jb09 snf09",
		"MEDIUM": "2",
		"NUMBER": "2",
		"PAGES": "448-459",
		"PEERREVIEW": "yes",
		"TITLE": "CompAS: A new approach to commonality and variability analysis with applications in computer assisted orthopaedic surgery",
		"URL": "http://scg.unibe.ch/archive/papers/Dout09aCompAS.pdf",
		"VOLUME": "51",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Dout09aCompAS.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.infsof.2008.05.017"
	},
	{
		"key": "Dozs08a",
		"type": "inproceedings",
		"ABSTRACT": "Many reverse engineering approaches have been\n\t\t\t\t  developed to analyze software systems written in\n\t\t\t\t  different languages like C/C++ or Java. These\n\t\t\t\t  approaches typically rely on a meta-model, that is\n\t\t\t\t  either specific for the language at hand or language\n\t\t\t\t  independent (e.g. UML). However, one language that\n\t\t\t\t  was hardly addressed is Lisp. While at first sight\n\t\t\t\t  it can be accommodated by current language\n\t\t\t\t  independent meta-models, Lisp has some unique\n\t\t\t\t  features (e.g. macros, CLOS entities) that are\n\t\t\t\t  crucial for reverse engineering Lisp systems. In\n\t\t\t\t  this paper we propose a suite of new visualizations\n\t\t\t\t  that reveal the special traits of the Lisp language\n\t\t\t\t  and thus help in understanding complex Lisp systems.\n\t\t\t\t  To validate our approach we apply them on several\n\t\t\t\t  large Lisp case studies, and summarize our\n\t\t\t\t  experience in terms of a series of recurring visual\n\t\t\t\t  patterns that we have detected.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Adrian Dozsa and Tudor Gîrba and Radu Marinescu",
		"BOOKTITLE": "European Conference on Software Maintenance and Re-Engineering (CSMR 2008)",
		"DOI": "10.1109/CSMR.2008.4493317",
		"KEYWORDS": "girba moose-pub scg08 scg-pub visualization metrics lisp jb08 hasler08",
		"MEDIUM": "2",
		"PAGES": "223--232",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "How Lisp systems look different",
		"URL": "http://scg.unibe.ch/archive/papers/Dozs08aLispLooksDifferent.pdf",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Dozs08aLispLooksDifferent.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/CSMR.2008.4493317"
	},
	{
		"key": "Duca96b",
		"type": "inproceedings",
		"ABSTRACT": "The FLO language integrates management of\n\t\t\t\t  inter-object dependencies into the object oriented\n\t\t\t\t  paradigms. In this paper, we focus on the use of\n\t\t\t\t  reactive dependencies (links) in object-oriented\n\t\t\t\t  knowledge representation. In particular, we present\n\t\t\t\t  different meta-links (links between links) and show\n\t\t\t\t  how the FLO links allow one to design some\n\t\t\t\t  composition relationships.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Stéphane Ducasse and Mireille Blay-Fornarino and Anne-Marie Pinna",
		"BOOKTITLE": "Proceedings of International Symposium on Methodologies for Intelligent Systems (ISMIS '96)",
		"DOI": "10.1007/3-540-61286-6_154",
		"KEYWORDS": "flo scg-old scg-pub stefPub",
		"MONTH": "June",
		"NUMBER": "1079",
		"PAGES": "295--304",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNIA (Lectures Notes in Artificial Intelligence)",
		"TITLE": "Object and Dependency Oriented Programming in FLO",
		"URL": "http://scg.unibe.ch/archive/papers/Duca96bDependencyOP.pdf",
		"YEAR": "1996",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca96bDependencyOP.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/3-540-61286-6_154"
	},
	{
		"key": "Duca97b",
		"type": "inproceedings",
		"ABSTRACT": "The decomposition of a software application into\n\t\t\t\t  components and connectors at the design stage has\n\t\t\t\t  been promoted as a way to describe and reason about\n\t\t\t\t  complex software architectures. There is, however,\n\t\t\t\t  surprisingly little language support for this\n\t\t\t\t  decomposition at implementation level. Interaction\n\t\t\t\t  relationships which are identified at design time\n\t\t\t\t  are lost as they get spread out into the\n\t\t\t\t  participating entities at implementation. In this\n\t\t\t\t  paper, we propose first-class connectors in an\n\t\t\t\t  object-oriented language as a first step towards\n\t\t\t\t  making software architecture more explicit at\n\t\t\t\t  implementation level. Our connectors are run-time\n\t\t\t\t  entities which control the interaction of components\n\t\t\t\t  and can express a rich repertoire of interaction\n\t\t\t\t  relationships. We show how connectors can be reused\n\t\t\t\t  and how they enhance the reuse of components.",
		"ACCEPTNUM": "19",
		"ACCEPTTOTAL": "197",
		"ANNOTE": "internationalconference topconference",
		"AUTHOR": "Stéphane Ducasse and Tamar Richner",
		"BOOKTITLE": "Proceedings of European Software Engineering Conference and Foundations on Software Engineering (ESEC/FSE'97)",
		"DOI": "10.1007/3-540-63531-9_32",
		"ISBN": "978-3-540-63531-4",
		"KEYWORDS": "olit famoos-papref scglit oobib scg-pub flo snf97 scg-none jb97 scg-coord-98 stefPub",
		"MISC": "acceptance rate: 19/197 = 9",
		"PAGES": "483--500",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Executable Connectors: Towards Reusable Design Elements",
		"URL": "http://scg.unibe.ch/archive/papers/Duca97bExecutableConnectors.pdf",
		"VOLUME": "1301",
		"YEAR": "1997",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca97bExecutableConnectors.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/3-540-63531-9_32"
	},
	{
		"key": "Duca97c",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP '97 Workshop Reader)",
		"EDITOR": "Jan Bosch and Stuart Mitchell",
		"KEYWORDS": "olit famoos-papunr scglit oobib flo scg-pub skip-doi skip-pdf skip-abstract toBeChecked snf97 scg-none jb97 stefPub",
		"MONTH": "June",
		"PAGES": "96--99",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Message Passing Abstractions as Elementary Bricks for Design Pattern Implementation",
		"VOLUME": "1357",
		"YEAR": "1997"
	},
	{
		"key": "Duca97d",
		"type": "inproceedings",
		"ANNOTE": "nationalconference",
		"AUTHOR": "Stéphane Ducasse",
		"BOOKTITLE": "Actes de Langages et Modèles à Objets (LMO'97)",
		"KEYWORDS": "olit famoos-papref scglit oobib scg-pub skip-doi skip-abstract snf97 scg-none jb97 stefPub flo",
		"PAGES": "95--110",
		"TITLE": "Réification de Schémas de Conception: Une Expérience",
		"URL": "http://scg.unibe.ch/archive/papers/Duca97dReificationDP.ps.gz",
		"YEAR": "1997",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca97dReificationDP.ps.gz"
	},
	{
		"key": "Duca97e",
		"type": "article",
		"ANNOTE": "nationaljournal",
		"AUTHOR": "Stéphane Ducasse",
		"JOURNAL": "Revue des Sciences et Technologies de l'Information (RSTI) — L'Objet",
		"KEYWORDS": "olit famoos-papref scglit oobib scg-pub skip-abstract skip-doi scg-none jb-none snf97 stefPub flo",
		"NUMBER": "4",
		"PAGES": "355--377",
		"PUBLISHER": "Hermes, Paris",
		"TITLE": "Des techniques de contrôle de l'envoi de messages en Smalltalk",
		"URL": "http://scg.unibe.ch/archive/papers/Duca97eMessagePassing.pdf",
		"VOLUME": "3",
		"YEAR": "1997",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca97eMessagePassing.pdf"
	},
	{
		"key": "Duca97g",
		"type": "techreport",
		"ANNOTE": "report notrefereed",
		"AUTHOR": "Stéphane Ducasse",
		"INSTITUTION": "University of Bern, Institut of Applied Mathematics and Computer Sciences",
		"KEYWORDS": "scg-pub skip-doi skip-pdf skip-abstract scg-none jb-none flo",
		"NOTE": "Extension version of Duca97e: Des techniques de contrôle de l'envoi de messages en Smalltalk",
		"NUMBER": "97-004",
		"TITLE": "Des techniques de contrôle de l'envoi de messages en Smalltalk",
		"YEAR": "1997"
	},
	{
		"key": "Duca98b",
		"type": "inproceedings",
		"ABSTRACT": "A reengineering pattern describes how to go from an\n\t\t\t\t  existing legacy solution to a new refactored\n\t\t\t\t  solution. In this paper we discuss the role of\n\t\t\t\t  reengineering patterns and contrast them with design\n\t\t\t\t  patterns and antipatterns. We then highlight the\n\t\t\t\t  structure of a reengineering pattern and present two\n\t\t\t\t  simple, related patterns for type-check\n\t\t\t\t  elimination.",
		"ADDRESS": "Konstanz, Germany",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse and Robb Nebbe and Tamar Richner",
		"BOOKTITLE": "Proceedings of the 4th European Conference on Pattern Languages of Programming and Computing, 1999",
		"EDITOR": "Paul Dyson",
		"KEYWORDS": "scg-pub skip-doi olit famoos-papunr oobib snf98 pattern scg-none jb98 stefPub",
		"MONTH": "July",
		"PUBLISHER": "UVK Universitätsverlag Konstanz GmbH",
		"TITLE": "Two Reengineering Patterns: Eliminating Type Checking",
		"URL": "http://scg.unibe.ch/archive/papers/Duca98bTwoReengPatterns.pdf",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca98bTwoReengPatterns.pdf"
	},
	{
		"key": "Duca98c",
		"type": "inproceedings",
		"ABSTRACT": "Although coordination of multiple activities is a\n\t\t\t\t  fundamental goal of object-oriented concurrent\n\t\t\t\t  programming languages, there is only limited support\n\t\t\t\t  for their specification and abstraction at the\n\t\t\t\t  language level. This leads to a mismatch between\n\t\t\t\t  conceptional designs, using high-level abstractions,\n\t\t\t\t  and the implementation, using the low-level\n\t\t\t\t  coordination constructs. Often coordination is\n\t\t\t\t  hard-wired into the components they coordinate,\n\t\t\t\t  which leads to evolution, maintenance and\n\t\t\t\t  composibility problems. We propose a model called\n\t\t\t\t  FLO/C that relies on the notion of connectors. A\n\t\t\t\t  connector is an entity that enforces the\n\t\t\t\t  coordination of the entities it coordinates. This\n\t\t\t\t  model supports a clear separation between the\n\t\t\t\t  coordinated active objects and their coordination.\n\t\t\t\t  An active object only defines specific domain\n\t\t\t\t  information and a connector only defines\n\t\t\t\t  coordination between a group of active objects (its\n\t\t\t\t  participants). The coordination is abstractly\n\t\t\t\t  defined refering to components in terms of the\n\t\t\t\t  object interface. Coordination and coordinated\n\t\t\t\t  entities are independant and can evolve separately.\n\t\t\t\t  Coordination can be composed and replaced easily.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse and Manuel Günter",
		"BOOKTITLE": "Proceedings of the DEXA workshops",
		"KEYWORDS": "scg-pub skip-doi flo floc olit coordination oobib snf98 scg-coord-98 scg-none jb98 stefPub",
		"MONTH": "August",
		"PAGES": "572--577",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Coordination of Active Objects by Means of Explicit Connectors",
		"URL": "http://scg.unibe.ch/archive/papers/Duca98cExplicitConnectors.pdf",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca98cExplicitConnectors.pdf"
	},
	{
		"key": "Duca98d",
		"type": "proceedings",
		"ADDRESS": "Forschungszentrum Informatik, Haid-und-Neu-Strasse 10-14, 76131 Karlsruhe, Germany",
		"ANNOTE": "workshopproceedings",
		"EDITOR": "Stéphane Ducasse and Joachim Weisbrod",
		"KEYWORDS": "skip-pdf scg-pub skip-abstract skip-doi olit famoos-wrkproc oobib snf98 scg-none jb98 stefPub",
		"MONTH": "June",
		"NOTE": "FZI 6/7/98",
		"TITLE": "Proceedings of the ECOOP'98 Workshop on Experiences in Object-Oriented Re-Engineering",
		"URL": "https://link.springer.com/content/pdf/10.1007%2F3-540-49255-0_16.pdf",
		"YEAR": "1998"
	},
	{
		"key": "Duca98z",
		"type": "misc",
		"ANNOTE": "workshopproceedings",
		"AUTHOR": "Stéphane Ducasse and Joachim Weisbrod",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP'98 Workshop Reader)",
		"KEYWORDS": "scg-pub skip-abstract skip-doi scg-none jb-none stefPub",
		"NUMBER": "1543",
		"PAGES": "72--96",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Report of the ECOOP'98 Workshop on Experiences in Object-Oriented Re-Engineering",
		"URL": "https://link.springer.com/chapter/10.1007/3-540-49255-0_16",
		"YEAR": "1998"
	},
	{
		"key": "Duca99a",
		"type": "article",
		"ABSTRACT": "In a language like Smalltalk in which objects\n\t\t\t\t  communicate only via message passing, message\n\t\t\t\t  passing control is a fundamental tool for the\n\t\t\t\t  analysis of object behavior (trace, spying) or for\n\t\t\t\t  the definition of new semantics (asynchronous\n\t\t\t\t  messages, proxy,...). Different techniques exist,\n\t\t\t\t  from the well known approach based on the\n\t\t\t\t  specialization of the doesNotUnderstand: method to\n\t\t\t\t  the exploitation the method lookup algorithm done by\n\t\t\t\t  the virtual machine. Until now no comparison between\n\t\t\t\t  these techniques has been made. In this article we\n\t\t\t\t  compare the different techniques taking into account\n\t\t\t\t  the reflective aspects used, the scope, the limit\n\t\t\t\t  and the cost of the control.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Stéphane Ducasse",
		"JOURNAL": "Journal of Object-Oriented Programming (JOOP)",
		"KEYWORDS": "olit famoos-papref snf98 oobib scg-pub skip-doi scg-none jb99 stefPub flo",
		"MISC": "SCI impact factor 0.306",
		"MONTH": "June",
		"NUMBER": "6",
		"PAGES": "39--44",
		"PUBLISHER": "SIGS Press",
		"TITLE": "Evaluating Message Passing Control Techniques in Smalltalk",
		"URL": "http://scg.unibe.ch/archive/papers/Duca99aMsgPassingControl.pdf",
		"VOLUME": "12",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca99aMsgPassingControl.pdf"
	},
	{
		"key": "Duca99b",
		"type": "inproceedings",
		"ABSTRACT": "Code duplication is one of the factors that severely\n\t\t\t\t  complicates the maintenance and evolution of large\n\t\t\t\t  software systems. Good tools for detecting\n\t\t\t\t  duplicated code are scarce because of the large\n\t\t\t\t  amount of data to be checked, because duplicated\n\t\t\t\t  code is not known a priori and because especially it\n\t\t\t\t  requires parsing technology. In this paper we show\n\t\t\t\t  that is possible to circumvent these complicating\n\t\t\t\t  factors by applying a language independent and\n\t\t\t\t  lightweigth approach, i.e. a tool that requires no\n\t\t\t\t  parsing and a little learning and configuration\n\t\t\t\t  time, yet is able to detect a significant amount of\n\t\t\t\t  code duplication. We validate our approach on a\n\t\t\t\t  number of case studies, involving five different\n\t\t\t\t  implementation languages and ranging from 256 K up\n\t\t\t\t  untill 26Mb of source code.",
		"ACCEPTNUM": "49",
		"ACCEPTTOTAL": "100",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Stéphane Ducasse and Matthias Rieger and Serge Demeyer",
		"BOOKTITLE": "Proceedings of 15th IEEE International Conference on Software Maintenance (ICSM'99)",
		"DOI": "10.1109/ICSM.1999.792593",
		"EDITOR": "Hongji Yang and Lee White",
		"KEYWORDS": "olit famoos-papref scg-pub toBeChecked sergedem-papref duploc snf99 scg-none jb99 oorp stefPub moose-pub",
		"MISC": "acceptance rate: 49/100 = 49",
		"MONTH": "September",
		"PAGES": "109--118",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "A Language Independent Approach for Detecting Duplicated Code",
		"URL": "http://scg.unibe.ch/archive/papers/Duca99bCodeDuplication.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca99bCodeDuplication.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.1999.792593"
	},
	{
		"key": "Duca99c",
		"type": "inproceedings",
		"ABSTRACT": "In reengineering an object-oriented system we want\n\t\t\t\t  to benefit from the expertise developed in earlier\n\t\t\t\t  efforts. It is therefore essential to have a way to\n\t\t\t\t  communicate expertise at different levels: from\n\t\t\t\t  knowledge about how to approach a system to be\n\t\t\t\t  reengineered, to knowledge about improving code by\n\t\t\t\t  eliminating 'bad' style. In this paper we propose to\n\t\t\t\t  use a pattern form to communicate knowledge about\n\t\t\t\t  reengineering. A reengineering pattern connects an\n\t\t\t\t  observable problem in the code to a reengineering\n\t\t\t\t  goal: it describes the process of going from the\n\t\t\t\t  existing legacy solution causing or aggravating the\n\t\t\t\t  problem to a new refactored solution which meets the\n\t\t\t\t  reengineering goal. It thus gives a method\n\t\t\t\t  appropriate for a specific problem, rather than\n\t\t\t\t  proposing a general methodology, and makes reference\n\t\t\t\t  to the appropriate tools or techniques for obtaining\n\t\t\t\t  the refactored solution. In this paper we discuss\n\t\t\t\t  the role of reengineering patterns and contrast them\n\t\t\t\t  with related kinds of patterns. We then highlight\n\t\t\t\t  the form of reengineering patterns and present two\n\t\t\t\t  simple patterns for type-check elimination.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Stéphane Ducasse and Tamar Richner and Robb Nebbe",
		"BOOKTITLE": "Proceedings of 6th Working Conference on Reverse Engineering (WCRE'99)",
		"DOI": "10.1109/WCRE.1999.806956",
		"EDITOR": "Francoise Balmas and Mike Blaha and Spencer Rugaber",
		"KEYWORDS": "olit famoos-papref scg-pub scg-none jb99 stefPub",
		"MONTH": "October",
		"PAGES": "157--168",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "Type-Check Elimination: Two Object-Oriented Reengineering Patterns",
		"URL": "http://scg.unibe.ch/archive/papers/Duca99cTypeCheckElim.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca99cTypeCheckElim.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.1999.806956"
	},
	{
		"key": "Duca99d",
		"type": "inproceedings",
		"ABSTRACT": "Code duplication is an important problem in\n\t\t\t\t  application maintenance. Tools exist that support\n\t\t\t\t  code duplication detection. However, few of them\n\t\t\t\t  propose a solution for the problem, i.e.\n\t\t\t\t  refactorings. We propose an approach that uses the\n\t\t\t\t  information given by code duplication detection to\n\t\t\t\t  guide the refactorings of OO applications.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse and Matthias Rieger and Georges Golomingi",
		"BOOKTITLE": "Proceedings of the ECOOP '99 Workshop on Experiences in Object-Oriented Re-Engineering",
		"EDITOR": "Stéphane Ducasse and Oliver Ciupke",
		"KEYWORDS": "olit famoos-papref scg-pub skip-doi scg-none jb99 stefPub",
		"MONTH": "June",
		"NOTE": "FZI-Report 2-6-6/99",
		"PUBLISHER": "Forschungszentrum Informatik, Karlsruhe",
		"TITLE": "Tool Support for Refactoring Duplicated OO Code",
		"URL": "http://scg.unibe.ch/archive/papers/Rieg99aToolSuppRefacOOCode.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Rieg99aToolSuppRefacOOCode.pdf"
	},
	{
		"key": "Duca99e",
		"type": "proceedings",
		"ANNOTE": "workshopproceedings",
		"EDITOR": "Stéphane Ducasse and Oliver Ciupke",
		"KEYWORDS": "skip-pdf scg-pub skip-abstract skip-doi olit famoos-wrkproc oobib snf99 scg-none jb99 stefPub",
		"MONTH": "June",
		"NOTE": "FZI 2-6-6/99",
		"PUBLISHER": "Forschungszentrum Informatik, Karlsruhe, Germany",
		"TITLE": "Proceedings of the ECOOP'99 Workshop on Experiences in Object-Oriented Re-Engineering",
		"YEAR": "1999"
	},
	{
		"key": "Duca99s",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse and Michele Lanza and Serge Demeyer",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP'99 Workshop Reader)",
		"KEYWORDS": "scg-pub snf-none skip-pdf scg-none jb-none skip-abstract skip-doi",
		"NUMBER": "1743",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Reverse Engineering based on Metrics and Program Visualization",
		"YEAR": "1999"
	},
	{
		"key": "Duca99x",
		"type": "book",
		"ANNOTE": "notrefereed handbook",
		"EDITOR": "Stéphane Ducasse and Serge Demeyer",
		"KEYWORDS": "olit scg-pub skip-abstract skip-doi scg-none jb-none famoos stePub",
		"MONTH": "October",
		"PUBLISHER": "University of Bern",
		"TITLE": "The FAMOOS Object-Oriented Reengineering Handbook",
		"URL": "http://scg.unibe.ch/archive/papers/Duca99xFamoosHandBook.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca99xFamoosHandBook.pdf"
	},
	{
		"key": "Duca00a",
		"type": "inproceedings",
		"ABSTRACT": "Reengineering is an inherent aspect of modern\n\t\t\t\t  software development, with its emphasis on iterative\n\t\t\t\t  and incremental development. The reengineering\n\t\t\t\t  pattern presented in this paper shows how you can\n\t\t\t\t  support your understanding during system\n\t\t\t\t  reengineering by linking your questions or\n\t\t\t\t  information about the code in the code itself.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse and Serge Demeyer and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of EuroPLoP '2000",
		"KEYWORDS": "snf-none olit scg-pub skip-doi scg-none jb00 stefPub",
		"PAGES": "209--217",
		"TITLE": "Tie Code And Questions: a Reengineering Pattern",
		"URL": "http://scg.unibe.ch/archive/papers/Duca00aTieCode.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca00aTieCode.pdf"
	},
	{
		"key": "Duca00b",
		"type": "inproceedings",
		"ABSTRACT": "Surprising as it may seem, many of the early\n\t\t\t\t  adopters of the object-oriented paradigm already\n\t\t\t\t  face a number of problems typically encountered in\n\t\t\t\t  large-scale legacy systems. The reengineering of\n\t\t\t\t  those systems often poses problems because of the\n\t\t\t\t  considerable size and complexity of such systems. In\n\t\t\t\t  the context of the FAMOOS project we have developed\n\t\t\t\t  a language independent environment called Moose\n\t\t\t\t  which can deal with that complexity. This paper\n\t\t\t\t  describes the architecture of Moose, the tools which\n\t\t\t\t  have been developed around it and the industrial\n\t\t\t\t  experiences we have obtained.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Ducasse, Stéphane and Lanza, Michele and Tichelaar, Sander",
		"BOOKTITLE": "Proceedings of CoSET '00 (2nd International Symposium on Constructing Software Engineering Tools)",
		"KEYWORDS": "components scg-pub skip-doi snf00 scg-none jb00 repository abb oorp stefPub moose-pub",
		"MONTH": "June",
		"TITLE": "Moose: an extensible language-independent environment for reengineering object-oriented systems",
		"URL": "http://scg.unibe.ch/archive/papers/Duca00bMooseCoset.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca00bMooseCoset.pdf"
	},
	{
		"key": "Duca00c",
		"type": "inproceedings",
		"ABSTRACT": "Conditionals -i.e., switch statements, nested ifs-\n\t\t\t\t  that are used to simulate polymorphism hamper\n\t\t\t\t  evolution and flexibility of applications. The\n\t\t\t\t  reengineering patterns presented in this paper show\n\t\t\t\t  you how to transform conditionals in object-oriented\n\t\t\t\t  code to improve the flexibility of application.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse and Serge Demeyer and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of EuroPLoP '2000",
		"KEYWORDS": "snf-none skip-doi olit scg-pub scg-none jb00 stefPub",
		"PAGES": "219--252",
		"TITLE": "Transform Conditionals to Polymorphism",
		"URL": "http://scg.unibe.ch/archive/papers/Duca00cTransform.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca00cTransform.pdf"
	},
	{
		"key": "Duca00d",
		"type": "inproceedings",
		"ABSTRACT": "Tuple spaces have turned out to be one of the most\n\t\t\t\t  fundamental abstractions for coordinating\n\t\t\t\t  communicating agents. At the same time, researchers\n\t\t\t\t  continue to propose new variants of tuple spaces,\n\t\t\t\t  since no one approach seems to be universally\n\t\t\t\t  applicable to all problem domains. Some models offer\n\t\t\t\t  a certain configurability, but existing approaches\n\t\t\t\t  generally stop at afixed set of configuration\n\t\t\t\t  options and static configuration at instantiation\n\t\t\t\t  time. We argue that a more open approach is needed,\n\t\t\t\t  and present OpenSpaces, an object-oriented framework\n\t\t\t\t  that supports static configurability through\n\t\t\t\t  subclassing across several dimensions, as well as\n\t\t\t\t  dynamic configurability of policies through runtime\n\t\t\t\t  composition. We introduce OpenSpaces by showing how\n\t\t\t\t  it can be used to instantiate a typical application,\n\t\t\t\t  and we present an overview of the framework,\n\t\t\t\t  implemented in Smalltalk, detailing the various\n\t\t\t\t  degrees of configurability.",
		"ACCEPTNUM": "18",
		"ACCEPTTOTAL": "52",
		"ADDRESS": "Limassol, Cyprus",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Stéphane Ducasse and Thomas Hofmann and Oscar Nierstrasz",
		"BOOKTITLE": "Coordination Languages and Models",
		"DOI": "10.1007/3-540-45263-X_1",
		"EDITOR": "António Porto and Gruia-Catalin Roman",
		"ISBN": "978-3-540-41020-1",
		"KEYWORDS": "olit scg-pub coordination scg-none jb00 scg-coord-00 stefPub",
		"MISC": "acceptance rate: 18/52 = 35",
		"MONTH": "September",
		"PAGES": "1--19",
		"SERIES": "LNCS",
		"TITLE": "OpenSpaces: An Object-Oriented Framework For Reconfigurable Coordination Spaces",
		"URL": "http://scg.unibe.ch/archive/papers/Duca00dOpenSpaces.pdf",
		"VOLUME": "1906",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca00dOpenSpaces.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/3-540-45263-X_1"
	},
	{
		"key": "Duca00f",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse and Michele Lanza and Lukas Steiger",
		"BOOKTITLE": "ECOOP 2000 International Workshop of Architecture Evolution",
		"KEYWORDS": "scg-pub skip-abstract skip-pdf skip-doi snf00 scg-none jb00 stefPub design-recovery moose-pub",
		"TITLE": "Supporting Evolution Recovery: a Query-based Approach",
		"YEAR": "2000"
	},
	{
		"key": "Duca00x",
		"type": "article",
		"ADDRESS": "13 rue du Jura, Paris 13",
		"ANNOTE": "notrefereed",
		"AUTHOR": "Stéphane Ducasse and Florence Ducasse",
		"JOURNAL": "Journal de l'association EPI Enseignement Public et Informatiques",
		"KEYWORDS": "snf-none scg-pub skip-abstract skip-doi scg-none jb00 stefPub",
		"MONTH": "September",
		"NUMBER": "97",
		"TITLE": "De l'enseignement de concepts informatiques",
		"URL": "http://scg.unibe.ch/archive/papers/Duca00xExperienceEnseig.pdf",
		"VOLUME": "4",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca00xExperienceEnseig.pdf"
	},
	{
		"key": "Duca01a",
		"type": "article",
		"ABSTRACT": "The reverse engineering of object-oriented legacy\n\t\t\t\t  systems presents a number of problems typically\n\t\t\t\t  encountered in large-scale legacy systems: the lack\n\t\t\t\t  of overview and the need to focus on interesting\n\t\t\t\t  parts. To help in reverse engineering large\n\t\t\t\t  object-oriented legacy systems, we proposed a hybrid\n\t\t\t\t  approach combining the immediate appeal of\n\t\t\t\t  visualisations with the scalability of metrics.\n\t\t\t\t  However, our approach lacked of a methodology that\n\t\t\t\t  guides the reverse engineer. In this paper we\n\t\t\t\t  present a first methodology that we developed from\n\t\t\t\t  our industrial experiments.",
		"ANNOTE": "nationaljournal",
		"AUTHOR": "Stéphane Ducasse and Michele Lanza",
		"JOURNAL": "Technique et science informatiques",
		"KEYWORDS": "scg-pub skip-doi scg-none jb01 snf02 stePub",
		"NUMBER": "4",
		"PAGES": "539--566",
		"TITLE": "Towards a Methodology for the Understanding of Object-Oriented Systems",
		"URL": "http://scg.unibe.ch/archive/papers/Duca01aTowardsAMethod.pdf",
		"VOLUME": "20",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca01aTowardsAMethod.pdf"
	},
	{
		"key": "Duca01b",
		"type": "article",
		"ABSTRACT": "This article presents the Moose Reengineering\n\t\t\t\t  Environment, a language-independent tool environment\n\t\t\t\t  to reverse engineer, i.e., understand, and\n\t\t\t\t  reengineer software systems, as well as the tools\n\t\t\t\t  which have been developed around it and the\n\t\t\t\t  experience, both academic and industrial, we have\n\t\t\t\t  obtained.",
		"ANNOTE": "notrefereed",
		"AUTHOR": "Stéphane Ducasse and Michele Lanza and Sander Tichelaar",
		"JOURNAL": "Smalltalk Chronicles",
		"KEYWORDS": "scg-pub skip-doi repository reengineering snf01 scg-none jb01 stefPub moose-pub",
		"MONTH": "August",
		"TITLE": "The Moose Reengineering Environment",
		"URL": "http://scg.unibe.ch/archive/papers/Duca01bMoose.pdf http://www.smalltalkchronicles.net/edition3-2/Pages/moose.htm",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca01bMoose.pdf%20http://www.smalltalkchronicles.net/edition3-2/Pages/moose.htm"
	},
	{
		"key": "Duca01c",
		"type": "techreport",
		"ABSTRACT": "Reengineering ob ject-oriented applications is\n\t\t\t\t  becoming a vital activity in today industry where\n\t\t\t\t  the developer turnover drains the system oral memory\n\t\t\t\t  out of the systems themselves and where applications\n\t\t\t\t  should constantly evolve to meet new requirements.\n\t\t\t\t  This document summarizes the research effort led on\n\t\t\t\t  reverse engineering and reengineering ob\n\t\t\t\t  ject-oriented legacy systems. It includes (1) the\n\t\t\t\t  definition of a suitable meta-model for\n\t\t\t\t  reengineering, FAMIX. This meta-model, even if flat,\n\t\t\t\t  supports both reverse engineering and code refac-\n\t\t\t\t  toring analysis, (2) the presentation of a\n\t\t\t\t  reengineering platform, MOOSE, (3) the evalution of\n\t\t\t\t  software metrics for reengineer, (4) the definition\n\t\t\t\t  of simple visual techniques to support large system\n\t\t\t\t  understanding or finer grain code element, (5) the\n\t\t\t\t  identification and cure sup- port for duplicated\n\t\t\t\t  code, (6) the use of dynamic information to support\n\t\t\t\t  composable views and collaboration extraction, and\n\t\t\t\t  (7) the identification of reengineer patterns.\n\t\t\t\t  Keywords. Meta-Modeling, Language Independence,\n\t\t\t\t  Reengineering, Reverse Engineering, Code Duplica-\n\t\t\t\t  tion, Reengineering Patterns, Program Traces,\n\t\t\t\t  Dynamic Information, Program Visualization, Software\n\t\t\t\t  Metrics, Refactorings, Interexchange Format,\n\t\t\t\t  CODECRAWLER, FAMIX, MOOSE, FAMOOS, Smalltalk, Java,\n\t\t\t\t  C++.",
		"ANNOTE": "habilitation",
		"AUTHOR": "Ducasse, Stéphane",
		"INSTITUTION": "Université Pierre et Marie Curie (Paris 6)",
		"KEYWORDS": "scg-pub skip-doi scg-none jb-none reengineering snf02 stefPub moose-pub",
		"MONTH": "September",
		"NOTE": "TR University of Bern, Institute of Computer Science and Applied Mathematics — iam-03-008",
		"TITLE": "Reengineering Object-Oriented Applications",
		"URL": "http://scg.unibe.ch/archive/papers/Duca01cHab.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca01cHab.pdf"
	},
	{
		"key": "Duca02a",
		"type": "inproceedings",
		"ABSTRACT": "In this paper we stress the fact that a language and\n\t\t\t\t  an environment for teaching object-oriented\n\t\t\t\t  programming should support the anthropomorphic\n\t\t\t\t  metaphor promoted by the paradigm. We show that all\n\t\t\t\t  the cultural aspects of Smalltalk, i.e., the\n\t\t\t\t  vocabulary and the syntax support the object\n\t\t\t\t  metaphor. In addition, we stress that the\n\t\t\t\t  programming environment should also support the\n\t\t\t\t  metaphor. We show that Smalltalk environments offer\n\t\t\t\t  an important property we named liveness or object\n\t\t\t\t  proximity that promotes the anthropomorphic\n\t\t\t\t  perception of objects. By providing excerpt from our\n\t\t\t\t  forth coming book, we show how Squeak with the\n\t\t\t\t  Morphic framework reinforces this ability to make\n\t\t\t\t  object into living entities.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse and Roel Wuyts",
		"BOOKTITLE": "Proceedings of the Ecoop'02 International Educator Symposium",
		"KEYWORDS": "snf-none stefPub scg-pub skip-doi scg-none jb04",
		"TITLE": "Supporting Objects as An Anthropomorphic View at Computation or Why Smalltalk for Teaching Objects?",
		"URL": "http://scg.unibe.ch/archive/papers/Duca02aTeacherWorkshop.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca02aTeacherWorkshop.pdf"
	},
	{
		"key": "Duca03a",
		"type": "article",
		"ABSTRACT": "Although component-based software development (CBSD)\n\t\t\t\t  has become mainstream for conventional applications,\n\t\t\t\t  it has remained elusive for embedded applications\n\t\t\t\t  due to non-functional constraints. The PECOS project\n\t\t\t\t  has demonstrated that CBSD can also be applied to\n\t\t\t\t  severely constrained embedded devices, with timing\n\t\t\t\t  and memory requirements being taken into account.",
		"ANNOTE": "notrefereed",
		"AUTHOR": "Stéphane Ducasse and Oscar Nierstrasz and Roel Wuyts",
		"CVS": "ErcimPecos",
		"JOURNAL": "ERCIM News",
		"KEYWORDS": "scg-pub skip-doi pecos scg-none jb03 stefPub",
		"MONTH": "January",
		"TITLE": "Composing Embedded Real-Time Software Components: the PECOS Data-Centric Approach",
		"URL": "http://www.ercim.org/publication/Ercim_News/enw52/nierstrasz.html",
		"VOLUME": "52",
		"YEAR": "2003",
		"BDSK-URL-1": "http://www.ercim.org/publication/Ercim_News/enw52/nierstrasz.html"
	},
	{
		"key": "Duca03b",
		"type": "inproceedings",
		"ABSTRACT": "Current languages contain visibility mechanisms such\n\t\t\t\t  as private, protected, or public to control who can\n\t\t\t\t  see what. However, these visibility mechanisms are\n\t\t\t\t  fixed once for all. Moreover, they do not solve all\n\t\t\t\t  problems related to the visibility, and are\n\t\t\t\t  typically of a static nature. In this position paper\n\t\t\t\t  we present an open and uniform way of dealing with\n\t\t\t\t  visibility and introduce surfaces: i.e., list of\n\t\t\t\t  methods that control the way the behavior of an ob\n\t\t\t\t  ject is accessible. We introduce two problems that\n\t\t\t\t  other visibility mechanisms cannot solve, and show\n\t\t\t\t  how surfaces can.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse and Nathanael Schärli and Roel Wuyts",
		"BOOKTITLE": "Proceedings of the ECOOP '03 Workshop on Object-oriented Language Engineering for the Post-Java Era",
		"KEYWORDS": "snf03 scg-pub skip-doi scg-none jb03 stefPub schaerli",
		"MONTH": "July",
		"TITLE": "Open Surfaces for Controlled Visibility",
		"URL": "http://scg.unibe.ch/archive/papers/Duca03bSurfaces.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca03bSurfaces.pdf"
	},
	{
		"key": "Duca03c",
		"type": "inproceedings",
		"ABSTRACT": "Array programming shines in its ability to express\n\t\t\t\t  computations at a high-level of abstraction,\n\t\t\t\t  allowing one to manipulate and query whole sets of\n\t\t\t\t  data at once. This paper presents the OOPAL model\n\t\t\t\t  that enhances object-oriented programming with array\n\t\t\t\t  programming features. The goal of OOPAL is to\n\t\t\t\t  determine a minimum set of modifications that must\n\t\t\t\t  be made to the traditional object model in order to\n\t\t\t\t  take advantage of the possibilities of array\n\t\t\t\t  programming. It is based on a minimal extension of\n\t\t\t\t  method invocation and the definition of a kernel of\n\t\t\t\t  methods implementing the fundamental array\n\t\t\t\t  programming operations. The model is validated in\n\t\t\t\t  F-SCRIPT, a new scripting language.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse and Philippe Mougin",
		"BOOKTITLE": "Proceedings of the ECOOP '03 Workshop on Object-oriented Language Engineering for the Post-Java Era",
		"KEYWORDS": "snf03 scg-pub skip-doi scg-none jb03 stefPub",
		"MONTH": "July",
		"TITLE": "Power to Collections: Generalizing Polymorphism by Unifying Array Programming and Object-Oriented Programming",
		"URL": "http://scg.unibe.ch/archive/papers/Duca03cOOPALEcoop.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca03cOOPALEcoop.pdf"
	},
	{
		"key": "Duca03d",
		"type": "article",
		"ABSTRACT": "Over the last decade many research groups and\n\t\t\t\t  commercial companies have been developing\n\t\t\t\t  reengineering environments. However, many design\n\t\t\t\t  decisions such as support for multiple models,\n\t\t\t\t  incremental loading of information, tool\n\t\t\t\t  integration, entity grouping, and their impacts on\n\t\t\t\t  the underlying meta-model and resulting environment\n\t\t\t\t  have remained implicit. Based on the experience\n\t\t\t\t  accumulated while developing the Moose reengineering\n\t\t\t\t  environment and on a survey of reengineering\n\t\t\t\t  environments, we present a design space defined by a\n\t\t\t\t  set of criteria that makes explicit the different\n\t\t\t\t  options and especially their dependencies and\n\t\t\t\t  trade-offs. Using this design space, developers of\n\t\t\t\t  future environments should have a better\n\t\t\t\t  understanding of the problems they face and the\n\t\t\t\t  impact of design choices.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Stéphane Ducasse and Sander Tichelaar",
		"DOI": "10.1002/smr.279",
		"JOURNAL": "Journal of Software Maintenance and Evolution: Research and Practice (JSME)",
		"KEYWORDS": "scg-pub recast04 scg-none jb04 stefPub moose-pub",
		"MISC": "SCI impact factor 0.595",
		"MONTH": "October",
		"NUMBER": "5",
		"PAGES": "345--373",
		"TITLE": "Dimensions of Reengineering Environment Infrastructures",
		"URL": "http://scg.unibe.ch/archive/papers/Duca03dInfrastructures.pdf",
		"VOLUME": "15",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca03dInfrastructures.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1002/smr.279"
	},
	{
		"key": "Duca04a",
		"type": "inproceedings",
		"ABSTRACT": "Understanding the run-time behavior of\n\t\t\t\t  object-oriented legacy systems is a complex task due\n\t\t\t\t  to factors such as late binding and polymorphism.\n\t\t\t\t  Current approaches extract and use information from\n\t\t\t\t  the complete execution trace of a system. The sheer\n\t\t\t\t  size and complexity of such traces make their\n\t\t\t\t  handling, storage, and analysis difficult. Current\n\t\t\t\t  software systems which run almost non-stop do not\n\t\t\t\t  permit such a full analysis. In this paper we\n\t\t\t\t  present a lightweight approach based on the\n\t\t\t\t  extraction of a condensed amount of information,\n\t\t\t\t  e.g., measurements, that does not require a full\n\t\t\t\t  trace. Using this condensed information, we propose\n\t\t\t\t  a visualization approach which allows us to identify\n\t\t\t\t  and understand certain aspects of the objects'\n\t\t\t\t  lifetime such as their role played in the creation\n\t\t\t\t  of other objects and the communication architecture\n\t\t\t\t  they support.",
		"ACCEPTNUM": "33",
		"ACCEPTTOTAL": "62",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Stéphane Ducasse and Michele Lanza and Roland Bertuli",
		"BOOKTITLE": "Proceedings of 8th European Conference on Software Maintenance and Reengineering (CSMR'04)",
		"DOI": "10.1109/CSMR.2004.1281433",
		"KEYWORDS": "recast04 scg-pub stefPub scg-none jb04 moose-pub",
		"MISC": "acceptance rate: 33/62 = 52",
		"PAGES": "309--318",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "High-Level Polymetric Views of Condensed Run-Time Information",
		"URL": "http://scg.unibe.ch/archive/papers/Duca04aRuntimePolymetricViews.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca04aRuntimePolymetricViews.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/CSMR.2004.1281433"
	},
	{
		"key": "Duca04b",
		"type": "inproceedings",
		"ABSTRACT": "Due to the size and the extreme complexity of legacy\n\t\t\t\t  systems, it is nearly impossible to write from\n\t\t\t\t  scratch tests before refactoring them. In addition\n\t\t\t\t  object-oriented legacy systems present specific\n\t\t\t\t  requirements to test them. Indeed late-binding allow\n\t\t\t\t  subclasses to change fundamental aspects of the\n\t\t\t\t  superclass code and in particular call flows.\n\t\t\t\t  Moreover Object-oriented programming promotes a\n\t\t\t\t  distribution of the responsibilities to multiple\n\t\t\t\t  entities leading to complex scenario to be tested.\n\t\t\t\t  In such a context one of the few trustable source of\n\t\t\t\t  information is the execution of the application\n\t\t\t\t  itself. Traditional forward engineering approaches\n\t\t\t\t  such as unit testing do not really provide adequate\n\t\t\t\t  solution to this problem. Therefore there is a need\n\t\t\t\t  for a more expressive way of testing the execution\n\t\t\t\t  of object-oriented applications. We propose to\n\t\t\t\t  represent the trace of object-oriented applications\n\t\t\t\t  as logic facts and express tests over the trace.\n\t\t\t\t  This way complex sequences of message exchanges,\n\t\t\t\t  sequence matching, or expression of negative\n\t\t\t\t  information are expressed in compact form. We\n\t\t\t\t  validated our approach by implementing TestLog a\n\t\t\t\t  prototype tool and testing the Moose reengineering\n\t\t\t\t  environment and a meta-interpreter.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse and Michael Freidig and Roel Wuyts",
		"BOOKTITLE": "Fifth International Workshop on Object-Oriented Reengineering (WOOR 2004)",
		"KEYWORDS": "scg-pub skip-doi recast04 scg-none jb04 evolution visualization test stefPub",
		"TITLE": "Logic and Trace-based Object-Oriented Application Testing",
		"URL": "http://scg.unibe.ch/archive/papers/Duca04bTestLogicWoor04.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca04bTestLogicWoor04.pdf"
	},
	{
		"key": "Duca04d",
		"type": "techreport",
		"ABSTRACT": "Understanding packages is an important activity in\n\t\t\t\t  the reengineering of large object-oriented systems.\n\t\t\t\t  The relationships between packages and their\n\t\t\t\t  contained classes can affect the cost of modifying\n\t\t\t\t  the system. The main problem of this task is to\n\t\t\t\t  quickly grasp the structure of a package and how it\n\t\t\t\t  interacts with the rest of the system. In this paper\n\t\t\t\t  we present a top-down program comprehension strategy\n\t\t\t\t  based on polymetric views, radar charts, and\n\t\t\t\t  software metrics. We illustrate this approach on two\n\t\t\t\t  applications and show how we can retrieve the\n\t\t\t\t  important characteristics of packages.",
		"ANNOTE": "report notrefereed",
		"AUTHOR": "Stéphane Ducasse and Michele Lanza and Laura Ponisio",
		"INSTITUTION": "University of Bern, Institut of Applied Mathematics and Computer Sciences",
		"KEYWORDS": "scg-none jb05 scg-pub skip-doi stefPub snf04 recast05 moose-pub",
		"NUMBER": "IAM-04-007",
		"TITLE": "A Top-Down Program Comprehension Strategy for Packages",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Duca04dPackageVisualization.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca04dPackageVisualization.pdf"
	},
	{
		"key": "Duca04e",
		"type": "inproceedings",
		"ABSTRACT": "Developing web applications is difficult since (1)\n\t\t\t\t  the client-server relationship is asymmetric: the\n\t\t\t\t  server cannot update clients but only responds to\n\t\t\t\t  client requests and (2) the navigation facilities of\n\t\t\t\t  web browsers lead to a situation where servers\n\t\t\t\t  cannot control the state of the clients.\n\t\t\t\t  Page-centric web application frameworks fail to\n\t\t\t\t  offer adequate solutions to model control flow at a\n\t\t\t\t  high-level of abstraction. Developers have to work\n\t\t\t\t  manually around the shortcomings of the HTTP\n\t\t\t\t  protocol. Some approaches offer better abstractions\n\t\t\t\t  by composing an application out of components,\n\t\t\t\t  however they still fail to offer modeling control\n\t\t\t\t  flow at a high level. Continuation-based approaches\n\t\t\t\t  solve this problem by providing the facilities to\n\t\t\t\t  model a control flow over several pages with one\n\t\t\t\t  piece of code. However combining multiple flows\n\t\t\t\t  inside the same page is difficult. This article\n\t\t\t\t  presents Seaside. Seaside is a framework which\n\t\t\t\t  combines an object-oriented approach with a\n\t\t\t\t  continuation-based one. A Seaside application is\n\t\t\t\t  built out of components (i.e., objects) and the\n\t\t\t\t  logic of the application benefits from the\n\t\t\t\t  continuation-based program flow infrastructure.\n\t\t\t\t  Seaside offers a unique way to have multiple control\n\t\t\t\t  flows on a page, one for each component. This\n\t\t\t\t  enables the developer to write components that are\n\t\t\t\t  highly reusable and that can be used to compose\n\t\t\t\t  complex web applications with higher quality in less\n\t\t\t\t  time.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Stéphane Ducasse and Adrian Lienhard and Lukas Renggli",
		"BOOKTITLE": "Proceedings of 12th International Smalltalk Conference (ISC'04)",
		"CVS": "seaside",
		"KEYWORDS": "scg-pub skip-doi scg-none jb05 snf05 stefPub seaside-article",
		"MISC": "Also Technical Report IAM-04-008",
		"MONTH": "September",
		"PAGES": "231--257",
		"TITLE": "Seaside — a Multiple Control Flow Web Application Framework",
		"URL": "http://scg.unibe.ch/archive/papers/Duca04eSeaside.pdf http://www.iam.unibe.ch/publikationen/techreports/2004/iam-04-008",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca04eSeaside.pdf%20http://www.iam.unibe.ch/publikationen/techreports/2004/iam-04-008"
	},
	{
		"key": "Duca04f",
		"type": "inproceedings",
		"ABSTRACT": "The histories of software systems hold useful\n\t\t\t\t  information when reasoning about the systems at hand\n\t\t\t\t  or about general laws of software evolution. Yet,\n\t\t\t\t  the approaches developed so far, do not rely on an\n\t\t\t\t  explicit meta-model and do not facilitate the\n\t\t\t\t  comparison of different evolutions. We argue for the\n\t\t\t\t  need to define history as a first class entity and\n\t\t\t\t  propose a meta-model centered around the notion of\n\t\t\t\t  history. We show the usefulness of our a meta-model\n\t\t\t\t  by discussing the different analysis it enables.",
		"ADDRESS": "Amsterdam",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse and Tudor Gîrba and Jean-Marie Favre",
		"BOOKTITLE": "Proceedings Workshop on Software Evolution Through Transformation (SETra 2004)",
		"DOI": "10.1016/j.entcs.2004.08.035",
		"KEYWORDS": "scg-pub evolution van stefPub recast05 jointERCIM girba hismo scg-none jb05 moose-pub",
		"PAGES": "75--86",
		"PUBLISHER": "Elsevier",
		"TITLE": "Modeling Software Evolution by Treating History as a First Class Entity",
		"URL": "http://scg.unibe.ch/archive/papers/Duca04fHismo.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca04fHismo.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.entcs.2004.08.035"
	},
	{
		"key": "Duca05a",
		"type": "incollection",
		"ABSTRACT": "Software systems are complex and difficult to\n\t\t\t\t  analyze. Reverse engineering is a complex analysis\n\t\t\t\t  that usually involves combining different techniques\n\t\t\t\t  and tools. Moreover, oftentimes the existing tools\n\t\t\t\t  are not perfectly suitable for the task, and\n\t\t\t\t  customization of existing tools, or development of\n\t\t\t\t  new tools is required. Moose is an extensible\n\t\t\t\t  reengineering environment designed to provide the\n\t\t\t\t  necessary infrastructure for tool integration. Moose\n\t\t\t\t  centers on a language independent meta-model, and\n\t\t\t\t  offers services like grouping, querying, navigation,\n\t\t\t\t  and advanced tool integration mechanism.",
		"ADDRESS": "Milano",
		"AERES": "OS",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "articlebook",
		"AUTHOR": "Stéphane Ducasse and Tudor Gîrba and Michele Lanza and Serge Demeyer",
		"BOOKTITLE": "Tools for Software Maintenance and Reengineering",
		"INRIA": "hors",
		"ISBN": "88-464-6396-X",
		"KEYWORDS": "moose-pub scg-pub skip-doi scg-none jb05 recast05 stefPub jointERCIM girba",
		"PAGES": "55--71",
		"PUBLISHER": "Franco Angeli",
		"SERIES": "RCOST / Software Technology Series",
		"TITLE": "Moose: a Collaborative and Extensible Reengineering Environment",
		"URL": "http://scg.unibe.ch/archive/papers/Duca05aMooseBookChapter.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca05aMooseBookChapter.pdf"
	},
	{
		"key": "Duca05b",
		"type": "article",
		"ABSTRACT": "Understanding source code is an important task in\n\t\t\t\t  the maintenance of software systems. Legacy systems\n\t\t\t\t  are not only limited to procedural languages, but\n\t\t\t\t  are also written in object-oriented languages. In\n\t\t\t\t  such a context, understanding classes is a key\n\t\t\t\t  activity as they are the cornerstone of the\n\t\t\t\t  object-oriented paradigm and the primary abstraction\n\t\t\t\t  from which applications are built. Such an\n\t\t\t\t  understanding is however difficult to obtain because\n\t\t\t\t  of reasons such as the presence of late binding and\n\t\t\t\t  inheritance. A first level of class understanding\n\t\t\t\t  consists of the understanding of its overall\n\t\t\t\t  structure, the control flow among its methods, and\n\t\t\t\t  the accesses on its attributes. We propose a novel\n\t\t\t\t  visualization of classes called class blueprint that\n\t\t\t\t  is based on a semantically enriched visualization of\n\t\t\t\t  the internal structure of classes. This\n\t\t\t\t  visualization allows a software engineer to build a\n\t\t\t\t  first mental model of a class that he validates via\n\t\t\t\t  opportunistic code-reading. Furthermore, we have\n\t\t\t\t  identified visual patterns that represent recurrent\n\t\t\t\t  situations and as such convey additional information\n\t\t\t\t  to the viewer. The contributions of this article are\n\t\t\t\t  the class blueprint, a novel visualization of the\n\t\t\t\t  internal structure of classes, the identification of\n\t\t\t\t  visual patterns, and the definition of a vocabulary\n\t\t\t\t  based on these visual patterns. We have performed\n\t\t\t\t  several case studies of which one is presented in\n\t\t\t\t  depth, and validated the usefulness of the approach\n\t\t\t\t  in a controlled experiment.",
		"AERES": "ACL",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Stéphane Ducasse and Michele Lanza",
		"DOI": "10.1109/TSE.2005.14",
		"IMPACTFACTOR": "1.967, SCI 2006",
		"INRIA": "hors",
		"JOURNAL": "Transactions on Software Engineering (TSE)",
		"KEYWORDS": "hasler07 scg-none jb05 scg-pub stefPub recast05 mooseCincom moose-pub",
		"MISC": "SCI impact factor 1.967",
		"MONTH": "January",
		"NUMBER": "1",
		"PAGES": "75--90",
		"PUBLISHER": "IEEE Computer Society",
		"SELECTIF": "oui",
		"TITLE": "The Class Blueprint: Visually Supporting the Understanding of Classes",
		"URL": "http://scg.unibe.ch/archive/papers/Duca05bTSEClassBlueprint.pdf",
		"VOLUME": "31",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca05bTSEClassBlueprint.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/TSE.2005.14"
	},
	{
		"key": "Duca05e",
		"type": "inproceedings",
		"ABSTRACT": "Understanding sets of classes, or packages, is an\n\t\t\t\t  important activity in the development and\n\t\t\t\t  reengineering of large object-oriented systems.\n\t\t\t\t  Packages represent the coarse-grained structure of\n\t\t\t\t  an application. They are artefacts to deploy and\n\t\t\t\t  structure software, and therefore more than a simple\n\t\t\t\t  generalization of classes. The relationships between\n\t\t\t\t  packages and their contained classes are key in the\n\t\t\t\t  decomposition of an application and its\n\t\t\t\t  (re)-modularisation. However, it is difficult to\n\t\t\t\t  quickly grasp the structure of a package and to\n\t\t\t\t  understand how a package interacts with the rest of\n\t\t\t\t  the system. We tackle this problem using butterfly\n\t\t\t\t  visualizations, i.e. dedicated radar charts built\n\t\t\t\t  from simple package metrics based on a\n\t\t\t\t  language-independent meta-model. We illustrate our\n\t\t\t\t  approach on two applications and show how we can\n\t\t\t\t  retrieve the relevant characteristics of packages.",
		"ACCEPTNUM": "39",
		"ACCEPTTOTAL": "89",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Stéphane Ducasse and Michele Lanza and Laura Ponisio",
		"BOOKTITLE": "Proceedings of the 11th IEEE International Software Metrics Symposium (METRICS'05)",
		"CVS": "AlchemistPackageMETRICS05",
		"DOI": "10.1109/METRICS.2005.15",
		"INRIA": "hors",
		"KEYWORDS": "scg-none jb06 scg-pub stefPub moose-pub recast06",
		"MISC": "acceptance rate: 39/89 = 44",
		"PAGES": "70--77",
		"PUBLISHER": "IEEE Computer Society",
		"RATE": "44%",
		"SELECTIF": "non",
		"TITLE": "Butterflies: A Visual Approach to Characterize Packages",
		"URL": "http://scg.unibe.ch/archive/papers/Duca05ePackageVisualization.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca05ePackageVisualization.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/METRICS.2005.15"
	},
	{
		"key": "Duca05f",
		"type": "inproceedings",
		"ABSTRACT": "Software systems are complex and difficult to\n\t\t\t\t  analyze. Reengineering is a complex activity that\n\t\t\t\t  usually involves combining different techniques and\n\t\t\t\t  tools. Moose is an reengineering environment\n\t\t\t\t  designed to provide the necessary infrastructure for\n\t\t\t\t  building new tools and for integrating them. Moose\n\t\t\t\t  centers on a language independent meta-model, and\n\t\t\t\t  offers services like grouping, querying, navigation,\n\t\t\t\t  and meta-descriptions. Several tools have been built\n\t\t\t\t  on top of Moose dealing with different aspects of\n\t\t\t\t  reengineering like: visualization, evolution\n\t\t\t\t  analysis, semantic analysis, concept analysis or\n\t\t\t\t  dynamic analysis.",
		"ANNOTE": "conference tooldemo",
		"AUTHOR": "Stéphane Ducasse and Tudor Gîrba and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of ESEC/FSE 2005",
		"CVS": "MooseDemoESEC05",
		"DOI": "10.1145/1081706.1081723",
		"KEYWORDS": "scg-pub moose-pub stefPub scg-none jb06 recast06 girba",
		"MONTH": "September",
		"NOTE": "Tool demo",
		"PAGES": "99--102",
		"TITLE": "Moose: an Agile Reengineering Environment",
		"URL": "http://scg.unibe.ch/archive/papers/Duca05fMooseDemo.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca05fMooseDemo.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1081706.1081723"
	},
	{
		"key": "Duca05g",
		"type": "article",
		"ABSTRACT": "In pure object-oriented languages, classes are\n\t\t\t\t  objects, instances of other classes called\n\t\t\t\t  metaclasses. In the same way as classes define the\n\t\t\t\t  properties of their instances, metaclasses define\n\t\t\t\t  the properties of classes. It is therefore very\n\t\t\t\t  natural to wish to reuse class properties, utilizing\n\t\t\t\t  them amongst several classes. However this\n\t\t\t\t  introduced metaclass composition problems, i.e.,\n\t\t\t\t  code fragments applied to one class may break when\n\t\t\t\t  used on another class due to the inheritance\n\t\t\t\t  relationship between their respective metaclasses.\n\t\t\t\t  Numerous approaches have tried to solve metaclass\n\t\t\t\t  composition problems, but they always resort to an\n\t\t\t\t  ad-hoc manner of handling conflicting properties,\n\t\t\t\t  alienating the meta-programmer. We propose a uniform\n\t\t\t\t  approach that represents class properties as traits,\n\t\t\t\t  groups of methods that act as a unit of reuse from\n\t\t\t\t  which classes are composed. Like all the other\n\t\t\t\t  classes in the system, metaclasses are composed out\n\t\t\t\t  of traits. This solution supports the reuse of class\n\t\t\t\t  properties, and their safe and automatic composition\n\t\t\t\t  based on explicit conflict resolution. The paper\n\t\t\t\t  discusses traits and our solution, shows concrete\n\t\t\t\t  examples implemented in the Smalltalk environment\n\t\t\t\t  Squeak, and compares our approach with existing\n\t\t\t\t  models for composing class properties.",
		"AERES": "ACL",
		"AERESSTASTUS": "2008",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Stéphane Ducasse and Nathanael Schärli and Roel Wuyts",
		"DOI": "10.1016/j.cl.2004.11.003",
		"IMPACTFACTOR": "0.467, SCI 06",
		"INRIA": "hors",
		"JOURNAL": "Journal of Computer Languages, Systems and Structures",
		"KEYWORDS": "scg08 scg-pub stefPub schaerli jb05 snf05",
		"MEDIUM": "2",
		"MISC": "SCI impact factor 0.467",
		"MONTH": "December",
		"NUMBER": "3-4",
		"PAGES": "143--164",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Elsevier",
		"SELECTIF": "non",
		"TITLE": "Uniform and Safe Metaclass Composition",
		"URL": "http://scg.unibe.ch/archive/papers/Duca05ySafeMetaclassTrait.pdf",
		"VOLUME": "31",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca05ySafeMetaclassTrait.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.cl.2004.11.003"
	},
	{
		"key": "Duca05h",
		"type": "inproceedings",
		"ABSTRACT": "Wikis are often implemented using string-based\n\t\t\t\t  approaches to parse and generate their pages. While\n\t\t\t\t  such approaches work well for simple wikis, they\n\t\t\t\t  hamper the customization and adaptability of wikis\n\t\t\t\t  to the variety of end-users when more sophisticated\n\t\t\t\t  needs are required (i.e., different output formats,\n\t\t\t\t  user-interfaces, wiki managment, security policies,\n\t\t\t\t  ...). In this paper we present SmallWiki, the second\n\t\t\t\t  version of a fully object-oriented implementation of\n\t\t\t\t  a wiki. SmallWiki is implemented with objects from\n\t\t\t\t  the top to the bottom and it can be customized\n\t\t\t\t  easily to accommodate new needs. In addition,\n\t\t\t\t  SmallWiki is based on a powerful meta-description\n\t\t\t\t  called Magritte that allows one to create\n\t\t\t\t  user-interface elements declaratively.",
		"ADDRESS": "New York, NY, USA",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Stéphane Ducasse and Lukas Renggli and Roel Wuyts",
		"BOOKTITLE": "Proceedings ACM International Symposium on Wikis (WikiSym'05)",
		"CVS": "SmallWikiTwoOOPSLASymp2005",
		"DOI": "10.1145/1104973.1104981",
		"INRIA": "hors",
		"KEYWORDS": "scg-none jb06 scg-pub snf-none stefPub moose-pub",
		"PAGES": "75--82",
		"PUBLISHER": "ACM Computer Society",
		"SELECTIF": "non",
		"TITLE": "SmallWiki — A Meta-Described Collaborative Content Management System",
		"URL": "http://scg.unibe.ch/archive/papers/Duca05hSmallwikiWikiSymp05.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca05hSmallwikiWikiSymp05.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1104973.1104981"
	},
	{
		"key": "Duca05i",
		"type": "inproceedings",
		"ABSTRACT": "Understanding classes and methods is a key activity\n\t\t\t\t  in object-oriented programming, since classes\n\t\t\t\t  represent the primary abstractions from which\n\t\t\t\t  applications are built, while methods contain the\n\t\t\t\t  actual program logic. The main problem of this task\n\t\t\t\t  is to quickly grasp the purpose and inner structure\n\t\t\t\t  of a class. To achieve this goal, one must be able\n\t\t\t\t  to overview multiple methods at once. In this paper,\n\t\t\t\t  we present microprints, pixel-based representations\n\t\t\t\t  of methods enriched with semantical information. We\n\t\t\t\t  present three specialized microprints each dealing\n\t\t\t\t  with a specific aspect we want to understand of\n\t\t\t\t  methods: (1) state access, (2) control flow, and (3)\n\t\t\t\t  invocation relationship.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Stéphane Ducasse and Michele Lanza and Romain Robbes",
		"BOOKTITLE": "Proceedings of VISSOFT 2005 (3th IEEE International Workshop on Visualizing Software for Understanding)",
		"KEYWORDS": "scg-pub scg-none jb06 stefPub recast06",
		"MONTH": "September",
		"TITLE": "Multi-level Method Understanding Using Microprints",
		"URL": "http://scg.unibe.ch/archive/papers/Duca05imicroprintsVissoft.pdf",
		"YEAR": "2005",
		"DOI": "10.1109/VISSOF.2005.1684300",
		"PAGES": "1--6",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca05imicroprintsVissoft.pdf"
	},
	{
		"key": "Duca06a",
		"type": "inproceedings",
		"ABSTRACT": "When reengineering legacy systems, it is crucial to\n\t\t\t\t  assess if the legacy behavior has been preserved or\n\t\t\t\t  how it changed due to the reengineering effort.\n\t\t\t\t  Ideally if a legacy system is covered by tests,\n\t\t\t\t  running the tests on the new version can identify\n\t\t\t\t  potential differences or discrepancies. However,\n\t\t\t\t  writing tests for an unknown and large system is\n\t\t\t\t  difficult due to the lack of internal knowledge. It\n\t\t\t\t  is especially difficult to bring the system to an\n\t\t\t\t  appropriate state. Our solution is based on the\n\t\t\t\t  acknowledgment that one of the few trustable piece\n\t\t\t\t  of information available when approaching a legacy\n\t\t\t\t  system is the running system itself. Our approach\n\t\t\t\t  reifies the execution traces and uses logic\n\t\t\t\t  programming to express tests on them. Thereby it\n\t\t\t\t  eliminates the need to programatically bring the\n\t\t\t\t  system in a particular state, and handles the\n\t\t\t\t  test-writer a high-level abstraction mechanism to\n\t\t\t\t  query the trace. The resulting system, called\n\t\t\t\t  TESTLOG, was used on several real-world case studies\n\t\t\t\t  to validate our claims.",
		"ACCEPTNUM": "27",
		"ACCEPTTOTAL": "65",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Stéphane Ducasse and Tudor Gîrba and Roel Wuyts",
		"BOOKTITLE": "Proceedings of 10th European Conference on Software Maintenance and Reengineering (CSMR'06)",
		"DOI": "10.1109/CSMR.2006.37",
		"INRIA": "hors",
		"KEYWORDS": "scg-pub recast06 snf06 scg-none jb06 fb06 stefPub girba",
		"MEDIUM": "2",
		"MISC": "acceptance rate: 27/65 = 42 ",
		"PAGES": "35--44",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society Press",
		"SELECTIF": "non",
		"TITLE": "Object-Oriented Legacy System Trace-based Logic Testing",
		"URL": "http://scg.unibe.ch/archive/papers/Duca06aTestLogtestingCSMR.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca06aTestLogtestingCSMR.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/CSMR.2006.37"
	},
	{
		"key": "Duca06b",
		"type": "article",
		"ABSTRACT": "Inheritance is well-known and accepted as a\n\t\t\t\t  mechanism for reuse in object-oriented languages.\n\t\t\t\t  Unfortunately, due to the coarse granularity of\n\t\t\t\t  inheritance, it may be difficult to decompose an\n\t\t\t\t  application into an optimal class hierarchy that\n\t\t\t\t  maximizes software reuse. Existing schemes based on\n\t\t\t\t  single inheritance, multiple inheritance, or mixins,\n\t\t\t\t  all pose numerous problems for reuse. To overcome\n\t\t\t\t  these problems we propose traits, pure units of\n\t\t\t\t  reuse consisting only of methods. We develop a\n\t\t\t\t  formal model of traits that establishes how traits\n\t\t\t\t  can be composed, either to form other traits, or to\n\t\t\t\t  form classes. We also outline an experimental\n\t\t\t\t  validation in which we apply traits to refactor a\n\t\t\t\t  non-trivial application into composable units.",
		"AERES": "ACL",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Stéphane Ducasse and Oscar Nierstrasz and Nathanael Schärli and Roel Wuyts and Andrew P. Black",
		"CVS": "TraitsTOPLAS2005",
		"DOI": "10.1145/1119479.1119483",
		"INRIA": "hors",
		"ISSN": "0164-0925",
		"JOURNAL": "TOPLAS: ACM Transactions on Programming Languages and Systems",
		"KEYWORDS": "scg-pub stefPub snf05 snf06 scg-none jb06 toplas traits onhindex(131) schaerli toplastraits stlit-traits",
		"MISC": "SCI impact factor 1.404 (2005)",
		"MISCMISC": "was Duca05z",
		"MONTH": "March",
		"NUMBER": "2",
		"PAGES": "331--388",
		"SELECTIF": "oui",
		"TITLE": "Traits: A Mechanism for fine-grained Reuse",
		"URL": "http://scg.unibe.ch/archive/papers/Duca06bTOPLASTraits.pdf",
		"VOLUME": "28",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca06bTOPLASTraits.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1119479.1119483"
	},
	{
		"key": "Duca06c",
		"type": "inproceedings",
		"ABSTRACT": "Understanding large software systems is a\n\t\t\t\t  challenging task, and to support it many approaches\n\t\t\t\t  have been developed. Often, the result of these\n\t\t\t\t  approaches categorize existing entities into new\n\t\t\t\t  groups or associates them with mutually exclusive\n\t\t\t\t  properties. In this paper we present the\n\t\t\t\t  Distribution Map as a generic technique to visualize\n\t\t\t\t  and analyze this type of result. Our technique is\n\t\t\t\t  based on the notion of focus, which shows whether a\n\t\t\t\t  property is well-encapsulated or cross-cutting, and\n\t\t\t\t  the notion of spread, which shows whether the\n\t\t\t\t  property is present in several parts of the system.\n\t\t\t\t  We present a basic visualization and complement it\n\t\t\t\t  with measurements that quantify focus and spread. To\n\t\t\t\t  validate our technique we show evidence of applying\n\t\t\t\t  it on the result sets of different analysis\n\t\t\t\t  approaches. As a conclusion we propose that the\n\t\t\t\t  Distribution Map technique should belong to any\n\t\t\t\t  reverse engineering toolkit.",
		"ACCEPTNUM": "41",
		"ACCEPTTOTAL": "147",
		"ADDRESS": "Los Alamitos CA",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Stéphane Ducasse and Tudor Gîrba and Adrian Kuhn",
		"BOOKTITLE": "Proceedings of 22nd IEEE International Conference on Software Maintenance (ICSM '06)",
		"DOI": "10.1109/ICSM.2006.22",
		"INRIA": "hors",
		"KEYWORDS": "scg-pub scg-none jb07 fb06 stefPub moose-pub girba recast07 snf06 akuhn",
		"MEDIUM": "2",
		"MISC": "acceptance rate: 41/147 = 28",
		"PAGES": "203--212",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"RATE": "28%",
		"SELECTIF": "oui",
		"TITLE": "Distribution Map",
		"URL": "http://scg.unibe.ch/archive/papers/Duca06cDistributionMap.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca06cDistributionMap.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.2006.22"
	},
	{
		"key": "Duca06d",
		"type": "inproceedings",
		"ABSTRACT": "Object-oriented meta-languages such as MOF or EMOF\n\t\t\t\t  are often used to specify domain specific languages.\n\t\t\t\t  However, these meta-languages lack the ability to\n\t\t\t\t  describe behavior or operational semantics. Several\n\t\t\t\t  approaches used a subset of Java mixed with OCL as\n\t\t\t\t  executable meta-languages. In this paper, we report\n\t\t\t\t  our experience of using Smalltalk as an executable\n\t\t\t\t  and integrated meta-language. We validated this\n\t\t\t\t  approach in incrementally building over the last\n\t\t\t\t  decade, Moose, a meta-described reengineering\n\t\t\t\t  environment. The reflective capabilities of\n\t\t\t\t  Smalltalk support a uniform way of letting the base\n\t\t\t\t  developer focus on his tasks while at the same time\n\t\t\t\t  allowing him to meta-describe his domain model. The\n\t\t\t\t  advantage of our this approach is that the developer\n\t\t\t\t  uses the same tools and environment",
		"ADDRESS": "Berlin, Germany",
		"AERES": "ACT",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Stéphane Ducasse and Tudor Gîrba",
		"BOOKTITLE": "International Conference on Model Driven Engineering Languages and Systems (Models/UML 2006)",
		"DOI": "10.1007/11880240_42",
		"INRIA": "hors",
		"ISBN": "978-3-540-45772-5",
		"KEYWORDS": "scg-pub scg-none jb07 fb06 girba moose-pub stefPub recast07 norex06",
		"MEDIUM": "2",
		"PAGES": "604--618",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"RATE": "28%",
		"SELECTIF": "oui",
		"SERIES": "LNCS",
		"TITLE": "Using Smalltalk as a Reflective Executable Meta-Language",
		"URL": "http://scg.unibe.ch/archive/papers/Duca06dMOOSEMODELS2006.pdf",
		"VOLUME": "4199",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca06dMOOSEMODELS2006.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/11880240_42"
	},
	{
		"key": "Duca06i",
		"type": "article",
		"ABSTRACT": "Although duplicated code is known to pose severe\n\t\t\t\t  problems for software maintenance, it is difficult\n\t\t\t\t  to identify in large systems. Many different\n\t\t\t\t  techniques have been developed to detect software\n\t\t\t\t  clones, some of which are very sophisticated, but\n\t\t\t\t  are also expensive to implement and adapt.\n\t\t\t\t  Lightweight techniques based on simple string\n\t\t\t\t  matching are easy to implement, but how effective\n\t\t\t\t  are the\n          y? We present a simple stringbased approach\n\t\t\t\t  which we have successfully applied to a number of\n\t\t\t\t  different languages such COBOL, Java, C++, Pascal,\n\t\t\t\t  Python, Smalltalk, C and PDP-11 assembler. In each\n\t\t\t\t  case the maximum time to adapt the approach to a new\n\t\t\t\t  language was less than 45 minutes. In this article\n\t\t\t\t  we investigate a number of simple variants of\n\t\t\t\t  string-based clone detection that abstract away from\n\t\t\t\t  common editing operations, and assess the quality of\n\t\t\t\t  clone detection for very different case studies. Our\n\t\t\t\t  results confirm that this inexpensive clone\n\t\t\t\t  detection technique generally achieves high recall\n\t\t\t\t  and acceptable precision. Over-zealous normalization\n\t\t\t\t  of the code before comparison, however, can result\n\t\t\t\t  in unacceptable numbers of false positives.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Stéphane Ducasse and Oscar Nierstrasz and Matthias Rieger",
		"CVS": "DuplocJournalPaper",
		"DOI": "10.1002/smr.317",
		"IMPACTFACTOR": "0.457, SCI 2005",
		"INRIA": "hors",
		"JOURNAL": "Journal of Software Maintenance and Evolution: Research and Practice (JSME)",
		"KEYWORDS": "scg-pub recast06 scg-none jb06 stefPub duploc onhindex(38)",
		"MISC": "SCI impact factor 0.457 (2005)",
		"MONTH": "January",
		"NUMBER": "1",
		"PAGES": "37--58",
		"SELECTIF": "non",
		"TITLE": "On the Effectiveness of Clone Detection by String Matching",
		"URL": "http://scg.unibe.ch/archive/papers/Duca06iDuplocJSMEPaper.pdf",
		"VOLUME": "18",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca06iDuplocJSMEPaper.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1002/smr.317"
	},
	{
		"key": "Duca07a",
		"type": "article",
		"ABSTRACT": "Nowadays, many complex applications are built with a\n\t\t\t\t  web browser as their main user interface. However,\n\t\t\t\t  despite the increasing popularity of the web as an\n\t\t\t\t  application platform, implementing and maintaining\n\t\t\t\t  web applications still remains difficult and lags\n\t\t\t\t  behind conventional desktop application development.\n\t\t\t\t  The underlying technologies such as HTTP for the\n\t\t\t\t  interaction and XHTML/CSS for the presentation were\n\t\t\t\t  originally built to display and link static\n\t\t\t\t  documents. Unfortunately, most mainstream frameworks\n\t\t\t\t  provide only little abstraction over the\n\t\t\t\t  page-oriented structure imposed by those\n\t\t\t\t  technologies. Inevitably, the goto-like manner of\n\t\t\t\t  how pages are linked leads to spaghetti code and\n\t\t\t\t  hampers reuse. In this article we present Seaside, a\n\t\t\t\t  web application framework that provides an uniform\n\t\t\t\t  and pure object-oriented view on web applications.\n\t\t\t\t  In this way, Seaside avoids the unwieldily goto-like\n\t\t\t\t  style. Exploiting the reflective features of\n\t\t\t\t  Smalltalk, Seaside reintroduces procedure call\n\t\t\t\t  abstraction in the client-server context. Seaside's\n\t\t\t\t  key concepts are: (i) a component architecture\n\t\t\t\t  supporting multiple, simultaneously active control\n\t\t\t\t  flows, (ii) a programmatic XHTML generation, and\n\t\t\t\t  (iii) fully supported on-the-fly debugging,\n\t\t\t\t  code-editing, and recompilation. In this article we\n\t\t\t\t  discuss these key features of Seaside and explain\n\t\t\t\t  how they are made possible by the dynamic nature and\n\t\t\t\t  the reflective capabilities of Smalltalk.",
		"ADDRESS": "Los Alamitos, CA, USA",
		"AERES": "ACL",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Stéphane Ducasse and Adrian Lienhard and Lukas Renggli",
		"DOI": "10.1109/MS.2007.144",
		"INRIA": "hors",
		"ISSN": "0740-7459",
		"JOURNAL": "IEEE Software",
		"KEYWORDS": "scg07 scg-pub jb08 snf07 seaside-article",
		"MEDIUM": "2",
		"NUMBER": "5",
		"PAGES": "56--63",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"SELECTIF": "oui",
		"TITLE": "Seaside: A Flexible Environment for Building Dynamic Web Applications",
		"URL": "http://scg.unibe.ch/archive/papers/Duca07a-SeasideIEEE-SCG.pdf",
		"VOLUME": "24",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca07a-SeasideIEEE-SCG.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/MS.2007.144"
	},
	{
		"key": "Duca07b",
		"type": "inproceedings",
		"ABSTRACT": "A trait is a unit of behaviour that can be composed\n\t\t\t\t  with other traits and used by classes. Traits offer\n\t\t\t\t  an alternative to multiple inheritance. Conflict\n\t\t\t\t  resolution of traits, while flexible, does not\n\t\t\t\t  completely handle accidental method name conflicts:\n\t\t\t\t  if a trait with method m is composed with another\n\t\t\t\t  trait defining a different method m then resolving\n\t\t\t\t  the conflict may prove delicate or infeasible in\n\t\t\t\t  cases where both versions of m are still needed. In\n\t\t\t\t  this paper we present freezable traits, which\n\t\t\t\t  provide an expressive composition mechanism to\n\t\t\t\t  support unanticipated method composition conflicts.\n\t\t\t\t  Our solution introduces private trait methods and\n\t\t\t\t  lets the class composer change method visibility at\n\t\t\t\t  composition time (from public to private and vice\n\t\t\t\t  versa). Moreover two class composers may use\n\t\t\t\t  different composition policies for the same trait,\n\t\t\t\t  something which is not possible in mainstream\n\t\t\t\t  languages. This approach respects the two main\n\t\t\t\t  design principles of traits: the class composer is\n\t\t\t\t  empowered and traits can be flattened away. We\n\t\t\t\t  present an implementation of freezable traits in\n\t\t\t\t  Smalltalk. As a side-effect of this implementation\n\t\t\t\t  we introduced private (early-bound and invisible)\n\t\t\t\t  methods to Smalltalk by distinguishing object-sends\n\t\t\t\t  from self-sends. Our implementation uses\n\t\t\t\t  compile-time bytecode manipulation and, as such,\n\t\t\t\t  introduces no run-time penalties.",
		"ACCEPTNUM": "33",
		"ACCEPTTOTAL": "156",
		"ADDRESS": "New York, NY, USA",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference topconference",
		"AUTHOR": "Stéphane Ducasse and Roel Wuyts and Alexandre Bergel and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of 22nd International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA'07)",
		"DOI": "10.1145/1297027.1297040",
		"INRIA": "hors",
		"ISBN": "978-1-59593-786-5",
		"KEYWORDS": "scg07 snf08 stefPub alexPub jb08 scg-pub",
		"LOCATION": "Montreal, Quebec, Canada",
		"MEDIUM": "2",
		"MISC": "Acceptance rate: 33/156:21",
		"MONTH": "October",
		"PAGES": "171--190",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM Press",
		"RATE": "21%",
		"SELECTIF": "oui",
		"TITLE": "User-Changeable Visibility: Resolving Unanticipated Name Clashes in Traits",
		"URL": "http://scg.unibe.ch/archive/papers/Duca07b-FreezableTrait.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca07b-FreezableTrait.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1297027.1297040"
	},
	{
		"key": "Duca08b",
		"type": "inproceedings",
		"ABSTRACT": "The increasing amount of data available about\n\t\t\t\t  software systems poses new challenges for re- and\n\t\t\t\t  reverse engineering research, as the proposed\n\t\t\t\t  approaches need to scale. In this context, concerns\n\t\t\t\t  about meta-modeling and analysis techniques need to\n\t\t\t\t  be augmented by technical concerns about how to\n\t\t\t\t  reuse and how to build upon the efforts of previous\n\t\t\t\t  research. Moose is an extensive infrastructure for\n\t\t\t\t  reverse engineering evolved for over 10 years that\n\t\t\t\t  promotes the reuse of engineering efforts in\n\t\t\t\t  research. Moose accommodates various types of data\n\t\t\t\t  modeled in the FAMIX family of meta-models. The goal\n\t\t\t\t  of this half-day workshop is to strengthen the\n\t\t\t\t  community of researchers and practitioners who are\n\t\t\t\t  working in re- and reverse engineering, by providing\n\t\t\t\t  a forum for building future research starting from\n\t\t\t\t  Moose and FAMIX as shared infrastructure.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Stéphane Ducasse and Tudor Gîrba and Orla Greevy and Michele Lanza and Oscar Nierstrasz",
		"BOOKTITLE": "15th Working Conference on Software Maintenance and Reengineering (WCRE 2008)",
		"DOI": "10.1109/WCRE.2008.51",
		"KEYWORDS": "scg08 scg-pub greevy girba jb09 hasler08 moose-pub stefPub",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "343--344",
		"PEERREVIEW": "yes",
		"TITLE": "Workshop on FAMIX and Moose in Software Reengineering (FAMOOSr 2008)",
		"URL": "http://scg.unibe.ch/archive/papers/Duca08bFAMOOSr2008.pdf",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca08bFAMOOSr2008.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2008.51"
	},
	{
		"key": "Duca08a",
		"type": "article",
		"ABSTRACT": "Object-oriented modelling languages such as EMOF are\n\t\t\t\t  often used to specify domain specific meta-models.\n\t\t\t\t  However, these modelling languages lack the ability\n\t\t\t\t  to describe behavior or operational semantics.\n\t\t\t\t  Several approaches have used a subset of Java mixed\n\t\t\t\t  with OCL as executable meta-languages. In this\n\t\t\t\t  experience report we show how we use Smalltalk as an\n\t\t\t\t  executable meta-language in the context of the Moose\n\t\t\t\t  reengineering environment. We present how we\n\t\t\t\t  implemented EMOF and its behavioral aspects. Over\n\t\t\t\t  the last decade we validated this approach through\n\t\t\t\t  incrementally building a meta-described\n\t\t\t\t  reengineering environment. Such an approach bridges\n\t\t\t\t  the gap between a code-oriented view and a\n\t\t\t\t  meta-model driven one. It avoids the creation of yet\n\t\t\t\t  another language and reuses the infrastructure and\n\t\t\t\t  run-time of the underlying implementation language.\n\t\t\t\t  It offers an uniform way of letting developers focus\n\t\t\t\t  on their tasks while at the same time allowing them\n\t\t\t\t  to meta-describe their domain model. The advantage\n\t\t\t\t  of our approach is that developers use the same\n\t\t\t\t  tools and environment they use for their regular\n\t\t\t\t  tasks. Still the approach is not Smalltalk specific\n\t\t\t\t  but can be applied to language offering an\n\t\t\t\t  introspective API such as Ruby, Python, CLOS, Java\n\t\t\t\t  and C#.",
		"AERES": "ACL",
		"ANNOTE": "internationaljournal cook",
		"AUTHOR": "Stéphane Ducasse and Tudor Gîrba and Adrian Kuhn and Lukas Renggli",
		"DOI": "10.1007/s10270-008-0081-4",
		"INRIA": "hors",
		"JOURNAL": "Journal of Software and Systems Modeling (SOSYM)",
		"KEYWORDS": "scg09 scg-pub snf09 jb09 stefPub moose-pub girba cook remoose akuhn",
		"MEDIUM": "2",
		"MONTH": "February",
		"NUMBER": "1",
		"PAGES": "5--19",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer Verlag",
		"SELECTIF": "oui",
		"TITLE": "Meta-Environment and Executable Meta-Language using Smalltalk: an Experience Report",
		"URL": "http://scg.unibe.ch/archive/drafts/Duca08a-Sosym-ExecutableMetaLanguage.pdf",
		"VOLUME": "8",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/drafts/Duca08a-Sosym-ExecutableMetaLanguage.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/s10270-008-0081-4"
	},
	{
		"key": "Duca09b",
		"type": "inproceedings",
		"ABSTRACT": "Traits are method groups that can be used to compose\n\t\t\t\t  classes. They do not have a runtime existence and\n\t\t\t\t  are conceptually folded into the classes that use\n\t\t\t\t  them. Traits have been implemented in different\n\t\t\t\t  languages. While implementing them in Smalltalk, our\n\t\t\t\t  first reflex was to take advantage of the fact that\n\t\t\t\t  traits are not run-time entities: we optimized the\n\t\t\t\t  implementation for space and hence shared methods\n\t\t\t\t  between traits and classes. However, by doing so we\n\t\t\t\t  broke the introspective API of Smalltalk. This paper\n\t\t\t\t  illustrates a more general problem seen in all\n\t\t\t\t  reflective systems: the implementation serves both\n\t\t\t\t  as a model for execution and as the model that is\n\t\t\t\t  exposed to the programmer. There is a conflict of\n\t\t\t\t  interests between the information necessary for\n\t\t\t\t  execution and the information the programmer is\n\t\t\t\t  interested in. In addition, as soon as the\n\t\t\t\t  implementation is exposed via reflection, we are not\n\t\t\t\t  free to optimize. As the complete implementation is\n\t\t\t\t  visible reflectively, there is no way to hide the\n\t\t\t\t  optimizations. Few papers report errors and this is\n\t\t\t\t  one of them. We report our experience facing the\n\t\t\t\t  initial API mismatch, which has a significant impact\n\t\t\t\t  on the system because the language is reflective\n\t\t\t\t  (i.e., written in itself and causally connected). We\n\t\t\t\t  present the new introspective API we put in place.",
		"ADDRESS": "New York, NY, USA",
		"AERES": "ACT",
		"AERESSTATUS": "aeres12",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Ducasse, Stéphane and Denker, Marcus and Lienhard, Adrian",
		"BOOKTITLE": "Proceedings of the International Workshop on Smalltalk Technologies (IWST'09)",
		"DOI": "10.1145/1735935.1735949",
		"INRIA": "dans",
		"ISBN": "978-1-60558-899-5",
		"KEYWORDS": "stefPub jb10 scg-pub scg10 snf10",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"LOCATION": "Brest, France",
		"MONTH": "jun",
		"PAGES": "82--86",
		"PUBLISHER": "ACM",
		"SELECTIF": "non",
		"TITLE": "Evolving a Reflective Language",
		"URL": "http://scg.unibe.ch/archive/papers/Duca09bTraitsEvolution.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Duca09bTraitsEvolution.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1735935.1735949"
	},
	{
		"key": "Duca10a",
		"type": "book",
		"ABSTRACT": "Seaside is the open source framework of choice for\n\t\t\t\t  developing sophisticated and dynamic web\n\t\t\t\t  applications. Seaside uses the power of objects to\n\t\t\t\t  master the web. With Seaside web applications is as\n\t\t\t\t  simple as building desktop applications. Seaside\n\t\t\t\t  lets you build highly dynamic and interactive web\n\t\t\t\t  applications. Seaside supports agile development\n\t\t\t\t  through interactive debugging and unit testing.\n\t\t\t\t  Seaside is based on Smalltalk, a proven and robust\n\t\t\t\t  language implemented by different vendors. Seaside\n\t\t\t\t  is now available for all the major Smalltalk\n\t\t\t\t  including Pharo, Squeak, GNU Smalltalk, Cincom\n\t\t\t\t  Smalltalk, GemStone Smalltalk, and VA Smalltalk.",
		"ANNOTE": "book",
		"AUTHOR": "Stéphane Ducasse and Lukas Renggli and C. David Shaffer and Rick Zaccone and Michael Davies",
		"ISBN": "978-3-9523341-1-9",
		"KEYWORDS": "scg-pub scg10 skip-doi snf-none jb10 evol11",
		"MEDIUM": "2",
		"NOTE": "http://book.seaside.st/book",
		"PEERREVIEW": "no",
		"PUBLISHER": "Square Bracket Associates",
		"TITLE": "Dynamic Web Development with Seaside",
		"URL": "http://book.seaside.st/book",
		"YEAR": "2010",
		"BDSK-URL-1": "http://book.seaside.st/book"
	},
	{
		"key": "Ebra22a",
		"type": "inproceedings",
		"AUTHOR": "Arash Ale Ebrahim and Mohammadreza Hazhirpasand and Oscar Nierstrasz and Mohammad Ghafari",
		"BOOKTITLE": "29th edition of the IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)",
		"TITLE": "FuzzingDriver: the Missing Dictionary to Increase Code Coverage in Fuzzers",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"ABSTRACT": "We propose a tool, called FuzzingDriver, to generate\n\t\tdictionary tokens for coverage-based greybox fuzzers\n\t\t(CGF) from the codebase of any target program.\n\t\tFuzzingDriver does not add any overhead to the fuzzing\n\t\tjob as it is run beforehand. We compared FuzzingDriver to\n\t\tGoogle dictionaries by fuzzing six open-source targets,\n\t\tand we found that FuzzingDriver consistently achieves\n\t\thigher code coverage in all tests. We also executed eight\n\t\tbenchmarks on FuzzBench to demonstrate how utilizing\n\t\tFuzzingDriver's dictionaries can outperform six\n\t\twidely-used CGF fuzzers. In future work, investigating\n\t\tthe impact of FuzzingDriver's dictionaries on improving\n\t\tbug coverage might prove important.",
		"KEYWORDS": "scg-pub snf-asa3 scg22 jb22",
		"URL": "http://scg.unibe.ch/archive/papers/Ebra22a.pdf",
		"DOI": "10.1109/SANER53432.2022.00042",
		"MONTH": "March",
		"YEAR": "2022"
	},
	{
		"key": "Gadi18a",
		"type": "article",
		"AUTHOR": "Gadient, Pascal and Ghafari, Mohammad and Frischknecht, Patrick and Nierstrasz, Oscar",
		"TITLE": "Security Code Smells in Android ICC",
		"EDITOR": "De Roover, Coen and Zhao, Jianjun and Lo, David",
		"JOURNAL": "Empirical Software Engineering",
		"VOLUME": "24",
		"ISSUE": "5",
		"YEAR": "2019",
		"PAGES": "3046--3076",
		"KEYWORDS": "scg-pub security snf-asa3 scg18 jb19; Security code smells; Vulnerability; Static analysis; Android",
		"ANNOTE": "internationaljournal",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer US",
		"DOI": "10.1007/s10664-018-9673-y",
		"ABSTRACT": "Android Inter-Component Communication (ICC) is complex, largely unconstrained, and hard for developers to understand. As a consequence, ICC is a common source of security vulnerability in Android apps. To promote secure programming practices, we have reviewed related research, and identified avoidable ICC vulnerabilities in Android-run devices and the security code smells that indicate their presence. We explain the vulnerabilities and their corresponding smells, and we discuss how they can be eliminated or mitigated during development. We present a lightweight static analysis tool on top of Android Lint that analyzes the code under development and provides just-in-time feedback within the IDE about the presence of such smells in the code. Moreover, with the help of this tool we study the prevalence of security code smells in more than 700 open-source apps, and manually inspect around 15% of the apps to assess the extent to which identifying such smells uncovers ICC security vulnerabilities.",
		"URL": "http://scg.unibe.ch/archive/papers/Gadi18a.pdf"
	},
	{
		"key": "Gadi20a",
		"type": "inproceedings",
		"AUTHOR": "Gadient, Pascal and Ghafari, Mohammad and Tarnutzer, Marc-Andrea and Nierstrasz, Oscar",
		"BOOKTITLE": "27th edition of the IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)",
		"TITLE": "Web APIs in Android through the Lens of Security",
		"YEAR": "2020",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"ABSTRACT": "Web communication has become an indispensable characteristic of mobile apps. However, it is not clear what data the apps transmit, to whom, and what consequences such transmissions have. We analyzed the web communications found in mobile apps from the perspective of security. We first manually studied 160 Android apps to identify the commonly-used communication libraries, and to understand how they are used in these apps. We then developed a tool to statically identify web API URLs used in the apps, and restore the JSON data schemas including the type and value of each parameter. We extracted 9,714 distinct web API URLs that were used in 3,376 apps. We found that developers often use the java.net package for network communication, however, third-party libraries like OkHttp are also used in many apps. We discovered that insecure HTTP connections are seven times more prevalent in closed-source than in open-source apps, and that embedded SQL and JavaScript code is used in web communication in more than 500 different apps. This finding is devastating; it leaves billions of users and API service providers vulnerable to attack.",
		"KEYWORDS": "scg-pub security snf-asa3 scg20 jb20 snf-imad",
		"DOI": "10.1109/SANER48275.2020.9054850",
		"MONTH": "March",
		"URL": "http://scg.unibe.ch/archive/papers/Gadi20a.pdf"
	},
	{
		"key": "Gadi21a",
		"type": "inproceedings",
		"AUTHOR": "Gadient, Pascal and Tarnutzer, Marc-Andrea and Nierstrasz, Oscar and Ghafari, Mohammad",
		"BOOKTITLE": "ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)",
		"TITLE": "Security Smells Pervade Mobile App Servers",
		"YEAR": "2021",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"ABSTRACT": "[Background] Web communication is universal in cyberspace, and security risks in this domain are devastating. [Aims] We analyzed the prevalence of six security smells in mobile app servers, and we investigated the consequence of these smells from a security perspective. [Method] We used an existing dataset that includes 9,714 distinct URLs used in 3,376 Android mobile apps. We exercised these URLs twice within 14 months and investigated the HTTP headers and bodies. [Results] We found that more than 69% of tested apps suffer from three kinds of security smells, and that unprotected communication and misconfigurations are very common in servers. Moreover, source-code and version leaks, or the lack of update policies expose app servers to security risks. [Conclusions] Poor app server maintenance greatly hampers security.",
		"KEYWORDS": "scg-pub security snf-asa3 scg21 jb22",
		"DOI": "10.1145/3475716.3475780",
		"MONTH": "October",
		"URL": "http://scg.unibe.ch/archive/papers/Gadi21a.pdf"
	},
	{
		"key": "Gadi21b",
		"type": "inproceedings",
		"AUTHOR": "Gadient, Pascal and Gerig, Pascal and Nierstrasz, Oscar and Ghafari, Mohammad",
		"BOOKTITLE": "21st IEEE International Conference on Software Quality, Reliability, and Security (QRS)",
		"TITLE": "Phish What You Wish",
		"YEAR": "2021",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"ABSTRACT": "IT professionals have no simple tool to create phishing websites and raise the awareness of users. We developed a prototype that can dynamically mimic websites by using enriched screenshots, which requires no additional programming experience and is simple to set up. The generated websites are functional and remain up-to-date. We found that 98% of the hyperlinks in mimicked websites are functional with our tool, compared to 43% with the best competitor, and only two participants suspected phishing attempts at the time they were performing tasks with our prototype. This work intends to raise awareness for phishing attempts especially with local websites by providing an easy to use prototype to set up such phishing sites.",
		"KEYWORDS": "scg-pub security snf-asa3 scg21 jb22",
		"MONTH": "December",
		"URL": "http://scg.unibe.ch/archive/papers/Gadi21b.pdf",
		"DOI": "10.1109/QRS54544.2021.00113"
	},
	{
		"key": "Gadi21c",
		"type": "inproceedings",
		"AUTHOR": "Gadient, Pascal and Nierstrasz, Oscar and Ghafari, Mohammad",
		"BOOKTITLE": "21st IEEE International Conference on Software Quality, Reliability, and Security (QRS)",
		"TITLE": "Security Header Fields in HTTP Clients",
		"YEAR": "2021",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"ABSTRACT": "HTTP headers are commonly used to establish web communications, and some of them are relevant for security. However, we have only little information about the usage and support of security-relevant headers in mobile applications. We explored the adoption of such headers in mobile app communication by querying 9,714 distinct URLs that were used in 3,376 apps and collected each server's response information. We discovered that support for secure HTTP header fields is absent in all major HTTP clients, and it is barely provided with any server response. Based on these results, we discuss opportunities for improvement particularly to reduce the likelihood of data leaks and arbitrary code execution. We advocate more comprehensive use of existing HTTP headers and timely development of relevant web browser security features in HTTP client libraries.",
		"KEYWORDS": "scg-pub security snf-asa3 scg21 jb22",
		"MONTH": "December",
		"URL": "http://scg.unibe.ch/archive/papers/Gadi21c.pdf",
		"DOI": "10.1109/QRS54544.2021.00020"
	},
	{
		"key": "Gael03b",
		"type": "techreport",
		"ABSTRACT": "A single software fault may cause several tests to\n\t\t\t\t  break, if they cover the same methods. The coverage\n\t\t\t\t  sets of tests may not just overlap, but include one\n\t\t\t\t  another. This information could be of great use to\n\t\t\t\t  developers who would like to focus on the most\n\t\t\t\t  specific test that concerns a given fault.\n\t\t\t\t  Unfortunately, existing unit testing tools neither\n\t\t\t\t  gather nor exploit this information. We have\n\t\t\t\t  developed a simple approach that analyses a set of\n\t\t\t\t  test suites, and infers the partial order\n\t\t\t\t  corresponding to inclusion hierarchy of the coverage\n\t\t\t\t  sets. When several tests in an inclusion chain\n\t\t\t\t  break, we can guide the developer to the most\n\t\t\t\t  specific test in the chain. Our first experiments\n\t\t\t\t  with three case studies suggest that most unit tests\n\t\t\t\t  for typical applications are, in fact, comparable to\n\t\t\t\t  other tests, and can therefore be partially ordered.\n\t\t\t\t  Furthermore, we show that this partial order is\n\t\t\t\t  semantically meaningful, since faults that cause a\n\t\t\t\t  test to break will, in nearly all cases cause less\n\t\t\t\t  specific tests too break too.",
		"ADDRESS": "Universität Bern, Switzerland",
		"AUTHOR": "Markus Gaelli and Oscar Nierstrasz and Roel Wuyts",
		"CLASSIFICATION": "D.2.6 Programming Environments D.2.10 Design D.1.5 Object-oriented Programming; D.3.3 Language Constructs and Features",
		"CVS": "EgTecReportPartialOrdering",
		"GENERAL_TERMS": "Testing, Refactoring, Test Composition, Unit Tests, Reuse, Smalltalk, Test Prioritizing, OOP",
		"INSTITUTION": "Institut für Informatik",
		"KEYWORDS": "scg-none jb-none scg-pub skip-doi gaelli",
		"MISC": "gaelli",
		"MONTH": "September",
		"NOTE": "Technical Report",
		"NUMBER": "IAM-03-013",
		"TITLE": "Partial ordering tests by coverage sets",
		"URL": "http://scg.unibe.ch/archive/papers/Gael03bPartialOrderingTestsByCoverageSets.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gael03bPartialOrderingTestsByCoverageSets.pdf"
	},
	{
		"key": "Gael03c",
		"type": "inproceedings",
		"ABSTRACT": "While assertions of Design by Contract from Eiffel\n\t\t\t\t  found its way into the language-definitions of\n\t\t\t\t  Python and of Java SDK 1.4, current object-oriented\n\t\t\t\t  languages do not make the concepts of unit-testing\n\t\t\t\t  explicit in their definitions or meta-models. Not\n\t\t\t\t  having support of unit-testing in a programming\n\t\t\t\t  language makes it harder to compose and re-compose\n\t\t\t\t  test-scenarios and tests. We propose, that an\n\t\t\t\t  object-oriented language should include explicit\n\t\t\t\t  concepts for example objects, example methods and\n\t\t\t\t  instance-specific assertions. This concepts ease the\n\t\t\t\t  composition of complex test-scenarios, they help to\n\t\t\t\t  refactor the program with the tests and also to keep\n\t\t\t\t  the duration of the tests as low and the coverage of\n\t\t\t\t  the tests as high as possible.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Markus Gaelli",
		"BOOKTITLE": "Proceedings of the ECOOP '03 Workshop on Object-oriented Language Engineering for the Post-Java Era",
		"DOI": "10.1007/b98806",
		"ISBN": "978-3-540-22405-1",
		"KEYWORDS": "snf03 scg-none jb-none scg-pub gaelli",
		"MISC": "gaelli",
		"MONTH": "July",
		"NOTE": "Abstract only — full version availabe as technical report IAM-03-009",
		"PAGES": "143--153",
		"SERIES": "LNCS",
		"TITLE": "Test composition with example objects and example methods.",
		"URL": "http://scg.unibe.ch/archive/papers/Gael03aTestComposition.pdf",
		"VOLUME": "3013",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gael03aTestComposition.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/b98806"
	},
	{
		"key": "Gael04a",
		"type": "inproceedings",
		"ABSTRACT": "Current unit test frameworks present broken unit\n\t\t\t\t  tests in an arbitrary order, but developers want to\n\t\t\t\t  focus on the most specific ones first. We therefore\n\t\t\t\t  inferred a partial order of unit tests corresponding\n\t\t\t\t  to a coverage hierarchy of their sets of covered\n\t\t\t\t  method signatures: When several unit tests in this\n\t\t\t\t  coverage hierarchy break, we can guide the developer\n\t\t\t\t  to the test calling the smallest number of methods.\n\t\t\t\t  Our experiments with four case studies indicate that\n\t\t\t\t  this partial order is semantically meaningful, since\n\t\t\t\t  faults that cause a unit test to break generally\n\t\t\t\t  cause less specific unit tests to break as well.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Markus Gaelli and Michele Lanza and Oscar Nierstrasz and Roel Wuyts",
		"BOOKTITLE": "20th International Conference on Software Maintenance (ICSM 2004)",
		"CVS": "EgICSM2004",
		"DOI": "10.1109/ICSM.2004.1357796",
		"KEYWORDS": "scg-pub testing scg-none jb05 snf04 gaelli",
		"MISC": "gaelli",
		"PAGES": "114--123",
		"TITLE": "Ordering Broken Unit Tests for Focused Debugging",
		"URL": "http://scg.unibe.ch/archive/papers/Gael04aOrderingBrokenUnitTestsForFocusedDebugging.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gael04aOrderingBrokenUnitTestsForFocusedDebugging.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.2004.1357796"
	},
	{
		"key": "Gael04c",
		"type": "inproceedings",
		"ABSTRACT": "Although unit testing is essential for programming,\n\t\t\t\t  current languages only barely support the developer\n\t\t\t\t  in composing unit tests into new ones or in\n\t\t\t\t  navigating between unit tests and their\n\t\t\t\t  corresponding methods under test. We have taken\n\t\t\t\t  several Smalltalk programs and analyzed the\n\t\t\t\t  relationships between unit tests and methods under\n\t\t\t\t  test, and the re- lationships amongst unit tests.\n\t\t\t\t  First results indicate that most unit tests can be\n\t\t\t\t  seen or at least decomposed into commands which\n\t\t\t\t  focus on single methods, and that large portions of\n\t\t\t\t  unit tests overlap each other. But these\n\t\t\t\t  relationships between unit tests and methods under\n\t\t\t\t  test are not reflected in current languages. We\n\t\t\t\t  therefore first conceptually extend the meta-model\n\t\t\t\t  of Smalltalk with one-method commands so that unit\n\t\t\t\t  tests become both com- posable and navigable. Then\n\t\t\t\t  we introduce a first lightweight implementation of\n\t\t\t\t  this meta model using method comments to\n\t\t\t\t  differentiate between the several test phases of\n\t\t\t\t  existing XUnit test case methods.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Markus Gaelli and Oscar Nierstrasz and Stéphane Ducasse",
		"BOOKTITLE": "OOPSLA Workshop on Revival of Dynamic Languages",
		"CVS": "EgRDL2004",
		"KEYWORDS": "snf05 scg-pub skip-doi gaelli scg-none jb05",
		"MONTH": "October",
		"TITLE": "One-Method Commands: Linking Methods and Their Tests",
		"URL": "http://scg.unibe.ch/archive/papers/Gael04cLinkingMethodsAndTests.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gael04cLinkingMethodsAndTests.pdf"
	},
	{
		"key": "Gael04d",
		"type": "inproceedings",
		"AUTHOR": "Markus Gaelli",
		"BOOKTITLE": "5th International Conference on Extreme Programming and Agile Processes in Software Engineering (XP 2004)",
		"DOI": "10.1007/b98150",
		"ISBN": "978-3-540-22137-1",
		"KEYWORDS": "scg-pub testing scg-none jb05 snf04 skip-abstract gaelli",
		"MISC": "gaelli",
		"MONTH": "June",
		"PAGES": "317",
		"SERIES": "LNCS",
		"TITLE": "PhD-Symposium: Correlating Unit Tests and Methods under Test",
		"URL": "http://scg.unibe.ch/archive/papers/Gael04dCorrelatingUnitTestsAndMethodsUnderTest.pdf",
		"VOLUME": "3092",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gael04dCorrelatingUnitTestsAndMethodsUnderTest.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/b98150"
	},
	{
		"key": "Gael05a",
		"type": "inproceedings",
		"ABSTRACT": "Not all unit tests are alike. Some tests are simple\n\t\t\t\t  one-liners, while others contain a battery of\n\t\t\t\t  assertions. Certain tests focus on a single method,\n\t\t\t\t  while others test interactions between methods.\n\t\t\t\t  There are even tests that do not contain assertions\n\t\t\t\t  at all. This can make it difficult for a developer\n\t\t\t\t  to understand which methods are tested by which\n\t\t\t\t  tests, to what degree they are tested, and what to\n\t\t\t\t  take into account while refactoring. We have\n\t\t\t\t  manually analyzed the test base of a large existing\n\t\t\t\t  object-oriented system in order to derive a first\n\t\t\t\t  taxonomy of unit tests. We have then developed some\n\t\t\t\t  simple tools to semi-automatically categorize tests\n\t\t\t\t  according to this taxonomy, and applied it to two\n\t\t\t\t  case studies. Beside explaining our taxonomy, we\n\t\t\t\t  report on our initial results using it, namely that\n\t\t\t\t  a majority of unit tests focus on single methods and\n\t\t\t\t  that our lightweight automatic categorization could\n\t\t\t\t  already classify more than 50 of these single\n\t\t\t\t  method commands.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Markus Gaelli and Michele Lanza and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of 13th International Smalltalk Conference (ISC'03)",
		"CVS": "EgESUG2005",
		"KEYWORDS": "scg-pub skip-doi scg-none jb06 snf05 testing unit tests gaelli",
		"MISC": "gaelli",
		"MONTH": "September",
		"TITLE": "Towards a Taxonomy of SUnit Tests",
		"URL": "http://scg.unibe.ch/archive/papers/Gael05aTowardsATaxonomyOfUnitTests.pdf",
		"URL2": "http://www.esug.org/conferences/thirteenthinternationalconference2005/researchconference/acceptedpapers/",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gael05aTowardsATaxonomyOfUnitTests.pdf%20http://www.esug.org/conferences/thirteenthinternationalconference2005/researchconference/acceptedpapers/"
	},
	{
		"key": "Gael05b",
		"type": "inproceedings",
		"ABSTRACT": "If we were to apply the testing techniques of\n\t\t\t\t  object-oriented systems prescribed by the XUnit\n\t\t\t\t  framework to a car factory, the result would be an\n\t\t\t\t  inefficient process: A tire would be created,\n\t\t\t\t  quality assured and then thrown away, only to be\n\t\t\t\t  recreated later to test the functionality of the\n\t\t\t\t  whole car. XUnit makes it difficult to reuse\n\t\t\t\t  intermediate results of low level unit tests. As a\n\t\t\t\t  consequence a higher level unit test is forced to\n\t\t\t\t  recreate test scenarios which were already created\n\t\t\t\t  by lower level unit tests. This duplicated testing\n\t\t\t\t  effort is time-consuming both for setting up new\n\t\t\t\t  scenarios and for running the tests. To address this\n\t\t\t\t  problem we suggest a semi-automatic approach to\n\t\t\t\t  compose tests. First we describe how we can detect\n\t\t\t\t  candidates of composable test cases by partially\n\t\t\t\t  ordering their sets of covered method signatures,\n\t\t\t\t  then we present techniques to refactor unit tests\n\t\t\t\t  accordingly.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Markus Gaelli and Orla Greevy and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of SPLiT 2005 (2nd International Workshop on Software Product Line Testing)",
		"CVS": "EgSplit2005",
		"KEYWORDS": "scg-pub scg-none jb-none skip-doi gaelli",
		"MISC": "gaelli",
		"MONTH": "September",
		"TITLE": "Composing Unit Tests",
		"URL": "http://scg.unibe.ch/archive/papers/Gael05bComposingUnitTests.pdf",
		"URL2": "http://www.biglever.com/split2005/Presentations/SPLiT2005_Proceedings.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gael05bComposingUnitTests.pdf%20http://www.biglever.com/split2005/Presentations/SPLiT2005_Proceedings.pdf"
	},
	{
		"key": "Gael06a",
		"type": "inproceedings",
		"ABSTRACT": "Creating ones own games has been the main motiva-\n\t\t\t\t  tion for many people to learn programming. But the\n\t\t\t\t  barrier to learn a general purpose programming\n\t\t\t\t  language is very high, especially if some positive\n\t\t\t\t  results can only be expected after having manually\n\t\t\t\t  written more than 100 lines of code. With this paper\n\t\t\t\t  we first motivate potential users by showing that\n\t\t\t\t  one can create classic board- and arcade games like\n\t\t\t\t  Lights Out, TicTacToe, or Pacman within the playful\n\t\t\t\t  and constructivist visual learning environment Etoys\n\t\t\t\t  dragging together only a few lines of code. Then we\n\t\t\t\t  present recurring idioms which helped to develop\n\t\t\t\t  these games with only a few lines of code.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Markus Gaelli and Oscar Nierstrasz and Serge Stinckwich",
		"BOOKTITLE": "Proceedings of C5 2006 (The Fourth International Conference on Creating, Connecting and Collaborating through Computing)",
		"CVS": "EgGamesCCC2005",
		"DOI": "10.1109/C5.2006.20",
		"KEYWORDS": "scg-pub scg-none jb06 snf06 games idioms pattern visprog visual languages gaelli",
		"MISC": "gaelli",
		"MONTH": "January",
		"PAGES": "222--321",
		"TITLE": "Idioms for Composing Games with Etoys",
		"URL": "http://scg.unibe.ch/archive/papers/Gael06aC5.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gael06aC5.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/C5.2006.20"
	},
	{
		"key": "Gael07a",
		"type": "inproceedings",
		"ABSTRACT": "Understanding and maintaining complex software\n\t\t\t\t  systems is a difficult task. In principle, tests can\n\t\t\t\t  be a good source of information about how the system\n\t\t\t\t  works. Unfortunately, tests are frequently\n\t\t\t\t  unstructured and disconnected from each other and\n\t\t\t\t  from their units under test. We propose a new\n\t\t\t\t  approach to organizing unit tests in which tests\n\t\t\t\t  produce examples of their units under tests which\n\t\t\t\t  also can be reused for composing higher-level tests.\n\t\t\t\t  The approach is based on the Eg meta-model, which\n\t\t\t\t  classifies tests according to their granularity and\n\t\t\t\t  their goals. We have developed the EgBrowser, an\n\t\t\t\t  experimental tool for specifying tests that conform\n\t\t\t\t  to the Eg metamodel while keeping track of the\n\t\t\t\t  connection between tests themselves and their units\n\t\t\t\t  under test. Initial usability studies suggest that\n\t\t\t\t  the approach is both easy to learn and more\n\t\t\t\t  efficient than the programmatic approach to\n\t\t\t\t  developing tests.",
		"ANNOTE": "internationalconference internationaljournal",
		"AUTHOR": "Markus Gaelli and Rafael Wampfler and Oscar Nierstrasz",
		"BOOKTITLE": "Journal of Object Technology, Special Issue. Proceedings of TOOLS Europe 2007",
		"CACHED": "http://scg.unibe.ch/archive/papers/Gael07aComposingTests.pdf",
		"DOI": "10.5381/jot.2007.6.9.a4",
		"KEYWORDS": "scg07 scg-pub skip-doi snf07 jb08 gaelli",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "71--86",
		"PEERREVIEW": "yes",
		"TITLE": "Composing Tests from Examples",
		"URL": "http://www.jot.fm/issues/issue_2007_10/paper4.pdf",
		"URL2": "http://www.jot.fm/contents/issue_2007_10/paper4.html",
		"VOLUME": "6/9",
		"YEAR": "2007",
		"BDSK-URL-1": "http://www.jot.fm/issues/issue_2007_10/paper4/index.html%20http://www.jot.fm/issues/issue_2007_10/paper4.pdf"
	},
	{
		"key": "Gens02a",
		"type": "book",
		"ABSTRACT": "This Handbook presents the PECOS approach for\n\t\t\t\t  developing field device software. It has been\n\t\t\t\t  written for the developer who wants to apply the\n\t\t\t\t  method in a realistic setting. By following this\n\t\t\t\t  tutorial the reader will get a good understanding of\n\t\t\t\t  PECOS and will learn how to use PECOS to develop\n\t\t\t\t  software for embedded real-time systems.",
		"ANNOTE": "notrefereed handbook",
		"AUTHOR": "Thomas Genssler and Alexander Christoph and Benedikt Schulz and Michael Winter and Chris M. Stich and Christian Zeidler and Peter Müller and Andreas Stelter and Oscar Nierstrasz and Stéphane Ducasse and Gabriela Arévalo and Roel Wuyts and Peng Liang and Bastiaan Schönhage and Reinier van den Born",
		"KEYWORDS": "olit scg-pub skip-doi scg-none jb02 pecos arevalo stefPub",
		"MONTH": "September",
		"PUBLISHER": "The Pecos Consortium",
		"TITLE": "PECOS in a Nutshell",
		"URL": "http://www.pecos-project.org/public_documents/pecosHandbook.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://www.pecos-project.org/public_documents/pecosHandbook.pdf"
	},
	{
		"key": "Gens02b",
		"type": "inproceedings",
		"ABSTRACT": "Software is more and more becoming the major cost\n\t\t\t\t  factor for embedded devices. Already today, software\n\t\t\t\t  accounts for more than 50 percent of the development\n\t\t\t\t  costs of such a device. However, software\n\t\t\t\t  development practices in this area lag far behind\n\t\t\t\t  those in the traditional software industry. Reuse is\n\t\t\t\t  hardly ever heard of in some areas, development from\n\t\t\t\t  scratch is common practice and component-based\n\t\t\t\t  software is usually a foreign word. PECOS is a\n\t\t\t\t  collaborative project between industrial and\n\t\t\t\t  research partners that seeks to enable\n\t\t\t\t  component-based technology for a certain class of\n\t\t\t\t  embedded systems known as \"field devices\" by taking\n\t\t\t\t  into account the specific properties of this\n\t\t\t\t  application area. In this paper we introduce a\n\t\t\t\t  component model for field device software.\n\t\t\t\t  Furthermore we report on the PECOS component\n\t\t\t\t  composition language CoCo and the mapping from CoCo\n\t\t\t\t  to Java and C++.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Thomas Genßler and Oscar Nierstrasz and Bastiaan Schönhage",
		"BOOKTITLE": "Proc. International Conference on Compilers, Architectures and Synthesis for Embedded Systems",
		"DOI": "10.1145/581630.581634",
		"KEYWORDS": "olit pecos scg-pub scg-none jb04",
		"TITLE": "Components for Embedded Software — The PECOS Approach",
		"URL": "http://scg.unibe.ch/archive/pecos/public_documents/Gens02b.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/pecos/public_documents/Gens02b.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/581630.581634"
	},
	{
		"key": "Ghaf17a",
		"type": "article",
		"AUTHOR": "Ghafari, Mohammad and Rubinov, Konstantin and Pourhashem K., Mohammad Mehdi",
		"TITLE": "Mining unit test cases to synthesize API usage examples",
		"JOURNAL": "Journal of Software: Evolution and Process",
		"ISSN": "2047-7481",
		"VOLUME": "29",
		"NUMBER": "12",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"URL": "https://www.researchgate.net/profile/Mohammad_Ghafari3/publication/312669557_Mining_unit_test_cases_to_synthesize_API_usage_examples/links/5a0ab38c45851551b78d51c9/Mining-unit-test-cases-to-synthesize-API-usage-examples.pdf",
		"DOI": "10.1002/smr.1841",
		"PAGES": "e1841--n/a",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb17",
		"YEAR": "2017",
		"NOTE": "e1841 smr.1841",
		"ABSTRACT": "Software developers study and reuse existing source code to understand how to properly use application programming interfaces (APIs). However, manually finding sufficient and adequate code examples for a given API is a difficult and a time-consuming activity. Existing approaches to find or generate examples assume availability of a reasonable set of client code that uses the API. This assumption does not hold for newly released API libraries, non-widely used APIs, nor private ones.In this work we reuse the important information that is naturally present in test code to circumvent the lack of usage examples for an API when other sources of client code are not available. We propose an approach for automatically identifying the most representative API uses within each unit test case. We then develop an approach to synthesize API usage examples by extracting relevant statements representing the usage of such APIs. We compare the output of a prototype implementation of our approach to both human-written examples and to a state-of-the-art approach. The obtained results are encouraging; the examples automatically generated with our approach are superior to the state-of-the-art approach and highly similar to the manually constructed examples."
	},
	{
		"key": "Ghaf17b",
		"type": "inproceedings",
		"AUTHOR": "Ghafari, Mohammad and Moradi, Hamidreza",
		"BOOKTITLE": "2017 IEEE 24th International Conference on Software Analysis, Evolution and Reengineering (SANER)",
		"TITLE": "A framework for classifying and comparing source code recommendation systems",
		"YEAR": "2017",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"PAGES": "555-556",
		"ABSTRACT": "The use of Application Programming Interfaces (APIs) is pervasive in software systems; it makes the development of new software much easier, but remembering large APIs with sophisticated usage protocol is arduous for software developers. Code recommendation systems alleviate this burden by providing developers with a ranked list of API usages that are estimated to be most useful to their development tasks. The promise of these systems has motivated researchers to invest considerable effort to develop many of them over the past decade, yet the achievements are not evident. To assess the state of the art in code recommendation, we propose a framework for classifying and comparing these systems. We hope the framework will help the community to conduct a systematic study to gain insight into how much code recommendation has so far achieved, in both research and practice.",
		"KEYWORDS": "scg-pub snf-none scg17 jb17",
		"DOI": "10.1109/SANER.2017.7884674",
		"URL": "http://dx.doi.org/10.1109/SANER.2017.7884674"
	},
	{
		"key": "Ghaf17c",
		"type": "inproceedings",
		"AUTHOR": "Ghafari, Mohammad and Gadient, Pascal and Nierstrasz, Oscar",
		"BOOKTITLE": "17th IEEE International Working Conference on Source Code Analysis and Manipulation (SCAM)",
		"TITLE": "Security Smells in Android",
		"YEAR": "2017",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"ABSTRACT": "The ubiquity of smartphones, and their very broad capabilities and usage, make the security of these devices tremendously important. Unfortunately, despite all progress in security and privacy mechanisms, vulnerabilities continue to proliferate. Research has shown that many vulnerabilities are due to insecure programming practices. However, each study has often dealt with a specific issue, making the results less actionable for practitioners. To promote secure programming practices, we have reviewed related research, and identified avoidable vulnerabilities in Android-run devices and the security code smells that indicate their presence. In particular, we explain the vulnerabilities, their corresponding smells, and we discuss how they could be eliminated or mitigated during development. Moreover, we develop a lightweight static analysis tool and discuss the extent to which it successfully detects several vulnerabilities in about 46,000 apps hosted by the official Android market.",
		"KEYWORDS": "scg-pub security snf-asa2 scg17 jb18",
		"DOI": "10.1109/SCAM.2017.24",
		"PAGES": "121-130",
		"MONTH": "September",
		"URL": "http://scg.unibe.ch/archive/papers/Ghaf17c.pdf"
	},
	{
		"key": "Ghaf19a",
		"type": "inproceedings",
		"AUTHOR": "Mohammad Ghafari and Markus Eggiman and Oscar Nierstrasz",
		"BOOKTITLE": "2019 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)",
		"TITLE": "Testability First!",
		"YEAR": "2019",
		"PAGES": "1-6",
		"ABSTRACT": "Background: The pivotal role of testing in\n\t\thigh-quality software production has driven a significant\n\t\teffort in evaluating and assessing testing practices. Aims:\n\t\tWe explore the state of testing in a large industrial\n\t\tproject over an extended period. Method: We study the\n\t\tinterplay between bugs in the project and its test cases,\n\t\tand interview developers and stakeholders to uncover\n\t\treasons underpinning our observations. Results: We realized\n\t\tthat testing is not well adopted, and that\n\t\ttestability(i.e., ease of testing) is low. We found that\n\t\tdevelopers tended to abandon writing tests when they\n\t\tassessed the effort to be high. Frequent changes in\n\t\trequirements and pressure to add new features also hindered\n\t\tdevelopers from writing tests. Conclusions: Regardless of\n\t\tthe debates on test first or later, we hypothesize that the\n\t\tunderlying reasons for poor test quality are rooted in a\n\t\tlack of attention to testing early in the development of a\n\t\tsoftware component, leading to poor testability of the\n\t\tcomponent. However, testability is usually overlooked in\n\t\tresearch that studies the impact of testing practices, and\n\t\tshould be explicitly taken into account.",
		"KEYWORDS": "scg-pub snf-asa3 scg19 jb19",
		"DOI": "10.1109/ESEM.2019.8870170",
		"URL": "http://scg.unibe.ch/archive/papers/Ghaf19a-TestabilityFirst.pdf",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"ANNOTE": "internationalconference",
		"ISSN": "1949-3770",
		"MONTH": "sep"
	},
	{
		"key": "Girb04a",
		"type": "inproceedings",
		"ABSTRACT": "Analyzing historical information can show how a\n\t\t\t\t  software system evolved into its current state, but\n\t\t\t\t  it can also show which parts of the system are more\n\t\t\t\t  evolution prone. Yet, historical analysis implies\n\t\t\t\t  processing a vast amount of information which makes\n\t\t\t\t  the interpretation difficult. To address this issue,\n\t\t\t\t  we introduce the notion of history of source code\n\t\t\t\t  artifacts as a first class entity and define\n\t\t\t\t  measurements which summarize the evolution of such\n\t\t\t\t  entities. We then use these measurements to define\n\t\t\t\t  polymetric views for visualizing the effect of time\n\t\t\t\t  on class hierarchies. We show the application of our\n\t\t\t\t  approach on one large open source case study and\n\t\t\t\t  reveal how we can classify the class hierarchies\n\t\t\t\t  based on their history.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Tudor Gîrba and Michele Lanza",
		"BOOKTITLE": "WOOR 2004 (5th ECOOP Workshop on Object-Oriented Reengineering)",
		"KEYWORDS": "scg-pub skip-doi evolution metrics visualization van hismo girba recast04 scg-none jb04 moose-pub",
		"TITLE": "Visualizing and Characterizing the Evolution of Class Hierarchies",
		"URL": "http://scg.unibe.ch/archive/papers/Girb04aHierarchiesEvolution.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Girb04aHierarchiesEvolution.pdf"
	},
	{
		"key": "Girb05b",
		"type": "inproceedings",
		"ABSTRACT": "Understanding how software systems evolve is useful\n\t\t\t\t  from different perspectives: reverse engineering,\n\t\t\t\t  empirical studies etc.. For an effective\n\t\t\t\t  understanding we need an explicit meta-model. We\n\t\t\t\t  introduce Hismo, a meta-model which is centered\n\t\t\t\t  around the notion of history and we show how we can\n\t\t\t\t  obtain it from a snapshot meta-model. Based on our\n\t\t\t\t  experience in developing the Hismo reverse\n\t\t\t\t  engineering system, we show how we can transform a\n\t\t\t\t  snapshot meta-model in a history metamodel.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Tudor Gîrba and Jean-Marie Favre and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of 2nd International Workshop on Meta-Models and Schemas for Reverse Engineering (ATEM 2004)",
		"DOI": "10.1016/j.entcs.2005.07.005",
		"KEYWORDS": "scg-pub evolution meta-modeling hismo van moose-pub recast05 jointERCIM girba stefPub scg-none jb05",
		"PAGES": "57--64",
		"TITLE": "Using Meta-Model Transformation to Model Software Evolution",
		"URL": "http://scg.unibe.ch/archive/papers/Girb05bMetaModelTransATEM2004.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Girb05bMetaModelTransATEM2004.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.entcs.2005.07.005"
	},
	{
		"key": "Girb04b",
		"type": "inproceedings",
		"ABSTRACT": "Knowing where to start reverse engineering a large\n\t\t\t\t  software system, when no information other than the\n\t\t\t\t  system`s source code itself is available, is a\n\t\t\t\t  daunting task. Having the history of the code (i.e.,\n\t\t\t\t  the versions) could be of help if this would not\n\t\t\t\t  imply analyzing a huge amount of data. In this paper\n\t\t\t\t  we present an approach for identifying candidate\n\t\t\t\t  classes for reverse engineering and reengineering\n\t\t\t\t  efforts. Our solution is based on summarizing the\n\t\t\t\t  changes in the evolution of object-oriented software\n\t\t\t\t  systems by defining history measurements. Our\n\t\t\t\t  approach, named Yesterday`s Weather, is an analysis\n\t\t\t\t  based on the retrospective empirical observation\n\t\t\t\t  that classes which changed the most in the recent\n\t\t\t\t  past also suffer important changes in the near\n\t\t\t\t  future. We apply this approach on two case studies\n\t\t\t\t  and show how we can obtain an overview of the\n\t\t\t\t  evolution of a system and pinpoint its classes that\n\t\t\t\t  might change in the next versions.",
		"ACCEPTNUM": "38",
		"ACCEPTTOTAL": "122",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Tudor Gîrba and Stéphane Ducasse and Michele Lanza",
		"BOOKTITLE": "Proceedings of 20th IEEE International Conference on Software Maintenance (ICSM'04)",
		"DOI": "10.1109/ICSM.2004.1357788",
		"KEYWORDS": "scg-pub evolution metrics hismo stefPub van moose-pub girba recast05 scg-none jb05",
		"LOCATION": "Illinois, USA",
		"MISC": "acceptance rate: 38/122 = 31",
		"MONTH": "September",
		"PAGES": "40--49",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "Yesterday's Weather: Guiding Early Reverse Engineering Efforts by Summarizing the Evolution of Changes",
		"URL": "http://scg.unibe.ch/archive/papers/Girb04bYesterdayWeather.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Girb04bYesterdayWeather.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.2004.1357788"
	},
	{
		"key": "Girb04d",
		"type": "inproceedings",
		"ABSTRACT": "Software system need to change over time to cope\n\t\t\t\t  with the new requirements. Furthermore, due to\n\t\t\t\t  design decisions, the new requirements happen to\n\t\t\t\t  crosscut the system's structure. Understanding how\n\t\t\t\t  changes appear in the system can reveal hidden\n\t\t\t\t  dependencies between different parts of the system.\n\t\t\t\t  We propose to group entities that change together\n\t\t\t\t  according to a logical expression that specifies the\n\t\t\t\t  change condition. Furthermore, we can group entities\n\t\t\t\t  at different levels of abstraction (i.e., method,\n\t\t\t\t  class, package). Our approach is based on an\n\t\t\t\t  explicit history meta model that centers around the\n\t\t\t\t  notion of history and which enables the definition\n\t\t\t\t  of historical measurements which summarize the\n\t\t\t\t  changes. We apply our approach on two large case\n\t\t\t\t  studies and show how we can identify groups of\n\t\t\t\t  related entities and detect bad smells.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Tudor Gîrba and Stéphane Ducasse and Radu Marinescu and Daniel Raţiu",
		"BOOKTITLE": "Ninth IEEE Workshop on Empirical Studies of Software Maintenance",
		"KEYWORDS": "scg-pub skip-doi evolution van metrics smell hismo stefPub recast05 girba scg-none jb05 moose-pub",
		"TITLE": "Identifying Entities That Change Together",
		"URL": "http://scg.unibe.ch/archive/papers/Girb04dEntitiesChangeTogether.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Girb04dEntitiesChangeTogether.pdf"
	},
	{
		"key": "Girb05a",
		"type": "inproceedings",
		"ABSTRACT": "Analyzing historical information can show how a\n\t\t\t\t  software system evolved into its current state,\n\t\t\t\t  which parts of the system are stable and which have\n\t\t\t\t  changed more. However, historical analysis implies\n\t\t\t\t  processing a vast amount of information making the\n\t\t\t\t  interpretation of the results difficult. To address\n\t\t\t\t  this issue, we introduce the notion of the history\n\t\t\t\t  of source code artifacts as a first class entity and\n\t\t\t\t  define measurements which summarize the evolution of\n\t\t\t\t  such entities. We use these measurements to define\n\t\t\t\t  rules by which to detect different characteristics\n\t\t\t\t  of the evolution of class hierarchies. Furthermore,\n\t\t\t\t  we discuss the results we obtained by visualizing\n\t\t\t\t  them using a polymetric view. We apply our approach\n\t\t\t\t  on two large open source case studies and classify\n\t\t\t\t  their class hierarchies based on their history.",
		"ACCEPTNUM": "33",
		"ACCEPTTOTAL": "81",
		"ADDRESS": "Los Alamitos CA",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Tudor Gîrba and Michele Lanza and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of 9th European Conference on Software Maintenance and Reengineering (CSMR'05)",
		"DOI": "10.1109/CSMR.2005.15",
		"INRIA": "hors",
		"KEYWORDS": "scg-pub evolution visualization metrics van recast05 girba stefPub scg-none jb05 moose-pub",
		"MISC": "acceptance rate: 33/81 = 41 ",
		"PAGES": "2--11",
		"PUBLISHER": "IEEE Computer Society",
		"RATE": "41%",
		"SELECTIF": "non",
		"TITLE": "Characterizing the Evolution of Class Hierarchies",
		"URL": "http://scg.unibe.ch/archive/papers/Girb05aHierarchiesEvolution.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Girb05aHierarchiesEvolution.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/CSMR.2005.15"
	},
	{
		"key": "Girb05c",
		"type": "inproceedings",
		"ABSTRACT": "As systems evolve their structure change in ways not\n\t\t\t\t  expected upfront. As time goes by, the knowledge of\n\t\t\t\t  the developers becomes more and more critical for\n\t\t\t\t  the process of understanding the system. That is,\n\t\t\t\t  when we want to understand a certain issue of the\n\t\t\t\t  system we ask the knowledgeable developers. Yet, in\n\t\t\t\t  large systems, not every developer is knowledgeable\n\t\t\t\t  in all the details of the system. Thus, we would\n\t\t\t\t  want to know which developer is knowledgeable in the\n\t\t\t\t  issue at hand. In this paper we make use of the\n\t\t\t\t  mapping between the changes and the author\n\t\t\t\t  identifiers (e.g., user names) provided by\n\t\t\t\t  versioning repositories. We first define a\n\t\t\t\t  measurement for the notion of code ownership. We use\n\t\t\t\t  this measurement to define the Ownership Map\n\t\t\t\t  visualization to understand when and how different\n\t\t\t\t  developers interacted in which way and in which part\n\t\t\t\t  of the system. We report the results we obtained on\n\t\t\t\t  several large systems.",
		"ACCEPTNUM": "13",
		"ACCEPTTOTAL": "54",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Tudor Gîrba and Adrian Kuhn and Mauricio Seeberger and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of International Workshop on Principles of Software Evolution (IWPSE 2005)",
		"CVS": "ChroniaIWPSE2005",
		"DOI": "10.1109/IWPSE.2005.21",
		"INRIA": "hors",
		"KEYWORDS": "scg-pub evolution visualization authors stefPub girba recast06 scg-none jb06 moose-pub chronia akuhn",
		"LOCATION": "Lisbon, Portugal",
		"MISC": "acceptance rate: 13/54 = 24",
		"PAGES": "113--122",
		"PUBLISHER": "IEEE Computer Society Press",
		"RATE": "24%",
		"SELECTIF": "oui",
		"TITLE": "How Developers Drive Software Evolution",
		"URL": "http://scg.unibe.ch/archive/papers/Girb05cOwnershipMap.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Girb05cOwnershipMap.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/IWPSE.2005.21"
	},
	{
		"key": "Girb06a",
		"type": "article",
		"ABSTRACT": "The histories of software systems hold useful\n\t\t\t\t  information when reasoning about the systems at hand\n\t\t\t\t  or when reasoning about general laws of software\n\t\t\t\t  evolution. Over the past 30 years more and more\n\t\t\t\t  research has been spent on understanding software\n\t\t\t\t  evolution. However, the approaches developed so far\n\t\t\t\t  do not rely on an explicit meta-model, and thus,\n\t\t\t\t  they make it difficult to reuse or compare their\n\t\t\t\t  results. We argue that there is a need for an\n\t\t\t\t  explicit meta-model for software evolution analysis.\n\t\t\t\t  We present a survey of the evolution analyses and\n\t\t\t\t  deduce a set of requirements that an evolution\n\t\t\t\t  meta-model should have. We define, Hismo, a\n\t\t\t\t  meta-model in which history is modeled as an\n\t\t\t\t  explicit entity. Hismo adds a time layer on top of\n\t\t\t\t  structural information, and provides a common\n\t\t\t\t  infrastructure for expressing and combining\n\t\t\t\t  evolution analyses and structural analyses. We\n\t\t\t\t  validate the usefulness of our a meta-model by\n\t\t\t\t  presenting how different analyses are expressed on\n\t\t\t\t  it.",
		"AERES": "ACL",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Tudor Gîrba and Stéphane Ducasse",
		"IMPACTFACTOR": "0.457 (SCI 2005)",
		"INRIA": "hors",
		"JOURNAL": "Journal of Software Maintenance: Research and Practice (JSME)",
		"KEYWORDS": "hasler07 scg-pub skip-doi recast06 scg-none jb06 stefPub mooseCincom moose-pub van girba snf-actsc norex06 meta-modeling hismo evolution",
		"MISC": "SCI impact factor 0.457 (2005)",
		"PAGES": "207--236",
		"PUBLISHER": "John Wiley and Sons, Ltd.",
		"SELECTIF": "non",
		"TITLE": "Modeling History to Analyze Software Evolution",
		"URL": "http://scg.unibe.ch/archive/papers/Girb06aHismo.pdf",
		"VOLUME": "18",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Girb06aHismo.pdf"
	},
	{
		"key": "Girb07a",
		"type": "inproceedings",
		"ABSTRACT": "Software systems need to change over time to cope\n\t\t\t\t  with new requirements, and due to design decisions,\n\t\t\t\t  the changes happen to crosscut the system's\n\t\t\t\t  structure. Understanding how changes appear in the\n\t\t\t\t  system can reveal hidden dependencies between\n\t\t\t\t  different entities of the system. We propose the\n\t\t\t\t  usage of concept analysis to identify groups of\n\t\t\t\t  entities that change in the same way and in the same\n\t\t\t\t  time. We apply our approach at different levels of\n\t\t\t\t  abstraction (i.e., method, class, package) and we\n\t\t\t\t  detect fine grained changes (i.e., statements were\n\t\t\t\t  added in a class, but no method was added there).\n\t\t\t\t  Concept analysis is a technique that identifies\n\t\t\t\t  entities that have the same properties, but it\n\t\t\t\t  requires manual inspection due to the large number\n\t\t\t\t  of candidates it detects. We propose a heuristic\n\t\t\t\t  that dramatically eliminate the false positives. We\n\t\t\t\t  apply our approach on two case studies and we show\n\t\t\t\t  how we can identify hidden dependencies and detect\n\t\t\t\t  bad smells.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Tudor Gîrba and Stéphane Ducasse and Adrian Kuhn and Radu Marinescu and Daniel Raţiu",
		"BOOKTITLE": "Proceedings of International Workshop on Principles of Software Evolution (IWPSE 2007)",
		"DOI": "10.1145/1294948.1294970",
		"INRIA": "hors",
		"ISBN": "978-1-59593-722-3",
		"KEYWORDS": "scg07 scg-pub snf-none evolution fca girba jb08 metrics moose-pub norex07 stefPub akuhn",
		"MEDIUM": "2",
		"PAGES": "83--89",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM Press",
		"SELECTIF": "non",
		"TITLE": "Using Concept Analysis to Detect Co-Change Patterns",
		"URL": "http://scg.unibe.ch/archive/papers/Girb07aCoChangePatterns.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Girb07aCoChangePatterns.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1294948.1294970"
	},
	{
		"key": "Girb15b",
		"type": "inproceedings",
		"ABSTRACT": "A picture tells a thousand words. We all know that. Then why are our development tools showing mainly text with so much obstinacy? Even when visualizations do make it into our tools, they typically do not make it past the periphery. Something is deeply wrong. We argue that visualizations must become pervasive in software development, and to accommodate this goal, the integrated development environments must change significantly.",
		"AUTHOR": "Gîrba, Tudor and Chiş, Andrei",
		"BOOKTITLE": "Proceedings of 3rd IEEE Working Conference on Software Visualization",
		"PAGES": "1--5",
		"PUBLISHER": "IEEE",
		"SERIES": "VISSOFT'15",
		"TITLE": "Pervasive Software Visualizations",
		"DOI": "10.1109/VISSOFT.2015.7332409",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"MONTH": "September",
		"YEAR": "2015",
		"KEYWORDS": "scg-pub scg15 jb16 snf-asa1, Andrei Chis, Tudor Girba, girba",
		"URL": "http://scg.unibe.ch/archive/papers/Girb15b-PervasiveSoftwareVisualizations.pdf"
	},
	{
		"key": "Gobl16a",
		"type": "article",
		"AUTHOR": "Carole Goble and James Howison and Claude Kirchner and Oscar Nierstrasz and Jurgen J. Vinju",
		"TITLE": "Engineering Academic Software (Dagstuhl Perspectives Workshop 16252)",
		"ABSTRACT": "This report documents the program and the outcomes of Dagstuhl Perspectives Workshop 16252 “Engineering Academic Software”.",
		"PAGES": "62--87",
		"JOURNAL": "Dagstuhl Reports",
		"ISSN": "2192-5283",
		"YEAR": "2016",
		"VOLUME": "6",
		"NUMBER": "6",
		"EDITOR": "",
		"PUBLISHER": "Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik",
		"ADDRESS": "Dagstuhl, Germany",
		"URL": "http://scg.unibe.ch/archive/papers/Gobl16a.pdf",
		"URN": "urn:nbn:de:0030-drops-67557",
		"DOI": "10.4230/DagRep.6.6.62",
		"ANNOTE": "Keywords: Scientific Software, Data Science, Software Engineering",
		"PEERREVIEW": "no",
		"MEDIUM": "1",
		"KEYWORDS": "scg-pub snf-none scg16 jb17"
	},
	{
		"key": "Gonz04a",
		"type": "misc",
		"ABSTRACT": "This report covers the activities of the 2nd\n\t\t\t\t  workshop on \"Object-Oriented Language Engineering\n\t\t\t\t  for the Post-Java Era\". We describe the motivation\n\t\t\t\t  that led to the organisation of a second edition of\n\t\t\t\t  the workshop. Relevant organisational aspects are\n\t\t\t\t  mentioned. The main part of the report consists of a\n\t\t\t\t  summary of Dave Thomas's invited talk, and a recount\n\t\t\t\t  of the presentations by the authors of position\n\t\t\t\t  papers. Comments given along the way by the\n\t\t\t\t  participants are included. Finally, some pointers to\n\t\t\t\t  related work and events are given.",
		"ANNOTE": "workshopproceedings",
		"AUTHOR": "Sebastian Gonzales and Wolgang Demeuter and Pascal Costanza and Stéphane Ducasse and Richard Gabriel and Theo D'hondt",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP'04 Workshop Reader)",
		"KEYWORDS": "scg-pub skip-doi scg-none jb04 stefPub recast04",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Report of the ECOOP'03 Workshop on Object-Oriented Language Engineering in Post-Java Era",
		"URL": "http://scg.unibe.ch/archive/papers/Gonz04aoolepje04-report.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gonz04aoolepje04-report.pdf"
	},
	{
		"key": "Gree05a",
		"type": "inproceedings",
		"ABSTRACT": "Software developers are constantly required to\n\t\t\t\t  modify and adapt features of an application in\n\t\t\t\t  response to changing requirements. The problem is\n\t\t\t\t  that just by reading the source code, it is\n\t\t\t\t  difficult to determine how classes and methods\n\t\t\t\t  contribute to the runtime behavior of features.\n\t\t\t\t  Moreover, dependencies between system features are\n\t\t\t\t  not obvious, consequently software maintenance\n\t\t\t\t  operations often result in unintended side effects.\n\t\t\t\t  To tackle these problems, we propose a compact\n\t\t\t\t  feature-driven approach (i.e. summarized trace\n\t\t\t\t  information) based on dynamic analysis to\n\t\t\t\t  characterize features and computational units of an\n\t\t\t\t  application. We extract execution traces to achieve\n\t\t\t\t  an explicit mapping between features and classes\n\t\t\t\t  using two complementary perspectives. We apply our\n\t\t\t\t  approach to two case studies and we report our\n\t\t\t\t  findings.",
		"ACCEPTNUM": "33",
		"ACCEPTTOTAL": "81",
		"ADDRESS": "Los Alamitos CA",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Orla Greevy and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of 9th European Conference on Software Maintenance and Reengineering (CSMR'05)",
		"CVS": "TraceScraperRevEng",
		"DOI": "10.1109/CSMR.2005.21",
		"INRIA": "hors",
		"KEYWORDS": "scg-pub greevy scg-none jb05 recast05 stefPub Feature Feature-Traces Dynamic Analysis Evolution moose-pub",
		"LOCATION": "Manchester, United Kingdom",
		"MISC": "acceptance rate: 33/81 = 41",
		"PAGES": "314--323",
		"PUBLISHER": "IEEE Computer Society",
		"RATE": "41%",
		"SELECTIF": "non",
		"TITLE": "Correlating Features and Code Using A Compact Two-Sided Trace Analysis Approach",
		"URL": "http://scg.unibe.ch/archive/papers/Gree05aTraceScraperCSMR2005Features.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gree05aTraceScraperCSMR2005Features.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/CSMR.2005.21"
	},
	{
		"key": "Gree05b",
		"type": "inproceedings",
		"ABSTRACT": "Software developers are often faced with the task of\n\t\t\t\t  maintaining or extending large and complex\n\t\t\t\t  applications, with which they are unfamiliar.\n\t\t\t\t  Typically change requests and bug reports are\n\t\t\t\t  expressed in terms of system features. Much of the\n\t\t\t\t  maintenance effort is spent trying to identify which\n\t\t\t\t  classes and methods provide functionality to\n\t\t\t\t  individual features. To tackle this problem, we\n\t\t\t\t  propose an approach based on dynamic analysis that\n\t\t\t\t  exploits the relationship between features and\n\t\t\t\t  software entities. Our definition of a feature is a\n\t\t\t\t  unit of observable behavior of a software system. We\n\t\t\t\t  apply our approach to a large open source\n\t\t\t\t  application and identify key classes and methods\n\t\t\t\t  which provide functionality to individual features.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Orla Greevy and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of WOOR 2005 (6th International Workshop on Object-Oriented Reengineering)",
		"CVS": "TraceScraperWOOR2005",
		"KEYWORDS": "scg-pub skip-doi greevy scg-none jb06 stefPub Feature Feature-Traces Dynamic Analysis Evolution moose-pub recast05",
		"MONTH": "July",
		"TITLE": "Characterizing the Functional Roles of Classes and Methods by Analyzing Feature Traces",
		"URL": "http://scg.unibe.ch/archive/papers/Gree05bTraceScraperWOOR2005.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gree05bTraceScraperWOOR2005.pdf"
	},
	{
		"key": "Gree05c",
		"type": "inproceedings",
		"ABSTRACT": "Many of the approaches that analyze software\n\t\t\t\t  evolution consider a static perspective of a system.\n\t\t\t\t  Static analysis approaches focus on the evolution of\n\t\t\t\t  static software entities such as packages, classes\n\t\t\t\t  and methods. Without knowledge of the roles software\n\t\t\t\t  entities play in system features, it is difficult to\n\t\t\t\t  interpret the motivation behind changes and\n\t\t\t\t  extensions in the code. To tackle this problem, we\n\t\t\t\t  propose an approach to software evolution analysis\n\t\t\t\t  that exploits the relationships between features and\n\t\t\t\t  software entities. Our definition of a feature is a\n\t\t\t\t  unit of observable behavior of a software system. We\n\t\t\t\t  define history measurements that summarize the\n\t\t\t\t  evolution of software entities from a feature\n\t\t\t\t  perspective. We show how we use our feature\n\t\t\t\t  perspective of software evolution to interpret\n\t\t\t\t  modifications and extensions to the code. We apply\n\t\t\t\t  our approach on two case studies and discuss our\n\t\t\t\t  findings.",
		"ACCEPTNUM": "55",
		"ACCEPTTOTAL": "180",
		"ADDRESS": "Los Alamitos",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Orla Greevy and Stéphane Ducasse and Tudor Gîrba",
		"BOOKTITLE": "Proceedings of 21st IEEE International Conference on Software Maintenance (ICSM'05)",
		"CVS": "TraceScraperICSM2005Evolution",
		"DOI": "10.1109/ICSM.2005.22",
		"INRIA": "hors",
		"KEYWORDS": "scg-pub girba greevy scg-none jb06 stefPub Features Feature-Traces Dynamic-Analysis Evolution history moose-pub recast06 listic",
		"MISC": "acceptance rate: 55/180 = 31",
		"MONTH": "September",
		"PAGES": "347--356",
		"PUBLISHER": "IEEE Computer Society",
		"RATE": "31%",
		"SELECTIF": "oui",
		"TITLE": "Analyzing Feature Traces to Incorporate the Semantics of Change in Software Evolution Analysis",
		"URL": "http://scg.unibe.ch/archive/papers/Gree05cTraceScraperICSM2005.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gree05cTraceScraperICSM2005.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.2005.22"
	},
	{
		"key": "Gree05d",
		"type": "inproceedings",
		"ABSTRACT": "Without a clear understanding of how features of a\n\t\t\t\t  software system are implemented, a maintenance\n\t\t\t\t  change in one part of the code may risk adversely\n\t\t\t\t  affecting other features. Feature implementation and\n\t\t\t\t  relationships between features are not explicit in\n\t\t\t\t  the code. To address this problem, we propose an\n\t\t\t\t  interactive 3D visualization technique based on a\n\t\t\t\t  combination of static and dynamic analysis which\n\t\t\t\t  enables the software developer to step through\n\t\t\t\t  visual representations of execution traces. We\n\t\t\t\t  visualize dynamic behaviors of execution traces in\n\t\t\t\t  terms of object creations and interactions and\n\t\t\t\t  represent this in the context of a static\n\t\t\t\t  class-hierarchy view of a system. We describe how we\n\t\t\t\t  apply our approach to a case study to visualize and\n\t\t\t\t  identify common parts of the code that are active\n\t\t\t\t  during feature execution.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Orla Greevy and Michele Lanza and Christoph Wysseier",
		"BOOKTITLE": "Proceedings of VISSOFT 2005 (3th IEEE International Workshop on Visualizing Software for Understanding)",
		"CVS": "TraceCrawlerVissoft2005",
		"KEYWORDS": "scg-pub skip-doi greevy scg-none jb06 Feature Feature-Traces Dynamic Analysis Evolution moose-pub recast06",
		"MONTH": "September",
		"PAGES": "114--119",
		"TITLE": "Visualizing Feature Interaction in 3-D",
		"URL": "http://scg.unibe.ch/archive/papers/Gree05dTraceCrawlerVissoft2005.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gree05dTraceCrawlerVissoft2005.pdf"
	},
	{
		"key": "Gree05e",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Orla Greevy and Abdelwahab Hamou-Lhadj and Andy Zaidman",
		"BOOKTITLE": "12th Working Conference on Software Maintenance and Reengineering (WCRE 2005)",
		"DOI": "10.1109/WCRE.2005.35",
		"KEYWORDS": "scg-pub skip-abstract greevy scg-none jb06 Dynamic Analysis moose-pub recast07",
		"MONTH": "September",
		"PAGES": "232--232",
		"TITLE": "Workshop on Program Comprehension through Dynamic Analysis (PCODA)",
		"URL": "http://www.lore.ua.ac.be/Events/PCODA2005/index.html http://www.lore.ua.ac.be/Events/PCODA2005/PCODA2005proceedings.pdf http://scg.unibe.ch/archive/papers/Gree05e-pcoda2005proceedings.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://www.lore.ua.ac.be/Events/PCODA2005/index.html%20http://www.lore.ua.ac.be/Events/PCODA2005/PCODA2005proceedings.pdf%20http://scg.unibe.ch/archive/papers/Gree05e-pcoda2005proceedings.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2005.35"
	},
	{
		"key": "Gree06a",
		"type": "inproceedings",
		"ABSTRACT": "The analysis of the runtime behavior of a software\n\t\t\t\t  system yields vast amounts of information, making\n\t\t\t\t  accurate interpretations difficult. Filtering or\n\t\t\t\t  compression techniques are often applied to reduce\n\t\t\t\t  the volume of data without loss of key information\n\t\t\t\t  vital for a specific analysis goal. Alternatively,\n\t\t\t\t  visualization is generally accepted as a means of\n\t\t\t\t  effectively representing large amounts of data. The\n\t\t\t\t  challenge lies in creating effective and expressive\n\t\t\t\t  visual representations that not only allows for a\n\t\t\t\t  global picture, but also enables us to inspect the\n\t\t\t\t  details of the large data sets. We define the focus\n\t\t\t\t  of our analysis to be the runtime behavior of\n\t\t\t\t  features. Static structural visualizations of a\n\t\t\t\t  system are typically represented in two dimensions.\n\t\t\t\t  We exploit a third dimension to visually represent\n\t\t\t\t  the dynamic information, namely object\n\t\t\t\t  instantiations and message sends. We introduce a\n\t\t\t\t  novel 3D visualization technique that supports\n\t\t\t\t  animation of feature behavior and integrates\n\t\t\t\t  zooming, panning, rotating and on-demand details. As\n\t\t\t\t  proof of concept, we apply our visualization\n\t\t\t\t  technique to feature execution traces of an example\n\t\t\t\t  system.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Orla Greevy and Michele Lanza and Christoph Wysseier",
		"BOOKTITLE": "Proceedings of SoftVis 2006 (ACM Symposium on Software Visualization)",
		"CVS": "TraceCrawlerSoftVis2006",
		"DOI": "10.1145/1148493.1148501",
		"KEYWORDS": "scg-pub greevy scg-none jb07 fb06 Feature Feature-Traces Dynamic Analysis 3D moose-pub recast07",
		"MEDIUM": "2",
		"MONTH": "September",
		"PEERREVIEW": "yes",
		"TITLE": "Visualizing live Software Systems in 3D",
		"URL": "http://scg.unibe.ch/archive/papers/Gree06aTraceCrawlerSoftVis2006.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gree06aTraceCrawlerSoftVis2006.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1148493.1148501"
	},
	{
		"key": "Gree06b",
		"type": "article",
		"ABSTRACT": "Features encapsulate the domain knowledge of a\n\t\t\t\t  software system and thus are valuable sources of\n\t\t\t\t  information for a reverse engineer. When analyzing\n\t\t\t\t  the evolution of a system, we need to know how and\n\t\t\t\t  which features were modified to recover both the\n\t\t\t\t  change intention and its extent, namely which source\n\t\t\t\t  artifacts are affected. Typically, the\n\t\t\t\t  implementation of a feature crosscuts a number of\n\t\t\t\t  source artifacts. To obtain a mapping between\n\t\t\t\t  features to the source artifacts, we exercise the\n\t\t\t\t  features and capture their execution traces. However\n\t\t\t\t  this results in large traces that are difficult to\n\t\t\t\t  interpret. To tackle this issue we compact the\n\t\t\t\t  traces into simple sets of source artifacts that\n\t\t\t\t  participate in a feature's runtime behavior. We\n\t\t\t\t  refer to these compacted traces as feature views.\n\t\t\t\t  Within a feature view, we partition the source\n\t\t\t\t  artifacts into disjoint sets of characterized\n\t\t\t\t  software entities. The characterization defines the\n\t\t\t\t  level of participation of a source entity in the\n\t\t\t\t  features. We then analyze the features over several\n\t\t\t\t  versions of a system and we plot their evolution to\n\t\t\t\t  reveal how and hich features were affected by\n\t\t\t\t  changes in the code. We show the usefulness of our\n\t\t\t\t  approach by applying it to a case study where we\n\t\t\t\t  address the problem of merging parallel development\n\t\t\t\t  tracks of the same system.",
		"AERES": "ACL",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Orla Greevy and Stéphane Ducasse and Tudor Gîrba",
		"DOI": "10.1002/smr.340",
		"IMPACTFACTOR": "0.606, SCI 2002-2004",
		"INRIA": "hors",
		"JOURNAL": "Journal of Software Maintenance and Evolution: Research and Practice (JSME)",
		"KEYWORDS": "scg-pub recast07 snf07 scg-none jb07 fb06 stefPub girba mooseCincom dynamic-analysis feature evolution moose-pub",
		"MEDIUM": "2",
		"MISC": "SCI impact factor 0.606 (2002-2004)",
		"NUMBER": "6",
		"PAGES": "425--456",
		"PEERREVIEW": "yes",
		"SELECTIF": "non",
		"TITLE": "Analyzing Software Evolution through Feature Views",
		"URL": "http://scg.unibe.ch/archive/papers/Gree06bTraceScraperJSME-SCG.pdf",
		"VOLUME": "18",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gree06bTraceScraperJSME-SCG.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1002/smr.340"
	},
	{
		"key": "Gree07a",
		"type": "inproceedings",
		"ABSTRACT": "Software systems are typically developed by teams of\n\t\t\t\t  developers, with responsibilities for different\n\t\t\t\t  parts of the code. Knowledge of how the developers\n\t\t\t\t  collaborate, and how their responsibilities are\n\t\t\t\t  distributed over the software artifacts is a\n\t\t\t\t  valuable source of information when reverse\n\t\t\t\t  engineering a system. Determining which developers\n\t\t\t\t  are responsible for which software artifacts (e.g.\n\t\t\t\t  packages or classes) is just one perspective. In\n\t\t\t\t  this paper we complement the static perspective with\n\t\t\t\t  the dynamic perspective of a system in terms of its\n\t\t\t\t  features. We want to extract information about which\n\t\t\t\t  developers are responsible for which features. To\n\t\t\t\t  achieve these two perspectives, we correlate\n\t\t\t\t  developer responsibilities both with a structural\n\t\t\t\t  view of the system and with a feature view. We\n\t\t\t\t  identify which developers are responsible for which\n\t\t\t\t  features, and whether the responsibilities\n\t\t\t\t  correspond with structural source code artifacts or\n\t\t\t\t  with features. We apply our technique to two\n\t\t\t\t  software projects developed by two teams of students\n\t\t\t\t  as part of their course work, and to one large open\n\t\t\t\t  source project.",
		"ACCEPTNUM": "38",
		"ACCEPTTOTAL": "132",
		"ADDRESS": "Los Alamitos CA",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Orla Greevy and Tudor Gîrba and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of 11th European Conference on Software Maintenance and Reengineering (CSMR 2007)",
		"CVS": "TraceScraperCSMR2007",
		"DOI": "10.1109/CSMR.2007.27",
		"INRIA": "hors",
		"ISBN": "0-7695-2802-3",
		"ISSN": "1534-5351",
		"KEYWORDS": "scg07 scg-pub greevy jb07 stefPub snf07 moose-pub authors features evolution dynamic-analysis girba",
		"MEDIUM": "2",
		"MISC": "Acceptance rate: 38/132=29",
		"PAGES": "256--274",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"RATE": "29%",
		"SELECTIF": "oui",
		"TITLE": "How Developers Develop Features",
		"URL": "http://scg.unibe.ch/archive/papers/Gree07aDevelopersDevelopFeatures.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gree07aDevelopersDevelopFeatures.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/CSMR.2007.27"
	},
	{
		"key": "Gree07c",
		"type": "inproceedings",
		"ABSTRACT": "Many researchers have identified the potential of\n\t\t\t\t  exploiting domain knowledge in a reverse engineering\n\t\t\t\t  context. Features are abstractions that encapsulate\n\t\t\t\t  knowledge of a problem domain and denote units of\n\t\t\t\t  system behavior. As such, they represent a valuable\n\t\t\t\t  resource for reverse engineering a system. The main\n\t\t\t\t  body of feature-related reverse engineering research\n\t\t\t\t  is concerned with feature identification, a\n\t\t\t\t  technique to map features to source code. To fully\n\t\t\t\t  exploit features in reverse engineering, however, we\n\t\t\t\t  need to extend the focus beyond feature\n\t\t\t\t  identification and exploit features as primary units\n\t\t\t\t  of analysis. To incorporate features into reverse\n\t\t\t\t  engineering analyses, we need to explicitly model\n\t\t\t\t  features, their relationships to source artefacts,\n\t\t\t\t  and their relationships to each other. To address\n\t\t\t\t  this we propose Dynamix, am meta--model that\n\t\t\t\t  expresses feature entities in the context of a\n\t\t\t\t  structural meta-model of source code entities. Our\n\t\t\t\t  meta-model supports feature-centric reverse\n\t\t\t\t  engineering techniques that establish traceability\n\t\t\t\t  between the problem and solution domains throughout\n\t\t\t\t  the life-cycle of a system.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Orla Greevy",
		"BOOKTITLE": "Proceedings of FAMOOSr 2007 (Ist International Workshop on FAMIX and Moose in Reengineering)",
		"KEYWORDS": "scg07 scg-pub snf07 skip-doi greevy jb07 Feature Feature-Traces Dynamic Analysis Evolution moose-pub",
		"MEDIUM": "2",
		"MONTH": "June",
		"PEERREVIEW": "yes",
		"TITLE": "Dynamix — a Meta-Model to Support Feature-Centric Analysis",
		"URL": "http://scg.unibe.ch/archive/papers/Gree07cDynamixFAMOOSr2007.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gree07cDynamixFAMOOSr2007.pdf"
	},
	{
		"key": "Gysi10a",
		"type": "inproceedings",
		"ABSTRACT": "Search is a fundamental activity in software\n\t\t\t\t  development. However, to search source code\n\t\t\t\t  efficiently, it is not sufficient to implement a\n\t\t\t\t  traditional full text search over a base of source\n\t\t\t\t  code, human factors have to be taken into account as\n\t\t\t\t  well. We looked into ways of increasing the search\n\t\t\t\t  results code trustability by providing and analysing\n\t\t\t\t  a range of meta data alongside the actual search\n\t\t\t\t  results.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Florian S. Gysin",
		"BOOKTITLE": "Proceedings International Conference on Software Engineering, ICSE '10, Student Research Competition",
		"DOI": "10.1145/1810295.1810457",
		"KEYWORDS": "codesearch scg-pub scg10 jb10 snf10",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"TITLE": "Improved Social Trustability of Code Search Results",
		"URL": "http://scg.unibe.ch/archive/papers/Gysi10a.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gysi10a.pdf"
	},
	{
		"key": "Gysi10b",
		"type": "inproceedings",
		"ABSTRACT": "The promise of search-driven development is that\n\t\t\t\t  developers will save time and resources by reusing\n\t\t\t\t  external code in their local projects. To\n\t\t\t\t  efficiently integrate this code, users must be able\n\t\t\t\t  to trust it, thus trustability of code search\n\t\t\t\t  results is just as important as their relevance. In\n\t\t\t\t  this paper, we introduce a trustability metric to\n\t\t\t\t  help users assess the quality of code search results\n\t\t\t\t  and therefore ease the cost-benefit analysis they\n\t\t\t\t  undertake trying to find suitable integration\n\t\t\t\t  candidates. The proposed trustability metric\n\t\t\t\t  incorporates both user votes and cross-project\n\t\t\t\t  activity of developers to calculate a \"karma\" value\n\t\t\t\t  for each developer. Through the karma value of all\n\t\t\t\t  its developers a project is ranked on a trustability\n\t\t\t\t  scale. We present JBENDER, a proof-of-concept code\n\t\t\t\t  search engine which implements our trustability\n\t\t\t\t  metric and we discuss preliminary results from an\n\t\t\t\t  evaluation of the prototype.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Florian S. Gysin and Adrian Kuhn",
		"BOOKTITLE": "ICSE Workshop on Search-Driven Development-Users, Infrastructure, Tools and Evaluation, 2010. SUITE '10.",
		"DOI": "10.1145/1809175.1809186",
		"KEYWORDS": "codesearch, scg-pub scg10, akuhn-pub, suite2010 jb10 snf10",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"TITLE": "A Trustability Metric for Code Search based on Developer Karma",
		"URL": "http://scg.unibe.ch/archive/papers/Gysi10b.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Gysi10b.pdf"
	},
	{
		"key": "Haen08b",
		"type": "inproceedings",
		"ABSTRACT": "When changing the API of a framework, we need to\n\t\t\t\t  migrate its clients. This is best done\n\t\t\t\t  automatically. In this paper, we focus on API\n\t\t\t\t  migration where the mechanism for inversion of\n\t\t\t\t  control changes. We propose to use dynamic analysis\n\t\t\t\t  for such API migration since structural refactorings\n\t\t\t\t  alone are often not sufficient. We consider JExample\n\t\t\t\t  as a case-study. JExample extends JUnit with\n\t\t\t\t  first-class dependencies and fixture injection. We\n\t\t\t\t  investigate how dynamically collected information\n\t\t\t\t  about test coverage and about instances under test\n\t\t\t\t  can be used to detect dependency injection\n\t\t\t\t  candidates.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Lea Hänsenberger and Adrian Kuhn and Oscar Nierstrasz",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Haen08bAPImigration.pdf http://swerl.tudelft.nl/bin/view/PCODA/PCODA2008#Proceedings",
		"BOOKTITLE": "Proceedings IEEE Workshop on Program Comprehension through Dynamic Analysis (PCODA 2008)",
		"KEYWORDS": "scg08 scg-pub skip-doi snf09 jb09 fb08 akuhn haensenberger",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "32--36",
		"PEERREVIEW": "yes",
		"TITLE": "Using Dynamic Analysis for API Migration",
		"URL": "http://scg.unibe.ch/archive/papers/Haen08bAPImigration.pdf",
		"URL2": "http://swerl.tudelft.nl/bin/view/PCODA/PCODA2008#Proceedings",
		"YEAR": "2008",
		"BDSK-URL-2": "http://scg.unibe.ch/archive/papers/Haen08bAPImigration.pdf%20http://swerl.tudelft.nl/bin/view/PCODA/PCODA2008#Proceedings"
	},
	{
		"key": "Haen13a",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"ABSTRACT": "We present the results of an investigation into the nature of the information needs of software developers who work in projects that are part of larger ecosystems. In an open-question survey we asked framework and library developers about their information needs with respect to both their upstream and downstream projects. We investigated what kind of information is required, why is it necessary, and how the developers obtain this information.\n\tThe results show that the downstream needs are grouped into three categories roughly corresponding to the different stages in their relation with an upstream: selection, adoption, and co-evolution. The less numerous upstream needs are grouped into two categories: project statistics and code usage.\n\tThe current practices part of the study shows that to satisfy many of these needs developers use non-specific tools and ad hoc methods. We believe that this is a largely unexplored area of research.",
		"AUTHOR": "Haenni, Nicole and Lungu, Mircea and Schwarz, Niko and Nierstrasz, Oscar",
		"BOOKTITLE": "Proceedings of the 1st Workshop on Ecosystem Architectures",
		"KEYWORDS": "ecosystems scg-pub snf-asa1 scg13 skip-doi jb14 dev-questions",
		"MEDIUM": "2",
		"PAGES": "1--5",
		"PEERREVIEW": "yes",
		"TITLE": "Categorizing Developer Information Needs in Software Ecosystems",
		"URL": "http://scg.unibe.ch/archive/papers/Haen13a-EcosystemInformationNeeds.pdf",
		"YEAR": "2013",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Haen13a-EcosystemInformationNeeds.pdf"
	},
	{
		"key": "Haen14a",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"ABSTRACT": "We present the results of an investigation into the nature of information needs of software developers who work in projects that are part of larger ecosystems. This work is based on a quantitative survey of 75 professional software developers. We corroborate the results identified in the sur- vey with needs and motivations proposed in a previous sur- vey and discover that tool support for developers working in an ecosystem context is even more meager than we thought: mailing lists and internet search are the most popular tools developers use to satisfy their ecosystem-related information needs.",
		"AUTHOR": "Haenni, Nicole and Lungu, Mircea and Schwarz, Niko and Nierstrasz, Oscar",
		"BOOKTITLE": "Proceedings of the 2nd Workshop on Ecosystem Architectures (WEA'14)",
		"KEYWORDS": "ecosystems scg-pub snf-asa1 scg14 jb14 dev-questions",
		"MEDIUM": "2",
		"PAGES": "1--6",
		"PEERREVIEW": "yes",
		"TITLE": "A Quantitative Analysis of Developer Information Needs in Software Ecosystems",
		"URL": "http://scg.unibe.ch/archive/papers/Haen14a-QuantitativeEcosystemInformationNeeds.pdf",
		"DOI": "10.1145/2642803.2642815",
		"YEAR": "2014",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Haen14a-QuantitativeEcosystemInformationNeeds.pdf"
	},
	{
		"key": "Hald07b",
		"type": "inproceedings",
		"ABSTRACT": "Most languages fall into one of two camps: either\n\t\t\t\t  they adopt a unique, static type system, or they\n\t\t\t\t  abandon static type-checks for run-time checks.\n\t\t\t\t  Pluggable types blur this division by (i) making\n\t\t\t\t  static type systems optional, and (ii) supporting a\n\t\t\t\t  choice of type systems for reasoning about different\n\t\t\t\t  kinds of static properties. Dynamic languages can\n\t\t\t\t  then benefit from static-checking without\n\t\t\t\t  sacrificing dynamic features or committing to a\n\t\t\t\t  unique, static type system. But the overhead of\n\t\t\t\t  adopting pluggable types can be very high,\n\t\t\t\t  especially if all existing code must be decorated\n\t\t\t\t  with type annotations before any type-checking can\n\t\t\t\t  be performed. We propose a practical and pragmatic\n\t\t\t\t  approach to introduce pluggable type systems to\n\t\t\t\t  dynamic languages. First of all, only annotated code\n\t\t\t\t  is type-checked. Second, limited type inference is\n\t\t\t\t  performed on unannotated code to reduce the number\n\t\t\t\t  of reported errors. Finally, external annotations\n\t\t\t\t  can be used to type third-party code. We present\n\t\t\t\t  Typeplug, a Smalltalk implementation of our\n\t\t\t\t  framework, and report on experience applying the\n\t\t\t\t  framework to three different pluggable type\n\t\t\t\t  systems.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Niklaus Haldimann and Marcus Denker and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 2007 International Conference on Dynamic Languages (ICDL 2007)",
		"DOI": "10.1145/1352678.1352690",
		"ISBN": "978-1-60558-084-5",
		"KEYWORDS": "scg07 scg-pub jb08 snf07 reflectivity",
		"MEDIUM": "2",
		"PAGES": "183--204",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM Digital Library",
		"TITLE": "Practical, Pluggable Types",
		"URL": "http://scg.unibe.ch/archive/papers/Hald07b-Typeplug.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Hald07b-Typeplug.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1352678.1352690"
	},
	{
		"key": "Hald09a",
		"type": "article",
		"ABSTRACT": "Most languages fall into one of two camps: either\n\t\t\t\t  they adopt a unique, static type system, or they\n\t\t\t\t  abandon static type-checks for run-time checks.\n\t\t\t\t  Pluggable types blur this division by (i) making\n\t\t\t\t  static type systems optional, and (ii) supporting a\n\t\t\t\t  choice of type systems for reasoning about different\n\t\t\t\t  kinds of static properties. Dynamic languages can\n\t\t\t\t  then benefit from static-checking without\n\t\t\t\t  sacrificing dynamic features or committing to a\n\t\t\t\t  unique, static type system. But the overhead of\n\t\t\t\t  adopting pluggable types can be very high,\n\t\t\t\t  especially if all existing code must be decorated\n\t\t\t\t  with type annotations before any type-checking can\n\t\t\t\t  be performed. We propose a practical and pragmatic\n\t\t\t\t  approach to introduce pluggable type systems to\n\t\t\t\t  dynamic languages. First of all, only annotated code\n\t\t\t\t  is type-checked. Second, limited type inference is\n\t\t\t\t  performed on unannotated code to reduce the number\n\t\t\t\t  of reported errors. Finally, external annotations\n\t\t\t\t  can be used to type third-party code. We present\n\t\t\t\t  Typeplug, a Smalltalk implementation of our\n\t\t\t\t  framework, and report on experience applying the\n\t\t\t\t  framework to three different pluggable type\n\t\t\t\t  systems.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Niklaus Haldimann and Marcus Denker and Oscar Nierstrasz",
		"DOI": "10.1016/j.cl.2008.06.003",
		"JOURNAL": "Journal of Computer Languages, Systems and Structures",
		"KEYWORDS": "scg09 scg-pub jb08 snf08 reflectivity",
		"MEDIUM": "2",
		"MISC": "was: Hald08a",
		"MONTH": "April",
		"NUMBER": "1",
		"PAGES": "48--64",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Elsevier",
		"TITLE": "Practical, Pluggable Types for a Dynamic Language",
		"URL": "http://scg.unibe.ch/archive/papers/Hald08aTypeplug.pdf",
		"VOLUME": "35",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Hald08aTypeplug.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.cl.2008.06.003"
	},
	{
		"key": "Hamo07a",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Abdelwahab Hamou-Lhadj and Andy Zaidman and Orla Greevy",
		"BOOKTITLE": "Proceedings of IEEE 14th Working Conference on Software Maintenance and Reengineering (WCRE)",
		"DOI": "10.1109/WCRE.2007.53",
		"KEYWORDS": "scg07 scg-pub skip-abstract greevy jb08 snf07",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "298--298",
		"PEERREVIEW": "yes",
		"TITLE": "Workshop on Program Comprehension through Dynamic Analysis (PCODA)",
		"URL": "http://scg.unibe.ch/archive/papers/Hamo07a-pcoda2007proceedings.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Hamo07a-pcoda2007proceedings.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2007.53"
	},
	{
		"key": "Hamo10a",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Abdelwahab Hamou-Lhadj and David Röthlisberger and Andy Zaidman and Orla Greevy",
		"BOOKTITLE": "Proceedings of IEEE 17th Working Conference on Software Maintenance and Reengineering (WCRE)",
		"DOI": "10.1109/WCRE.2010.40",
		"KEYWORDS": "scg-pub scg10 skip-abstract greevy roethlisberger jb10 snf10 Dynamic Analysis",
		"MEDIUM": "2",
		"MONTH": "October",
		"PEERREVIEW": "yes",
		"TITLE": "Workshop on Program Comprehension through Dynamic Analysis (PCODA)",
		"URL": "http://scg.unibe.ch/archive/papers/Hamo10aPCODA2010.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Hamo10aPCODA2010.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2010.40"
	},
	{
		"key": "Hatt10a",
		"type": "inproceedings",
		"ABSTRACT": "What was I working on before the weekend? and What\n\t\t\t\t  were the members of my team working on during the\n\t\t\t\t  last week? are common questions that are frequently\n\t\t\t\t  asked by a developer. They can be answered if one\n\t\t\t\t  keeps track of who changes what in the source code.\n\t\t\t\t  In this work, we present Replay, a tool that allows\n\t\t\t\t  one to replay past changes as they happened at a\n\t\t\t\t  fine-grained level, where a developer can watch what\n\t\t\t\t  she has done or understand what her colleagues have\n\t\t\t\t  done in past development sessions. With this tool,\n\t\t\t\t  developers are able to not only understand what\n\t\t\t\t  sequence of changes brought the system to a certain\n\t\t\t\t  state (e.g., the introduction of a defect), but also\n\t\t\t\t  deduce reasons for why her colleagues performed\n\t\t\t\t  those changes. One of the applications of such a\n\t\t\t\t  tool is also discovering the changes that broke the\n\t\t\t\t  code of a developer.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Lile Hattori and Mircea Lungu and Michele Lanza",
		"BOOKTITLE": "Proceedings of the Joint ERCIM Workshop on Software Evolution (EVOL) and International Workshop on Principles of Software Evolution (IWPSE)",
		"DOI": "10.1145/1862372.1862379",
		"KEYWORDS": "lungu scg-pub snf-no jb11 scg10",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "13--22",
		"PEERREVIEW": "yes",
		"TITLE": "Replaying past changes in multi-developer projects",
		"URL": "http://www.inf.usi.ch/faculty/lanza/Downloads/Hatt2010c.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://www.inf.usi.ch/faculty/lanza/Downloads/Hatt2010c.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1862372.1862379"
	},
	{
		"key": "Hatt11a",
		"type": "inproceedings",
		"ABSTRACT": "Developers often need to find answers to questions regarding the evolution of a system when working on its\n  code base. While their information needs require data analysis spanning over different repository types, the source code\n  repository has a pivotal role for program comprehension tasks. However, the coarse-grained nature of the data stored by\n  commit-based software configuration management systems often makes it challenging for a developer to search for an answer.\n  We present Replay, an Eclipse plug-in that allows one to explore the change history of a system by capturing the changes\n  at a finer granularity level than commits, and by replaying the past changes chronologically inside the integrated\n  development environment with the source code at hand. We conducted a controlled experiment to empirically assess whether\n  Replay outperforms a baseline (SVN client in Eclipse) on helping developers to answer common questions related to software\n  evolution. The experiment shows that Replay leads to a decrease in completion time with respect to a set of software\n  evolution comprehension tasks.",
		"AUTHOR": "Lile Hattori and Marco D'Ambros and Michele Lanza and Mircea Lungu",
		"BOOKTITLE": "Proceedings of the 19th International Conference on Program Comprehension",
		"DOI": "10.1109/ICPC.2011.39",
		"KEYWORDS": "scg11 scg-pub jb12 snf11 ercim11",
		"MEDIUM": "2",
		"PAGES": "161-170",
		"PEERREVIEW": "Yes",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Software Evolution Comprehension: Replay to the Rescue",
		"URL": "http://inf.unisi.ch/faculty/lanza/Downloads/Hatt2011a.pdf",
		"YEAR": "2011",
		"BDSK-URL-1": "http://inf.unisi.ch/faculty/lanza/Downloads/Hatt2011a.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICPC.2011.39"
	},
	{
		"key": "Hatt13a",
		"type": "article",
		"ABSTRACT": "Developers often need to find answers to questions regarding the evolution of a system when working on its code\t base. While their information needs require data analysis pertaining to different repository types, the source code repository\thas a pivotal role for program comprehension tasks. However, the coarse-grained nature of the data stored by commit-based software configuration management systems often makes it challenging for a developer to search for an answer.We present Replay, an Eclipse plug-in that allows developers to explore the change history of a system by capturing the changes at a finer granularity level than commits, and by replaying the past changes chronologically inside the integrated development environment, with the source code at hand.",
		"AUTHOR": "Lile Hattori and Marco D'Ambros and Michele Lanza and Mircea Lungu",
		"DOI": "10.1016/j.infsof.2012.09.001",
		"ISSN": "0950-5849",
		"JOURNAL": "Information and Software Technology",
		"KEYWORDS": "scg-pub snf12 jb13 scg13 Software evolution Empirical evaluation Controlled experiment",
		"MEDIUM": "2",
		"MONTH": "jan",
		"NUMBER": "4",
		"PAGES": "755 - 775",
		"PEERREVIEW": "yes",
		"TITLE": "Answering software evolution questions: An empirical evaluation",
		"URL": "http://www.sciencedirect.com/science/article/pii/S095058491200184X",
		"VOLUME": "55",
		"YEAR": "2013",
		"BDSK-URL-1": "http://www.sciencedirect.com/science/article/pii/S095058491200184X",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.infsof.2012.09.001"
	},
	{
		"key": "Haup07a",
		"type": "inproceedings",
		"ABSTRACT": "This position paper proposes the exploitation of\n\t\t\t\t  type feedback mechanisms, or more precisely,\n\t\t\t\t  polymorphic inline caches, for purely interpreting\n\t\t\t\t  implementations of object-oriented programming\n\t\t\t\t  languages. Using Squeak's virtual machine as an\n\t\t\t\t  example, polymorphic inline caches are discussed as\n\t\t\t\t  an alternative to global caching. An implementation\n\t\t\t\t  proposal for polymorphic inline caches in the Squeak\n\t\t\t\t  virtual machine is presented, and possible future\n\t\t\t\t  applications for online optimization are outlined.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Michael Haupt and Robert Hirschfeld and Marcus Denker",
		"BOOKTITLE": "Proceedings of the Second Workshop on Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems (ICOOOLPS'2007), ECOOP Workshop",
		"ISSN": "1436-9915",
		"KEYWORDS": "scg07 scg-pub skip-doi jb08 snf07",
		"MEDIUM": "2",
		"MONTH": "July",
		"PAGES": "17--22",
		"PEERREVIEW": "yes",
		"PUBLISHER": "TU Berlin",
		"TITLE": "Type feedback for bytecode interpreters",
		"URL": "http://scg.unibe.ch/archive/papers/Haup07aPIC.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Haup07aPIC.pdf"
	},
	{
		"key": "Hazh18a",
		"type": "inproceedings",
		"AUTHOR": "Mohammadreza Hazhirpasand and Mohammad Ghafari",
		"ABSTRACT": "WebRTC provides browsers and mobile apps with rich realtime\ncommunications capabilities, without the need for further software\ncomponents. Recently, however, it has been shown that WebRTC can\nbe triggered to fingerprint a web visitor, which may compromise the\nuser's privacy. We evaluate the feasibility of exploiting a WebRTC IP\nleak to scan a user's private network ports and IP addresses from outside\ntheir local network. We propose a web-based network scanner that\nis both browser- and network-independent, and performs nearly as well\nas system-based scanners. We experiment with various popular mobile\nand desktop browsers on several platforms and show that adversaries\nnot only can exploit WebRTC to identify the real user identity behind a\nweb request, but also can retrieve sensitive information about the user's\nnetwork infrastructure. We discuss the potential security and privacy\nconsequences of this issue and present a browser extension that we developed\nto inform the user about the prospect of suspicious activities. ",
		"LOCATION": "Paris, France",
		"KEYWORDS": "scg-pub security snf-asa2 scg18 jb18",
		"DOI": "10.1007/978-3-319-94496-8_5",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"BOOKTITLE": "International Symposium on Engineering Secure Software and Systems (ESSoS 2018)",
		"ANNOTE": "internationalconference",
		"URL": "http://scg.unibe.ch/archive/papers/Hazh18a.pdf",
		"TITLE": "One Leak is Enough to Expose Them All — From a WebRTC IP Leak to Web-based Network Scanning",
		"PAGES": "61--76",
		"YEAR": "2018"
	},
	{
		"key": "Hazh18b",
		"type": "inproceedings",
		"AUTHOR": "Mohammadreza Hazhirpasand",
		"TITLE": "MHEye: A Hybrid Android Security Assessment Tool for Ordinary Users",
		"ABSTRACT": "Android users are often overwhelmed by security\n    issues arising in the apps they use. Although malware\n    analysis tools exist, they are challenging to\n    adopt for average users. To avoid burdening mobile\n    devices with complex and computationally\n    expensive malware tools, we propose a hybrid approach\n    that combines static and dynamic analyses,\n    and distributes the analysis mainly on another device\n    than the phone. We first review the Android\n    architecture and several of the key security issues\n    it faces, and we summarize existing approaches to\n    malware detection. We conclude with a research\n    plan to explore and develop a more user-friendly\n    approach to malware detection for ordinary users. ",
		"BOOKTITLE": "SATTOSE",
		"ANNOTE": "internationalworkshop",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"KEYWORDS": "scg-pub skip-doi snf-asa2 scg18 jb18",
		"SERIES": "SATToSE '18",
		"PUBLISHER": "SATToSE",
		"YEAR": "2018",
		"URL": "http://scg.unibe.ch/archive/papers/Hazh18b.pdf"
	},
	{
		"key": "Hazh19a",
		"type": "inproceedings",
		"AUTHOR": "Mohammadreza Hazhirpasand and Mohammad Ghafari and Stefan Krüger and Eric Bodden and Oscar Nierstrasz",
		"BOOKTITLE": "2019 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)",
		"TITLE": "The Impact of Developer Experience in Using Java Cryptography",
		"YEAR": "2019",
		"PAGES": "1-6",
		"ABSTRACT": "Background: Previous research has shown that crypto APIs are\n\t\thard for developers to understand and difficult for them to use. They\n\t\tconsequently rely on unvalidated boilerplate code from online resources\n\t\twhere security vulnerabilities are common.Aims and method: We analyzed\n\t\t2,324 open-source Java projects that rely on Java Cryptography\n\t\tArchitecture (JCA) to understand how crypto APIs are used in practice, and\n\t\twhat factors account for the performance of developers in using these\n\t\tAPIs.Results: We found that, in general, the experience of developers in\n\t\tusing JCA does not correlate with their performance. In particular, none\n\t\tof the factors such as the number or frequency of committed lines of code,\n\t\tthe number of JCA APIs developers use, or the number of projects they are\n\t\tinvolved in correlate with developer performance in this\n\t\tdomain.Conclusions: We call for qualitative studies to shed light on the\n\t\treasons underlying the success of developers who are expert in using\n\t\tcryptography. Also, detailed investigation at API level is necessary to\n\t\tfurther clarify a developer obstacles in this domain.",
		"DOI": "10.1109/ESEM.2019.8870184",
		"ISSN": "1949-3770",
		"MONTH": "sep",
		"KEYWORDS": "scg-pub security snf-asa3 scg19 jb19",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"ANNOTE": "internationalconference",
		"URL": "http://scg.unibe.ch/archive/papers/Hazh19aJCA-Impact.pdf"
	},
	{
		"key": "Hazh20a",
		"type": "inproceedings",
		"AUTHOR": "Mohammadreza Hazhirpasand and Mohammad Ghafari and Oscar Nierstrasz",
		"BOOKTITLE": "27th edition of the IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)",
		"TITLE": "CryptoExplorer: An Interactive Web Platform Supporting Secure Use of Cryptography APIs",
		"YEAR": "2020",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"ABSTRACT": "Research has shown that cryptographic APIs are hard to use.\n\t\tConsequently, developers resort to using code examples available in\n\t\tonline information sources that are often not secure. We have\n\t\tdeveloped a web platform, named CryptoExplorer, stocked with\n\t\tnumerous real-world secure and insecure examples that developers\n\t\tcan explore to learn how to use cryptographic APIs properly. This\n\t\tplatform currently provides 3 263 secure uses, and 5 897 insecure\n\t\tuses of Java Cryptography Architecture mined from 2 324 Java\n\t\tprojects on GitHub. A preliminary study shows that CryptoExplorer\n\t\tprovides developers with secure crypto API use examples instantly,\n\t\tdevelopers can save time compared to searching on the internet for\n\t\tsuch examples, and they learn to avoid using certain algorithms in\n\t\tAPIs by studying misused API examples. We have a pipeline to\n\t\tregularly mine more projects, and, on request, we offer our dataset\n\t\tto researchers.",
		"KEYWORDS": "scg-pub security snf-asa3 scg20 jb20 snf-imad",
		"DOI": "10.1109/SANER48275.2020.9054799",
		"PAGES": "632--636",
		"MONTH": "March",
		"URL": "http://scg.unibe.ch/archive/papers/Hazh20a.pdf"
	},
	{
		"key": "Hazh20b",
		"type": "inproceedings",
		"AUTHOR": "Hazhirpasand, Mohammadreza and Ghafari, Mohammad and Nierstrasz, Oscar",
		"TITLE": "Tricking Johnny into Granting Web Permissions",
		"PEERREVIEW": "yes",
		"ABSTRACT": "We studied the web permission API dialog box in popular mobile and desktop\n\tbrowsers, and found that it typically lacks measures to protect users\n\tfrom unwittingly granting web permission when clicking too fast. We\n\tdeveloped a game that exploits this issue, and tricks users into granting\n\twebcam permission. We conducted three experiments, each with 40 different\n\tparticipants, on both desktop and mobile browsers. The results indicate\n\tthat in the absence of a prevention mechanism, we achieve a considerably\n\thigh success rate in tricking 95 and 72 of participants on mobile and\n\tdesktop browsers, respectively. Interestingly, we also tricked 47 of\n\tparticipants on a desktop browser where a prevention mechanism exists.",
		"YEAR": "2020",
		"ISBN": "9781450377317",
		"PUBLISHER": "Association for Computing Machinery",
		"ADDRESS": "New York, NY, USA",
		"DOI": "10.1145/3383219.3383248",
		"BOOKTITLE": "Proceedings of the Evaluation and Assessment in Software Engineering",
		"PAGES": "276--281",
		"NUMPAGES": "6",
		"KEYWORDS": "scg-pub security snf-asa3 scg20 jb20 snf-imad",
		"LOCATION": "Trondheim, Norway",
		"SERIES": "EASE 2020",
		"MEDIUM": "2",
		"URL": "http://scg.unibe.ch/archive/papers/Hazh20b.pdf"
	},
	{
		"key": "Hazh20c",
		"type": "inproceedings",
		"AUTHOR": "Hazhirpasand, Mohammadreza and Ghafari, Mohammad and Nierstrasz, Oscar",
		"BOOKTITLE": "Proceedings of the 14th ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)",
		"TITLE": "Java Cryptography Uses in the Wild",
		"YEAR": "2020",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"DOI": "10.1145/3382494.3422166",
		"ABSTRACT": "[Background] Previous research has shown that developers commonly misuse cryptography APIs. [Aim] We have conducted an exploratory study to find out how crypto APIs are used in open-source Java projects, what types of misuses exist, and why developers make such mistakes. [Method] We used a static analysis tool to analyze hundreds of open-source Java projects that rely on Java Cryptography Architecture, and manually inspected half of the analysis results to assess the tool results. We also contacted the maintainers of these projects by creating an issue on the GitHub repository of each project, and discussed the misuses with developers. [Results] We learned that 85 of Cryptography APIs are misused, however, not every misuse has severe consequences. Developer feedback showed that security caveats in the documentation of crypto APIs are rare, developers may overlook misuses that originate in third-party code, and the context where a Crypto API is used should be taken into account. [Conclusion] We conclude that using Crypto APIs is still problematic for developers but blindly blaming them for such misuses may lead to erroneous conclusions.",
		"NUMPAGES": "6",
		"KEYWORDS": "scg-pub security snf-asa3 scg20 jb21 snf-imad",
		"URL": "http://scg.unibe.ch/archive/papers/Hazh20c.pdf"
	},
	{
		"key": "Hazh21a",
		"type": "inproceedings",
		"AUTHOR": "Hazhirpasand, Mohammadreza and Ale Ebrahim, Arash and Nierstrasz, Oscar",
		"BOOKTITLE": "Proceedings of the 7th International Conference on Information Systems Security and Privacy - ICISSP",
		"TITLE": "Stopping DNS Rebinding Attacks in the Browser",
		"YEAR": "2021",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"DOI": "10.5220/0010310705960603",
		"ABSTRACT": "DNS rebinding attacks circumvent the same-origin policy of browsers and severely jeopardize user privacy. Although recent studies have shown that DNS rebinding attacks pose severe security threats to users, up to now little effort has been spent to assess the effectiveness of known solutions to prevent such attacks. We have carried out such a study to assess the protective measures proposed in prior studies. We found that none of the recommended techniques can entirely halt this attack due to various factors, e.g., network layer encryption renders packet inspection infeasible. Examining the previous problematic factors, we realize that a protective measure must be implemented at the browser-level. Therefore, we propose a defensive measure, a browser plug-in called Fail-rebind, that can detect, inform, and protect users in the event of an attack. Afterwards, we discuss the merits and limitations of our method compared to prior methods. Our findings suggest that Fail-rebind does not nec essitate expert knowledge, works on different OSes and smart devices, and is independent of networks and location.",
		"NUMPAGES": "8",
		"KEYWORDS": "scg-pub security snf-asa3 scg21 jb21 snf-imad",
		"URL": "http://scg.unibe.ch/archive/papers/Hazh21a.pdf"
	},
	{
		"key": "Hazh21b",
		"type": "inproceedings",
		"AUTHOR": "Hazhirpasand, Mohammadreza and Nierstrasz, Oscar and Ghafari, Mohammad",
		"BOOKTITLE": "2021 18th International Conference on Privacy, Security and Trust (PST)",
		"TITLE": "Dazed and Confused: What's Wrong with Crypto Libraries?",
		"ABSTRACT": "Recent studies have shown that developers have difficulties in\n\t\tusing cryptographic APIs, which often led to security flaws.\n\t\tWe are interested to tackle this matter by looking into what\n\t\ttypes of problems exist in various crypto libraries. We\n\t\tmanually studied 500 posts on Stack Overflow associated with\n\t\t20 popular crypto libraries. We realized there are 10 themes\n\t\tin the discussions. Interestingly, there were only two\n\t\tquestions related to attacks against cryptography. There were\n\t\t63 discussions in which developers had interoperability issues\n\t\twhen working with more than a crypto library. The majority of\n\t\tposts (112) were about encryption/decryption problems and 111\n\t\twere about installation/compilation issues of crypto\n\t\tlibraries. Overall, we realize that the crypto libraries are\n\t\tfrequently involved in more than five themes of discussions.\n\t\tWe believe the current initial findings can help team leaders\n\t\tand experienced developers to correctly guide the team members\n\t\tin the domain of cryptography. Moreover, future research\n\t\tshould investigate the similarity of problems at the API level\n\t\tamong popular crypto libraries.",
		"YEAR": "2021",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"PAGES": "1-6",
		"DOI": "10.1109/PST52912.2021.9647786",
		"KEYWORDS": "scg-pub security snf-asa3 scg21 jb22",
		"URL": "http://scg.unibe.ch/archive/papers/Hazh21b.pdf"
	},
	{
		"key": "Hazh21c",
		"type": "inproceedings",
		"AUTHOR": "Hazhirpasand, Mohammadreza and Nierstrasz, Oscar and Shabani, Mohammadhossein and Ghafari, Mohammad",
		"BOOKTITLE": "2021 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
		"TITLE": "Hurdles for Developers in Cryptography",
		"ABSTRACT": "Prior research has shown that cryptography is hard to use for\n\t\tdevelopers. We aim to understand what cryptography issues\n\t\tdevelopers face in practice. We clustered 91 954\n\t\tcryptography-related questions on the Stack Overflow website,\n\t\tand manually analyzed a significant sample (i.e., 383) of the\n\t\tquestions to comprehend the crypto challenges developers\n\t\tcommonly face in this domain. We found that either developers\n\t\thave a distinct lack of knowledge in understanding the\n\t\tfundamental concepts, e.g., OpenSSL, public-key cryptography\n\t\tor password hashing, or the usability of crypto libraries\n\t\tundermined developer performance to correctly realize a crypto\n\t\tscenario. This is alarming and indicates the need for\n\t\tdedicated research to improve the design of crypto APIs.",
		"YEAR": "2021",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"PAGES": "659-663",
		"DOI": "10.1109/ICSME52107.2021.00076",
		"KEYWORDS": "scg-pub security snf-asa3 scg21 jb22",
		"URL": "http://scg.unibe.ch/archive/papers/Hazh21c.pdf"
	},
	{
		"key": "Hazh21d",
		"type": "inproceedings",
		"AUTHOR": "Hazhirpasand, Mohammadreza and Ghafari, Mohammad and Nierstrasz, Oscar",
		"BOOKTITLE": "2021 36th IEEE/ACM International Conference on Automated Software Engineering Workshops (ASEW)",
		"TITLE": "Worrisome Patterns in Developers: A Survey in Cryptography",
		"ABSTRACT": "We surveyed 97 developers who had used cryptography in\n\t\topen-source projects, in the hope of identifying developer\n\t\tsecurity and cryptography practices. We asked them about\n\t\tindividual and company-level practices, and divided\n\t\trespondents into three groups (i.e., high, medium, and low)\n\t\tbased on their level of knowledge. We found differences\n\t\tbetween the high-profile developers and the other two groups.\n\t\tFor instance, high-profile developers have more years of\n\t\texperience in programming, have attended more security and\n\t\tcryptography courses, have more background in security, are\n\t\thighly concerned about security, and tend to use security\n\t\ttools more than the other two groups. Nevertheless, we\n\t\tobserved worrisome patterns among all participants such as the\n\t\thigh usage of unreliable sources like Stack Overflow, and the\n\t\tlow rate of security tool usage.",
		"YEAR": "2021",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"PAGES": "185-190",
		"DOI": "10.1109/ASEW52652.2021.00045",
		"KEYWORDS": "scg-pub security snf-asa3 scg21 jb22",
		"URL": "http://scg.unibe.ch/archive/papers/Hazh21d.pdf"
	},
	{
		"key": "Hazh21e",
		"type": "inproceedings",
		"AUTHOR": "Hazhirpasand, Mohammadreza and Ghafari, Mohammad and Nierstrasz, Oscar",
		"BOOKTITLE": "2021 36th IEEE/ACM International Conference on Automated Software Engineering Workshops (ASEW)",
		"TITLE": "Crypto Experts Advise What They Adopt",
		"ABSTRACT": "Previous studies have shown that developers regularly seek\n\t\tadvice on online forums to resolve their cryptography issues.\n\t\tWe investigated whether users who are active in cryptography\n\t\tdiscussions also use cryptography in practice. We collected\n\t\tthe top 1% of responders who have participated in crypto\n\t\tdiscussions on Stack Overflow, and we manually analyzed their\n\t\tcrypto contributions to open source projects on GitHub. We\n\t\tcould identify 319 GitHub profiles that belonged to such\n\t\tcrypto responders and found that 189 of them used cryptography\n\t\tin their projects. Further investigation revealed that the\n\t\tmajority of analyzed users (i.e., 85%) use the same\n\t\tprogramming languages for crypto activity on Stack Overflow\n\t\tand crypto contributions on GitHub. Moreover, 90% of the\n\t\tanalyzed users employed the same concept of cryptography in\n\t\ttheir projects as they advised about on Stack Overflow.",
		"YEAR": "2021",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"PAGES": "179-184",
		"DOI": "10.1109/ASEW52652.2021.00044",
		"KEYWORDS": "scg-pub security snf-asa3 scg21 jb22",
		"URL": "http://scg.unibe.ch/archive/papers/Hazh21e.pdf"
	},
	{
		"key": "Hazh21f",
		"type": "inproceedings",
		"AUTHOR": "Hazhirpasand, Mohammadreza and Ghafari, Mohammad",
		"BOOKTITLE": "21st IEEE International Conference on Software Quality, Reliability, and Security (QRS)",
		"TITLE": "Cryptography Vulnerabilities on HackerOne",
		"YEAR": "2021",
		"PAGES": "18-27",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"ABSTRACT": "Previous studies have shown that cryptography is hard for developers to use and misusing cryptography leads to severe security vulnerabilities. We studied relevant vulnerability reports on the HackerOne bug bounty platform to understand what types of cryptography vulnerabilities exist in the wild. We extracted eight themes of vulnerabilities from the vulnerability reports and discussed their real-world implications and mitigation strategies. We hope that our findings alert developers, familiarize them with the dire consequences of cryptography misuses, and support them in avoiding such mistakes.",
		"KEYWORDS": "scg-pub security snf-asa3 scg21 jb22",
		"MONTH": "December",
		"URL": "http://scg.unibe.ch/archive/papers/Hazh21f.pdf",
		"DOI": "10.1109/QRS54544.2021.00013"
	},
	{
		"key": "Hirs08a",
		"type": "article",
		"ABSTRACT": "Context-dependent behavior is becoming increasingly\n\t\t\t\t  important for a wide range of application domains,\n\t\t\t\t  from pervasive computing to common business\n\t\t\t\t  applications. Unfortunately, mainstream programming\n\t\t\t\t  languages do not provide mechanisms that enable\n\t\t\t\t  software entities to adapt their behavior\n\t\t\t\t  dynamically to the current execution context. This\n\t\t\t\t  leads developers to adopt convoluted designs to\n\t\t\t\t  achieve the necessary runtime flexibility. We\n\t\t\t\t  propose a new programming technique called\n\t\t\t\t  Context-oriented Programming (COP) which addresses\n\t\t\t\t  this problem. COP treats context explicitly, and\n\t\t\t\t  provides mechanisms to dynamically adapt behavior in\n\t\t\t\t  reaction to changes in context, even after system\n\t\t\t\t  deployment at runtime. In this paper we lay the\n\t\t\t\t  foundations of COP, show how dynamic layer\n\t\t\t\t  activation enables multi-dimensional dispatch,\n\t\t\t\t  illustrate the application of COP by examples in\n\t\t\t\t  several language extensions, and demonstrate that\n\t\t\t\t  COP is largely independent of other commitments to\n\t\t\t\t  programming style.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Hirschfeld, Robert and Costanza, Pascal and Nierstrasz, Oscar",
		"BDSK-URL-1": "http://www.jot.fm/issues/issue_2008_03/article4/index.html http://www.jot.fm/issues/issue_2008_03/article4.pdf",
		"CACHED": "http://scg.unibe.ch/archive/papers/Hirs08aCOP-JOT.pdf",
		"DOI": "10.5381/jot.2008.7.3.a4",
		"JOURNAL": "Journal of Object Technology",
		"KEYWORDS": "cop-lit cop layer jot scg08 scg-pub skip-doi jb08 snf08 onhindex(104)",
		"MEDIUM": "2",
		"MISC": "March-April",
		"MONTH": "March",
		"NUMBER": "3",
		"PEERREVIEW": "yes",
		"TITLE": "Context-Oriented Programming",
		"URL": "http://www.jot.fm/issues/issue_2008_03/article4.pdf",
		"URL2": "http://www.jot.fm/contents/issue_2008_03/article4.html",
		"VOLUME": "7",
		"YEAR": "2008",
		"BDSK-URL-2": "http://www.jot.fm/issues/issue_2008_03/article4/index.html%20http://www.jot.fm/issues/issue_2008_03/article4.pdf"
	},
	{
		"key": "Hofe06a",
		"type": "inproceedings",
		"ABSTRACT": "Traditional debugging and stepping execution trace\n\t\t\t\t  are well-accepted techniques to understand deep\n\t\t\t\t  internals about a program. However in many cases\n\t\t\t\t  navigating the stack trace is not enough to find\n\t\t\t\t  bugs, since the cause of a bug is often not in the\n\t\t\t\t  stack trace anymore and old state is lost, so out of\n\t\t\t\t  reach from the debugger. In this paper, we present\n\t\t\t\t  the design and implementation of a backward-in-time\n\t\t\t\t  debugger for a dynamic language, i.e, a debugger\n\t\t\t\t  that allows one to navigate back the history of the\n\t\t\t\t  application. We present the design and\n\t\t\t\t  implementation of a backward-in-time debugger called\n\t\t\t\t  Unstuck and show our solution to key implementation\n\t\t\t\t  challenges.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Christoph Hofer and Marcus Denker and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of NODE'06",
		"INRIA": "hors",
		"KEYWORDS": "skip-doi scg-pub stefPub scg-none jb07 fb06 snf06",
		"MEDIUM": "2",
		"MONTH": "September",
		"ORGANIZATION": "Gesellschaft für Informatik (GI)",
		"PAGES": "17--32",
		"PEERREVIEW": "yes",
		"SELECTIF": "non",
		"SERIES": "Lecture Notes in Informatics",
		"TITLE": "Design and Implementation of a Backward-In-Time Debugger",
		"URL": "http://scg.unibe.ch/archive/papers/Hofe06aUnstuckNode.pdf",
		"VOLUME": "P-88",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Hofe06aUnstuckNode.pdf"
	},
	{
		"key": "Kim06a",
		"type": "inproceedings",
		"ABSTRACT": "Software repositories have been getting a lot of\n\t\t\t\t  attention from researchers in recent years. In order\n\t\t\t\t  to analyze software repositories, it is necessary to\n\t\t\t\t  first extract raw data from the version control and\n\t\t\t\t  problem tracking systems. This poses two challenges:\n\t\t\t\t  (1) extraction requires a non-trivial effort, and\n\t\t\t\t  (2) the results depend on the heuristics used during\n\t\t\t\t  extraction. These challenges burden researchers that\n\t\t\t\t  are new to the community and make it difficult to\n\t\t\t\t  benchmark software repository mining since it is\n\t\t\t\t  almost impossible to reproduce experiments done by\n\t\t\t\t  another team. In this paper we present the TA-RE\n\t\t\t\t  corpus. TA-RE collects extracted data from software\n\t\t\t\t  repositories in order to build a collection of\n\t\t\t\t  projects that will simplify extraction process.\n\t\t\t\t  Additionally the collection can be used for\n\t\t\t\t  benchmarking. As the first step we propose an\n\t\t\t\t  exchange language capable of making sharing and\n\t\t\t\t  reusing data as simple as possible.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Sunghun Kim and Thomas Zimmermann and Miryung Kim and Ahmed Hassan and Audris Mockus and Tudor Gîrba and Martin Pinzger and James Whitehead and Andreas Zeller",
		"BOOKTITLE": "Proceedings Workshop on Mining Software Repositories (MSR 2006)",
		"KEYWORDS": "evolution girba scg-pub skip-doi scg-none jb06 fb06 recast06",
		"MEDIUM": "2",
		"PAGES": "22--25",
		"PEERREVIEW": "yes",
		"TITLE": "TA-RE: An Exchange Language for Mining Software Repositories",
		"URL": "http://scg.unibe.ch/archive/papers/Kim06aTARE.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kim06aTARE.pdf"
	},
	{
		"key": "Kreb11a",
		"type": "inproceedings",
		"ABSTRACT": "Java Enterprise Applications (JEAs) are complex systems composed of various technologies and programming\n\t\t\t\tlanguages other than Java, such as XML or SQL.\n\t\t\t\tIn this heterogenous context, information is spread across various components and languages and the\n\t\t\t\tinteractions between different application elements could be hidden.\n\t\t\t\tOn the other hand, existing reverse engineering and quality assurance techniques are unable to\n\t\t\t\tanalyze JEAs since they are focused on specific components or languages.\n\t\t\t\tIn this paper we present our approach to enhance the Eclipse IDE to analyze these complex systems.\n\t\t\t\tWe extended a meta-model for Object-Oriented systems to accommodate the heterogeneous nature of JEAs.\n\t\t\t\tBy modeling JEAs we can support different kinds of analysis based on software visualizations and software metrics.\n\t\t\t\tWe implemented an Eclipse plug-in to analyze JEAs called Vera to make this solution available in one of\n\t\t\t\tthe most largely used IDE. The integration with the development environment makes the developers keep focused\n\t\t\t\ton a single tool instead of relying on several once. We demonstrate Vera by implementing a well known\n\t\t\t\tpolymetric visualization, the System Complexity view, and an improved version of the Transaction Flow\n\t\t\t\tvisualization. The latter shows what can be done by integrating information spread across different sources.\n\t\t\t\tWe also present a browser that provides an analytical view of the code.",
		"AUTHOR": "Raffael Krebs and Fabrizio Perin",
		"BOOKTITLE": "Proc. of the Sixth Workshop of the Italian Eclipse Community (Eclipse-IT)",
		"ISBN": "9788890438820",
		"KEYWORDS": "scg12 scg-pub jb12 scg11 moose-pub skip-doi snf-none",
		"LOCATION": "Milano, Italy",
		"MEDIUM": "1",
		"MONTH": "September",
		"PAGES": "28--39",
		"PEERREVIEW": "yes",
		"TITLE": "Reverse engineering Java Enterprise Applications in Eclipse",
		"URL": "http://scg.unibe.ch/archive/papers/Kreb11aVera.pdf",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kreb11aVera.pdf"
	},
	{
		"key": "Kube15a",
		"type": "inproceedings",
		"ABSTRACT": "Analyzing how software engineers use the Integrated Development Environment (IDE) is essential to better understanding how engineers carry out their daily tasks. Spotter is a code search engine for the Pharo programming language. Since its inception, Spotter has been rapidly and broadly adopted within the Pharo community. However, little is known about how practitioners employ Spotter to search and navigate within the Pharo code base. This paper evaluates how software engineers use Spotter in practice. To achieve this, we remotely gather user actions called events. These events are then visually rendered using an adequate navigation tool chain. Sequences of events are represented using a visual alphabet. We found a number of usage patterns and identified underused Spotter features. Such findings are essential for improving Spotter.",
		"AUTHOR": "Kubelka, Juraj and Bergel, Alexandre and Chiş, Andrei and Gîrba, Tudor and Reichhart, Stefan and Robbes, Romain and Syrel, Aliaksei",
		"BOOKTITLE": "Proceedings of 3rd IEEE Working Conference on Software Visualization - New Ideas and Emerging Results",
		"PAGES": "145--149",
		"PUBLISHER": "IEEE",
		"SERIES": "VISSOFT-NIER'15",
		"DOI": "10.1109/VISSOFT.2015.7332426",
		"TITLE": "On Understanding How Developers Use the Spotter Search Tool",
		"YEAR": "2015",
		"MONTH": "September",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub scg15 jb16 snf-asa1, Andrei Chis, Tudor Girba, girba feenk-pub",
		"URL": "http://scg.unibe.ch/archive/papers/Kube15a-OnUnderstandingHowDevelopersUseTheSpotterSearchTool.pdf"
	},
	{
		"key": "Kuhn05a",
		"type": "inproceedings",
		"ABSTRACT": "Understanding a software system by just analyzing\n\t\t\t\t  the structure of the system reveals only half of the\n\t\t\t\t  picture, since the structure tells us only how the\n\t\t\t\t  code is working but not what the code is about. What\n\t\t\t\t  the code is about can be found in the semantics of\n\t\t\t\t  the source code: names of identifiers, comments etc.\n\t\t\t\t  In this paper, we analyze how these terms are spread\n\t\t\t\t  over the source artifacts using Latent Semantic\n\t\t\t\t  Indexing, an information retrieval technique. We use\n\t\t\t\t  the assumption that parts of the system that use\n\t\t\t\t  similar terms are related. We cluster artifacts that\n\t\t\t\t  use similar terms, and we reveal the most relevant\n\t\t\t\t  terms for the computed clusters. Our approach works\n\t\t\t\t  at the level of the source code which makes it\n\t\t\t\t  language independent. Nevertheless, we correlated\n\t\t\t\t  the semantics with structural information and we\n\t\t\t\t  applied it at different levels of abstraction (e.g.\n\t\t\t\t  classes, methods). We applied our approach on three\n\t\t\t\t  large case studies and we report the results we\n\t\t\t\t  obtained.",
		"ACCEPTNUM": "21",
		"ACCEPTTOTAL": "58",
		"ADDRESS": "Los Alamitos CA",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Adrian Kuhn and Stéphane Ducasse and Tudor Gîrba",
		"BOOKTITLE": "Proceedings of 12th Working Conference on Reverse Engineering (WCRE'05)",
		"DOI": "10.1109/WCRE.2005.16",
		"INRIA": "hors",
		"KEYWORDS": "scg-pub semantic clustering lsi stefPub girba scg-none jb06 recast06 hapax moose-pub listic akuhn",
		"LOCATION": "Pittsburgh, PA",
		"MISC": "acceptance rate: 21/58 = 36 ",
		"MONTH": "November",
		"PAGES": "113--122",
		"PUBLISHER": "IEEE Computer Society Press",
		"RATE": "36%",
		"SELECTIF": "non",
		"TITLE": "Enriching Reverse Engineering with Semantic Clustering",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn05aSemanticClustering.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kuhn05aSemanticClustering.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2005.16"
	},
	{
		"key": "Kuhn05b",
		"type": "inproceedings",
		"ABSTRACT": "Recently there has been a revival of interest in\n\t\t\t\t  feature analysis of software systems. Approaches to\n\t\t\t\t  feature location have used a wide range of\n\t\t\t\t  techniques such as dynamic analysis, static\n\t\t\t\t  analysis, information retrieval and formal concept\n\t\t\t\t  analysis. In this paper we introduce a novel\n\t\t\t\t  approach to analyze the execution traces of features\n\t\t\t\t  using Latent Semantic Indexing (LSI). Our goal is\n\t\t\t\t  twofold. On the one hand we detect similarities\n\t\t\t\t  between features based on the content of their\n\t\t\t\t  traces, and on the other hand we categorize classes\n\t\t\t\t  based on the frequency of the outgoing invocations\n\t\t\t\t  involved in the traces. We apply our approach on two\n\t\t\t\t  case studies and we discuss its benefits and\n\t\t\t\t  drawbacks.",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Adrian Kuhn and Orla Greevy and Tudor Gîrba",
		"BOOKTITLE": "Proceedings IEEE Workshop on Program Comprehension through Dynamic Analysis (PCODA 2005)",
		"KEYWORDS": "scg-pub skip-doi semantic clustering lsi stefPub girba scg-none jb06 recast06 hapax moose-pub akuhn",
		"LOCATION": "Pittsburgh, PA",
		"MONTH": "November",
		"PAGES": "48--53",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Applying Semantic Analysis to Feature Execution Traces",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn05bHapaxPCODA2005.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kuhn05bHapaxPCODA2005.pdf"
	},
	{
		"key": "Kuhn06c",
		"type": "inproceedings",
		"ABSTRACT": "The main challenge of dynamic analysis is the huge\n\t\t\t\t  volume of data, making it difficult to extract high\n\t\t\t\t  level views. Most techniques developed so far adopt\n\t\t\t\t  a fine-grained approach to address this issue. In\n\t\t\t\t  this paper we introduce a novel approach\n\t\t\t\t  representing entire traces as signals in time.\n\t\t\t\t  Drawing this analogy between dynamic analysis and\n\t\t\t\t  signal processing, we are able to access a rich\n\t\t\t\t  toolkit of well-established and ready-to-use\n\t\t\t\t  analysis techniques. As an application of this\n\t\t\t\t  analogy, we show how to fit a visualization of the\n\t\t\t\t  complete feature space of a system on one page only:\n\t\t\t\t  our approach visualizes feature traces as time\n\t\t\t\t  plots, summarizes the trace signals and uses dynamic\n\t\t\t\t  time warping to group them by similar features. We\n\t\t\t\t  apply the approach on a case study, and discuss both\n\t\t\t\t  common and unique patterns as observed on the\n\t\t\t\t  visualization.",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Adrian Kuhn and Orla Greevy",
		"BOOKTITLE": "Proceedings IEEE International Conference on Software Maintainance (ICSM 2006)",
		"DOI": "10.1109/ICSM.2006.29",
		"KEYWORDS": "scg-pub kuhn greevy scg-none jb07 fb06 Feature Feature-Traces Dynamic Analysis moose-pub recast07 snf06 akuhn",
		"MEDIUM": "2",
		"MONTH": "September",
		"PAGES": "320--329",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Exploiting the Analogy Between Traces and Signal Processing",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn06cTraceSignalICSM2006.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kuhn06cTraceSignalICSM2006.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.2006.29"
	},
	{
		"key": "Kuhn06d",
		"type": "inproceedings",
		"ABSTRACT": "One of the key challenges of dynamic analysis\n\t\t\t\t  approaches is that they imply a huge volume of data,\n\t\t\t\t  thus making it difficult to extract high level\n\t\t\t\t  views. In this paper we describe a novel approach to\n\t\t\t\t  trace summarization by visually representing entire\n\t\t\t\t  traces as signals in time. Our technique produces a\n\t\t\t\t  visualization of the complete feature space of a\n\t\t\t\t  system that fits on one page. The focus of our work\n\t\t\t\t  is to visually represent individual traces feature\n\t\t\t\t  behavior. We assume a one-to-one mapping between\n\t\t\t\t  features and traces. We apply the approach on a case\n\t\t\t\t  study, and discuss how our visualization supports\n\t\t\t\t  the reverse engineer to identify patterns in traces\n\t\t\t\t  of features. Moreover, we show how the visual\n\t\t\t\t  analysis of our trace signals reveals that assumed\n\t\t\t\t  one-to-one mappings between features and traces may\n\t\t\t\t  be flawed.",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Adrian Kuhn and Orla Greevy",
		"BOOKTITLE": "Proceedings IEEE Workshop on Program Comprehension through Dynamic Analysis (PCODA 2006)",
		"KEYWORDS": "scg-pub skip-doi snf06 scg-none jb07 fb06 moose-pub akuhn",
		"LOCATION": "Benevento, Italy",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "01--06",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Summarizing Traces as Signals in Time",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn06dTimePlot.pdf http://www.lore.ua.ac.be/Events/PCODA2006/index.html",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kuhn06dTimePlot.pdf%20http://www.lore.ua.ac.be/Events/PCODA2006/index.html"
	},
	{
		"key": "Kuhn07a",
		"type": "article",
		"ABSTRACT": "Many of the existing approaches in Software\n\t\t\t\t  Comprehension focus on program program structure or\n\t\t\t\t  external documentation. However, by analyzing formal\n\t\t\t\t  information the informal semantics contained in the\n\t\t\t\t  vocabulary of source code are overlooked. To\n\t\t\t\t  understand software as a whole, we need to enrich\n\t\t\t\t  software analysis with the developer knowledge\n\t\t\t\t  hidden in the code naming. This paper proposes the\n\t\t\t\t  use of information retrieval to exploit linguistic\n\t\t\t\t  information found in source code, such as identifier\n\t\t\t\t  names and comments. We introduce Semantic\n\t\t\t\t  Clustering, a technique based on Latent Semantic\n\t\t\t\t  Indexing and clustering to group source artifacts\n\t\t\t\t  that use similar vocabulary. We call these groups\n\t\t\t\t  semantic clusters and we interpret them as\n\t\t\t\t  linguistic topics that reveal the intention of the\n\t\t\t\t  code. We compare the topics to each other, identify\n\t\t\t\t  links between them, provide automatically retrieved\n\t\t\t\t  labels, and use a visualization to illustrate how\n\t\t\t\t  they are distributed over the system. Our approach\n\t\t\t\t  is language independent as it works at the level of\n\t\t\t\t  identifier names. To validate our approach we\n\t\t\t\t  applied it on several case studies, two of which we\n\t\t\t\t  present in this paper.",
		"ADDRESS": "Newton, MA, USA",
		"AERES": "ACL",
		"AERESTSTATUS": "2008",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Adrian Kuhn and Stéphane Ducasse and Tudor Gîrba",
		"DOI": "10.1016/j.infsof.2006.10.017",
		"IMPACTFACTOR": "0.435, SCI 2005",
		"INRIA": "hors",
		"ISSN": "0950-5849",
		"JOURNAL": "Information and Software Technology",
		"KEYWORDS": "scg07 moose-pub scg-pub snf07 jb07 recast07 girba stefPub akuhn",
		"MEDIUM": "2",
		"MISC": "SCI impact factor 0.435 (2005)",
		"MONTH": "March",
		"NUMBER": "3",
		"PAGES": "230--243",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Butterworth-Heinemann",
		"TITLE": "Semantic Clustering: Identifying Topics in Source Code",
		"URL": "http://scg.unibe.ch/archive/drafts/Kuhn06bSemanticClustering.pdf",
		"VOLUME": "49",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/drafts/Kuhn06bSemanticClustering.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.infsof.2006.10.017"
	},
	{
		"key": "Kuhn07b",
		"type": "inproceedings",
		"ABSTRACT": "When modelling a system, often there are properties\n\t\t\t\t  and operations related to a group of objects rather\n\t\t\t\t  than to a single object only. For example, given a\n\t\t\t\t  person object with an income property, the average\n\t\t\t\t  income applies to a group of persons as a whole\n\t\t\t\t  rather than to a single person. In this paper we\n\t\t\t\t  propose to extend programming languages with the\n\t\t\t\t  notion of collective behavior. Collective behavior\n\t\t\t\t  associates custom behavior with collection\n\t\t\t\t  instances, based on the type of its elements.\n\t\t\t\t  However, collective behavior is modeled as part of\n\t\t\t\t  the element's rather than the collection's class. We\n\t\t\t\t  present a proof-of-concept implementation of\n\t\t\t\t  collective behavior using Smalltalk, and validate\n\t\t\t\t  the usefulness of collective behavior considering a\n\t\t\t\t  real-life case study: 20% of the case-study's domain\n\t\t\t\t  logic is subject to collective behavior.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Adrian Kuhn",
		"BOOKTITLE": "Proceedings of 3rd ECOOP Workshop on Dynamic Languages and Applications (DYLA 2007)",
		"KEYWORDS": "scg07 scg-pub skip-doi snf07 jb08 akuhn",
		"LOCATION": "Berlin, Germany",
		"MEDIUM": "2",
		"MONTH": "August",
		"PEERREVIEW": "yes",
		"TITLE": "Collective Behavior",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn07bCollectiveBehavior.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kuhn07bCollectiveBehavior.pdf"
	},
	{
		"key": "Kuhn08a",
		"type": "inproceedings",
		"ABSTRACT": "To quickly localize defects, we want our attention\n\t\t\t\t  to be focussed on relevant failing tests. We propose\n\t\t\t\t  to improve defect localization by exploiting\n\t\t\t\t  dependencies between tests, using a JUnit extension\n\t\t\t\t  called JExample. In a case study, a monolithic\n\t\t\t\t  white-box test suite for a complex algorithm is\n\t\t\t\t  refactored into two traditional JUnit style tests\n\t\t\t\t  and to JExample. Of the three refactorings, JExample\n\t\t\t\t  reports five times fewer defect locations and\n\t\t\t\t  slightly better performance (-8-12), while having\n\t\t\t\t  similar maintenance characteristics. Compared to the\n\t\t\t\t  original implementation, JExample greatly improves\n\t\t\t\t  maintainability due the improved factorization\n\t\t\t\t  following the accepted test quality guidelines. As\n\t\t\t\t  such, JExample combines the benefits of test chains\n\t\t\t\t  with test quality aspects of JUnit style testing.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Adrian Kuhn and Bart Van Rompaey and Lea Hänsenberger and Oscar Nierstrasz and Serge Demeyer and Markus Gaelli and Koenraad Van Leemput",
		"BOOKTITLE": "Extreme Programming and Agile Processes in Software Engineering, 9th International Conference, XP 2008",
		"DOI": "10.1007/978-3-540-68255-4_8",
		"EDITOR": "P. Abrahamsson",
		"ISBN": "978-3-540-68254-7",
		"KEYWORDS": "scg08 scg-pub snf08 jb08 JExample akuhn gaelli haensenberger",
		"MEDIUM": "2",
		"PAGES": "73--82",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer",
		"SERIES": "Lecture Notes in Computer Science",
		"TITLE": "JExample: Exploiting Dependencies Between Tests to Improve Defect Localization",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn08aJExample.pdf",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kuhn08aJExample.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-540-68255-4_8"
	},
	{
		"key": "Kuhn08b",
		"type": "inproceedings",
		"ABSTRACT": "Software visualizations can provide a concise\n\t\t\t\t  overview of a complex software system.\n\t\t\t\t  Unfortunately, since software has no physical shape,\n\t\t\t\t  there is no “natural” mapping of software to a\n\t\t\t\t  two-dimensional space. As a consequence most\n\t\t\t\t  visualizations tend to use a layout in which\n\t\t\t\t  position and distance have no meaning, and\n\t\t\t\t  consequently layout typical diverges from one\n\t\t\t\t  visualization to another. We propose a consistent\n\t\t\t\t  layout for software maps in which the position of a\n\t\t\t\t  software artifact reflects its vocabulary,\n\t\t\t\t  and distance corresponds to similarity of\n\t\t\t\t  vocabulary. We use Latent Semantic Indexing (LSI) to\n\t\t\t\t  map software artifacts to a vector space, and then\n\t\t\t\t  use Multidimensional Scaling (MDS) to map this\n\t\t\t\t  vector space down to two dimensions. The resulting\n\t\t\t\t  consistent layout allows us to develop a variety of\n\t\t\t\t  thematic software maps that express very different\n\t\t\t\t  aspects of software while making it easy to compare\n\t\t\t\t  them. The approach is especially suitable for\n\t\t\t\t  comparing views of evolving software, since the\n\t\t\t\t  vocabulary of software artifacts tends to be stable\n\t\t\t\t  over time.",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Adrian Kuhn and Peter Loretan and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of 15th Working Conference on Reverse Engineering (WCRE'08)",
		"DOI": "10.1109/WCRE.2008.45",
		"ISBN": "978-0-7695-3429-9",
		"KEYWORDS": "scg08 scg-pub semantic codemap-pub clustering lsi jb09 snf09 hasler08 akuhn",
		"LOCATION": "Pittsburgh, PA",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "209--218",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Consistent Layout for Thematic Software Maps",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn08bSoftwareMap.pdf",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kuhn08bSoftwareMap.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2008.45"
	},
	{
		"key": "Kuhn08c",
		"type": "inproceedings",
		"ABSTRACT": "Tomorrow's eternal software system will co-evolve\n\t\t\t\t  with their context: their metamodels must adapt at\n\t\t\t\t  runtime to ever-changing external requirements. In\n\t\t\t\t  this paper we present FAME, a polyglot library that\n\t\t\t\t  keeps metamodels accessible and adaptable at\n\t\t\t\t  runtime. Special care is taken to establish causal\n\t\t\t\t  connection between fame-classes and host-classes. As\n\t\t\t\t  some host-languages offer limited reflection\n\t\t\t\t  features only, not all implementations feature the\n\t\t\t\t  same degree of causal connection. We present and\n\t\t\t\t  discuss three scenarios: 1) full causal connection,\n\t\t\t\t  2) no causal connection, and 3) emulated causal\n\t\t\t\t  connection. Of which, both Scenario 1 and 3 are\n\t\t\t\t  suitable to deploy fully metamodel-driven\n\t\t\t\t  applications.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Adrian Kuhn and Toon Verwaest",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kuhn08cFame.pdf% http://www.comp.lancs.ac.uk/~bencomo/MRT/MRT2008Proceedings.pdf",
		"BOOKTITLE": "Workshop on Models at Runtime",
		"KEYWORDS": "scg08 scg-pub skip-doi jb09 akuhn hasler08 tverwaes",
		"MEDIUM": "2",
		"PAGES": "57--66",
		"PEERREVIEW": "yes",
		"TITLE": "FAME, A Polyglot Library for Metamodeling at Runtime",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn08cFame.pdf http://www.comp.lancs.ac.uk/~bencomo/MRT/MRT2008Proceedings.pdf",
		"YEAR": "2008",
		"BDSK-URL-2": "http://scg.unibe.ch/archive/papers/Kuhn08cFame.pdf%20http://www.comp.lancs.ac.uk/~bencomo/MRT/MRT2008Proceedings.pdf"
	},
	{
		"key": "Kuhn08d",
		"type": "inproceedings",
		"ABSTRACT": "As object-oriented languages are extended with novel\n\t\t\t\t  modularization mechanisms, better underlying models\n\t\t\t\t  are required to implement these high-level features.\n\t\t\t\t  This paper describes CELL, a language model that\n\t\t\t\t  builds on delegation-based chains of object\n\t\t\t\t  fragments. Composition of groups of cells is used:\n\t\t\t\t  1) to represent objects, 2) to realize various forms\n\t\t\t\t  of method lookup, and 3) to keep track of method\n\t\t\t\t  references. A running prototype of CELL is provided\n\t\t\t\t  and used to realize the basic kernel of a Smalltalk\n\t\t\t\t  system. The paper shows, using several examples, how\n\t\t\t\t  higher-level features such as traits can be\n\t\t\t\t  supported by the lower-level model.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Adrian Kuhn and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 2nd Workshop on Virtual Machines and Intermediate Languages for Emerging Modularization Mechanisms (VMIL 2008), Nashville, Tennessee, Oct. 19, 2008",
		"DOI": "10.1145/1507504.1507505",
		"EDITOR": "Hridesh Rajan",
		"ISBN": "978-1-60558-384-6",
		"KEYWORDS": "cell scg08 scg-pub snf09 jb09 akuhn",
		"MEDIUM": "2",
		"PAGES": "1--12",
		"PEERREVIEW": "yes",
		"TITLE": "Composing New Abstractions From Object Fragments",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn08dCells.pdf",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kuhn08dCells.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1507504.1507505"
	},
	{
		"key": "Kuhn09a",
		"type": "inproceedings",
		"ABSTRACT": "As more and more open-source software components\n\t\t\t\t  become available on the internet we need automatic\n\t\t\t\t  ways to label and compare them. For example, a\n\t\t\t\t  developer who searches for reusable software must be\n\t\t\t\t  able to quickly gain an understanding of retrieved\n\t\t\t\t  components. This understanding cannot be gained at\n\t\t\t\t  the level of source code due to the semantic gap\n\t\t\t\t  between source code and the domain model. In this\n\t\t\t\t  paper we present a lexical approach that uses the\n\t\t\t\t  log-likelihood ratios of word frequencies to\n\t\t\t\t  automatically provide labels for software\n\t\t\t\t  components. We present a prototype implementation of\n\t\t\t\t  our labeling/comparison algorithm and provide\n\t\t\t\t  examples of its application. In particular, we apply\n\t\t\t\t  the approach to detect trends in the evolution of a\n\t\t\t\t  software system.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Adrian Kuhn",
		"BOOKTITLE": "MSR '09: Proceedings of the 2009 6th IEEE International Working Conference on Mining Software Repositories",
		"DOI": "10.1109/MSR.2009.5069499",
		"KEYWORDS": "scg09 scg-pub jb09 snf09 akuhn codemap-pub",
		"LOCATION": "Vancouver, Canada",
		"MEDIUM": "2",
		"PAGES": "175--178",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE",
		"TITLE": "Automatic Labeling of Software Components and their Evolution using Log-Likelihood Ratio of Word Frequencies in Source Code",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn09aLogLikelihoodRatio.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kuhn09aLogLikelihoodRatio.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/MSR.2009.5069499"
	},
	{
		"key": "Kuhn10a",
		"type": "inproceedings",
		"ABSTRACT": "Search-driven development is mainly concerned with\n\t\t\t\t  code reuse but also with code navigation and\n\t\t\t\t  debugging. In this essay we look at search-driven\n\t\t\t\t  navigation in the IDE. We consider Smalltalk-80 as\n\t\t\t\t  an example of a programming system with\n\t\t\t\t  search-driven navigation capabilities and explore\n\t\t\t\t  its human factors. We present how immediate search\n\t\t\t\t  results lead to a user experience of code browsing\n\t\t\t\t  rather than one of waiting for and clicking through\n\t\t\t\t  search results. We explore the socio-technical\n\t\t\t\t  congruence of immediate search, ie unification of\n\t\t\t\t  tasks and breakpoints with method calls, which leads\n\t\t\t\t  to simpler and more extensible development tools.\n\t\t\t\t  Eventually we conclude with remarks on the\n\t\t\t\t  socio-technical congruence of search-driven\n\t\t\t\t  development.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Adrian Kuhn",
		"BOOKTITLE": "ICSE Workshop on Search-Driven Development-Users, Infrastructure, Tools and Evaluation, 2010. SUITE '10.",
		"DOI": "10.1145/1809175.1809182",
		"KEYWORDS": "codesearch scg-pub scg10 akuhn-pub suite2010 snf10 jb10",
		"MEDIUM": "1",
		"PEERREVIEW": "yes",
		"TITLE": "Immediate Search in the IDE as an Example of Socio-Technical Congruence in Search-Driven Development",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn10a-codesearch.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kuhn10a-codesearch.pdf"
	},
	{
		"key": "Kuhn10b",
		"type": "article",
		"ABSTRACT": "Software visualizations can provide a concise\n\t\t\t\t  overview of a complex software system.\n\t\t\t\t  Unfortunately, as software has no physical shape,\n\t\t\t\t  there is no `natural' mapping of software to a\n\t\t\t\t  two-dimensional space. As a consequence most\n\t\t\t\t  visualizations tend to use a layout in which\n\t\t\t\t  position and distance have no meaning, and\n\t\t\t\t  consequently layout typically diverges from one\n\t\t\t\t  visualization to another. We propose an approach to\n\t\t\t\t  consistent layout for software visualization, called\n\t\t\t\t  Software Cartography, in which the position of a\n\t\t\t\t  software artifact reflects its vocabulary, and\n\t\t\t\t  distance corresponds to similarity of vocabulary. We\n\t\t\t\t  use Latent Semantic Indexing (LSI) to map software\n\t\t\t\t  artifacts to a vector space, and then use\n\t\t\t\t  Multidimensional Scaling (MDS) to map this vector\n\t\t\t\t  space down to two dimensions. The resulting\n\t\t\t\t  consistent layout allows us to develop a variety of\n\t\t\t\t  thematic software maps that express very different\n\t\t\t\t  aspects of software while making it easy to compare\n\t\t\t\t  them. The approach is especially suitable for\n\t\t\t\t  comparing views of evolving software, as the\n\t\t\t\t  vocabulary of software artifacts tends to be stable\n\t\t\t\t  over time. We present a prototype implementation of\n\t\t\t\t  Software Cartography, and illustrate its use with\n\t\t\t\t  practical examples from numerous open-source case\n\t\t\t\t  studies.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Adrian Kuhn and David Erni and Peter Loretan and Oscar Nierstrasz",
		"DOI": "10.1002/smr.414",
		"JOURNAL": "Journal of Software Maintenance and Evolution (JSME)",
		"KEYWORDS": "scg-pub scg10 akuhn codemap-pub jb10 snf10",
		"MEDIUM": "2",
		"MONTH": "April",
		"NUMBER": "3",
		"PAGES": "191--210",
		"PEERREVIEW": "yes",
		"TITLE": "Software Cartography: Thematic Software Visualization with Consistent Layout",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn10bSoftwareMaps.pdf",
		"VOLUME": "22",
		"YEAR": "2010",
		"BDSK-URL-1": "http://dx.doi.org/10.1002/smr.414"
	},
	{
		"key": "Kuhn10c",
		"type": "inproceedings",
		"ABSTRACT": "Software visualization can be of great use for\n\t\t\t\t  understanding and exploring a software system in an\n\t\t\t\t  intuitive manner. Spatial representation of software\n\t\t\t\t  is a promising approach of increasing interest.\n\t\t\t\t  However, little is known about how developers\n\t\t\t\t  interact with spatial visualizations that are\n\t\t\t\t  embedded in the IDE. In this paper, we present a\n\t\t\t\t  pilot study that explores the use of Software\n\t\t\t\t  Cartography for program comprehension of an unknown\n\t\t\t\t  system. We investigated whether developers establish\n\t\t\t\t  a spatial memory of the system, whether clustering\n\t\t\t\t  by topic offers a sound base layout, and how\n\t\t\t\t  developers interact with maps. We report our results\n\t\t\t\t  in the form of observations, hypotheses, and\n\t\t\t\t  implications. Key findings are a) that developers\n\t\t\t\t  made good use of the map to inspect search results\n\t\t\t\t  and call graphs, and b) that developers found the\n\t\t\t\t  base layout surprising and often confusing. We\n\t\t\t\t  conclude with concrete advice for the design of\n\t\t\t\t  embedded software maps",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Adrian Kuhn and David Erni and Oscar Nierstrasz",
		"BOOKTITLE": "SOFTVIS 2010",
		"DOI": "10.1145/1879211.1879229",
		"KEYWORDS": "scg-pub snf11 scg10 jb11 akuhn codemap-pub",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "113--122",
		"PEERREVIEW": "yes",
		"TITLE": "Embedding Spatial Software Visualization in the IDE: an Exploratory Study",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn10c-softvis2010-kuhn-codemap-userstudy.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kuhn10c-softvis2010-kuhn-codemap-userstudy.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1879211.1879229"
	},
	{
		"key": "Kuhn10d",
		"type": "inproceedings",
		"ABSTRACT": "Meaningful method names are crucial for the readability and maintainability of software. Existing naming conventions focus on syntactic details, leaving programmers with little or no support in choosing meaningful (domain) names. In this paper we propose to build a recommendation system that supports software developers and software architects when naming identifiers in source code as well as when naming elements in UML diagrams. We discuss related work, outline the design of such a recommendation system and discuss possible evaluation strategies.",
		"ADDRESS": "New York, NY, USA",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Adrian Kuhn",
		"BOOKTITLE": "Proceedings of the 2nd International Workshop on Recommendation Systems for Software Engineering",
		"DOI": "10.1145/1808920.1808932",
		"ISBN": "978-1-60558-974-9",
		"KEYWORDS": "scg-pub snf11 scg10 jb11 akuhn",
		"LOCATION": "Cape Town, South Africa",
		"MEDIUM": "2",
		"PAGES": "50--51",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM",
		"SERIES": "RSSE '10",
		"TITLE": "On recommending meaningful names in source and UML",
		"URL": "http://scg.unibe.ch/archive/papers/Kuhn10d.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kuhn10d.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1808920.1808932"
	},
	{
		"key": "Kurs13a",
		"type": "incollection",
		"AUTHOR": "Jan Kurš and Guillaume Larcheveque and Lukas Renggli and Alexandre Bergel and Damien Cassou and Stéphane Ducasse and Jannik Laval",
		"BOOKTITLE": "Deep Into Pharo",
		"ISBN": "978-3-9523341-6-4",
		"KEYWORDS": "skip-abstract skip-doi scg-pub scg13 snf-asa1 jb14 kursjan",
		"MEDIUM": "2",
		"MONTH": "September",
		"PAGES": "36",
		"PEERREVIEW": "no",
		"PUBLISHER": "Square Bracket Associates",
		"TITLE": "PetitParser: Building Modular Parsers",
		"URL": "http://scg.unibe.ch/archive/papers/Kurs13a-PetitParser.pdf",
		"YEAR": "2013",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kurs13a-PetitParser.pdf"
	},
	{
		"key": "Kurs14a",
		"type": "inproceedings",
		"ABSTRACT": "The domain of context-free languages has been extensively\n                explored and there exist numerous techniques for parsing (all\n                or a subset of) context-free languages. Unfortunately, some\n                programming languages are not context-free. Using standard\n                context-free parsing techniques to parse a context-sensitive\n                programming language poses a considerable challenge. Im-\n                plementors of programming language parsers have adopted\n                various techniques, such as hand-written parsers, special lex-\n                ers, or post-processing of an ambiguous parser output to deal\n                with that challenge.\n                In this paper we suggest a simple extension of a top-down\n                parser with contextual information. Contrary to the tradi-\n                tional approach that uses only the input stream as an input to\n                a parsing function, we use a parsing context that provides ac-\n                cess to a stream and possibly to other context-sensitive infor-\n                mation. At a same time we keep the context-free formalism\n                so a grammar definition stays simple without mind-blowing\n                context-sensitive rules. We show that our approach can be\n                used for various purposes such as indent-sensitive parsing,\n                a high-precision island parsing or XML (with arbitrary el-\n                ement names) parsing. We demonstrate our solution with\n                PetitParser, a parsing-expression grammar based, top-down,\n                parser combinator framework written in Smalltalk.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Jan Kurš and Mircea Lungu and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of International Workshop on Smalltalk Technologies (IWST 2014)",
		"KEYWORDS": "scg14 scg-pub jb14 snf-asa1 skip-doi kursjan",
		"LOCATION": "Cambridge, England",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"TITLE": "Top-Down Parsing with Parsing Contexts",
		"URL": "http://scg.unibe.ch/archive/papers/Kurs14a-ParsingContext.pdf",
		"YEAR": "2014"
	},
	{
		"key": "Kurs14b",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Jan Kurš and Mircea Lungu and Oscar Nierstrasz",
		"TITLE": "Bounded Seas: Island Parsing Without Shipwrecks",
		"ABSTRACT": " Imprecise manipulation of source code (semi-parsing) is useful for tasks such as robust parsing, error recovery, lexical analysis, and rapid development of parsers for data extraction. An island grammar precisely defines only a subset of a language syntax (islands), while the rest of the syntax (water) is defined imprecisely.\n    Usually, water is defined as the negation of islands. Albeit simple, such a definition of water is naive and impedes composition of islands. When developing an island grammar, sooner or later a programmer has to create water tailored to each individual island. Such an approach is fragile, however, because water can change with any change of a grammar. It is time-consuming, because water is defined manually by a programmer and not automatically. Finally, an island surrounded by water cannot be reused because water has to be defined for every grammar individually.\n    In this paper we propose a new technique of island parsing - bounded seas. Bounded seas are composable, robust, reusable and easy to use because island-specific water is created automatically. We integrated bounded seas into a parser combinator framework as a demonstration of their composability and reusability.",
		"YEAR": "2014",
		"ISBN": "978-3-319-11244-2",
		"BOOKTITLE": "Software Language Engineering",
		"VOLUME": "8706",
		"SERIES": "Lecture Notes in Computer Science",
		"EDITOR": "Combemale, Benoît and Pearce, David J. and Barais, Olivier and Vinju, Jurgen J.",
		"DOI": "10.1007/978-3-319-11245-9_4",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"URL": "http://scg.unibe.ch/archive/papers/Kurs14b-BoundedSeas.pdf",
		"PUBLISHER": "Springer International Publishing",
		"PAGES": "62-81",
		"LANGUAGE": "English",
		"KEYWORDS": "scg-pub, scg14, jb15, snf-asa1, kursjan",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kurs14b-BoundedSeas.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-319-11245-9_4"
	},
	{
		"key": "Kurs15a",
		"type": "article",
		"TITLE": "Bounded seas",
		"JOURNAL": "Computer Languages, Systems & Structures",
		"VOLUME": "44, Part A",
		"PAGES": "114 - 140",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"YEAR": "2015",
		"ANNOTE": "internationaljournal",
		"NOTE": "Special issue on the 6th and 7th International Conference on Software Language Engineering (SLE 2013 and SLE 2014)",
		"ISSN": "1477-8424",
		"DOI": "10.1016/j.cl.2015.08.002",
		"URL": "http://scg.unibe.ch/archive/papers/Kurs15a-BoundedSeas.pdf",
		"AUTHOR": "Jan Kurš and Mircea Lungu and Rathesan Iyadurai and Oscar Nierstrasz",
		"KEYWORDS": "Semi-parsing, Island parsing, Parsing expression grammars, scg-pub, scg15, jb16, snf-asa1, kursjan",
		"ABSTRACT": "Abstract Imprecise manipulation of source code (semi-parsing) is useful for tasks such as robust parsing, error recovery,\n        lexical analysis, and rapid development of parsers for data extraction. An island grammar precisely defines only a subset of a\n        language syntax (islands), while the rest of the syntax (water) is defined imprecisely. Usually water is defined as the negation of islands.\n        Albeit simple, such a definition of water is naive and impedes composition of islands. When developing an island grammar, sooner or later a\n        language engineer has to create water tailored to each individual island. Such an approach is fragile, because water can change with any\n        change of a grammar. It is time-consuming, because water is defined manually by an engineer and not automatically. Finally, an island surrounded\n        by water cannot be reused because water has to be defined for every grammar individually. In this paper we propose a new technique of\n        island parsing — bounded seas. Bounded seas are composable, robust, reusable and easy to use because island-specific water is created\n        automatically. Our work focuses on applications of island parsing to data extraction from source code. We have integrated bounded seas\n        into a parser combinator framework as a demonstration of their composability and reusability.",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Kurs15a-BoundedSeas.pdf"
	},
	{
		"key": "Kurs16a",
		"type": "inproceedings",
		"ABSTRACT": "Parser combinators are a popular approach to parsing. Parser combinators follow the structure of an underlying grammar, are modular, well-structured, easy to maintain, and can recognize a large variety of languages including context-sensitive ones. However, their universality and flexibility introduces a noticeable performance overhead. Time-wise, parser combinators cannot compete with parsers generated by well-performing parser generators or optimized hand-written code.\nTechniques exist to achieve a linear asymptotic performance of parser combinators, yet there is still a significant constant multiplier. This can be further lowered using meta-programming techniques.\nIn this work we present a more traditional approach to optimization — a compiler — applied to the domain of parser combinators. A parser combinator compiler (pc-compiler) analyzes a parser combinator, applies parser combinator-specific optimizations and, generates an equivalent high-performance top-down parser. Such a compiler preserves the advantages of parser combinators while complementing them with better performance.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Jan Kurš and Jan Vraný and Mohammad Ghafari and Mircea Lungu and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of International Workshop on Smalltalk Technologies (IWST 2016)",
		"KEYWORDS": "scg16 scg-pub jb17 snf-asa2 kursjan petitcompiler",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"TITLE": "Optimizing Parser Combinators",
		"URL": "http://scg.unibe.ch/archive/papers/Kurs16a-Compiler.pdf",
		"YEAR": "2016",
		"PAGES": "1:1--1:13",
		"ISBN": "978-1-4503-4524-8",
		"DOI": "10.1145/2991041.2991042"
	},
	{
		"key": "Kurs16b",
		"type": "misc",
		"AUTHOR": "Kurš, Jan and Lungu, Mircea and Nierstrasz, Oscar and Steinmann, Thomas",
		"TITLE": "Polite Smalltalk — An Implementation",
		"ABSTRACT": "Polite Smalltalk is a programming language\n\t\tthat allows programmers to use sentence case identifiers — a\n\t\tnotation for embedding spaces in identifiers. We hope that a\n\t\tsyntax like that of Polite will encourage developers to write\n\t\tmore readable code. Even the smallest increase in code\n\t\treadability is to be desired since software developers spend\n\t\tthe largest part of their time reading code rather than\n\t\twriting it.",
		"KEYWORDS": "scg16 scg-pub jb17 snf-none kursjan politesmalltalk",
		"MONTH": "September",
		"YEAR": "2016",
		"DOI": "10.5281/zenodo.61578",
		"MEDIUM": "1",
		"PEERREVIEW": "no",
		"URL": "http://dx.doi.org/10.5281/zenodo.61578"
	},
	{
		"key": "Kurs17a",
		"type": "article",
		"TITLE": "Efficient parsing with parser combinators",
		"JOURNAL": "Science of Computer Programming",
		"ANNOTE": "internationaljournal",
		"VOLUME": "161",
		"PAGES": "57.88",
		"MONTH": "September",
		"YEAR": "2018",
		"ISSN": "0167-6423",
		"DOI": "10.1016/j.scico.2017.12.001",
		"URL": "http://scg.unibe.ch/archive/papers/Kurs17a.pdf",
		"AUTHOR": "Jan Kurš and Jan Vraný and Mohammad Ghafari and Mircea Lungu and Oscar Nierstrasz",
		"KEYWORDS": "scg-pub, snf-asa2, scg17, jb18, kursjan",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"ABSTRACT": "Abstract Parser combinators offer a universal and flexible approach to\n\tparsing. They follow the structure of an underlying grammar, are modular,\n\twell-structured, easy to maintain, and can recognize a large variety of languages\n\tincluding context-sensitive ones. However, these advantages introduce a noticeable\n\tperformance overhead mainly because the same powerful parsing algorithm is used to\n\trecognize even simple languages. Time-wise, parser combinators cannot compete with\n\tparsers generated by well-performing parser generators or optimized hand-written code.\n\tTechniques exist to achieve a linear asymptotic performance of parser combinators, yet\n\tthere is a significant constant multiplier. The multiplier can be lowered to some\n\tdegree, but this requires advanced meta-programming techniques, such as staging or\n\tmacros, that depend heavily on the underlying language technology. In this work we\n\tpresent a language-agnostic solution. We optimize the performance of parsing\n\tcombinators with specializations of parsing strategies. For each combinator, we\n\tanalyze the language parsed by the combinator and choose the most efficient parsing\n\tstrategy. By adapting a parsing strategy for different parser combinators we achieve\n\tperformance comparable to that of hand-written or optimized parsers while preserving\n\tthe advantages of parsers combinators."
	},
	{
		"key": "Lang08a",
		"type": "inproceedings",
		"ABSTRACT": "Systems must co-evolve with their context. Reverse\n\t\t\t\t  engineering tools are a great help in this process\n\t\t\t\t  of required adaption. In order for these tools to be\n\t\t\t\t  flexible, they work with models, abstract\n\t\t\t\t  representations of the source code. The extraction\n\t\t\t\t  of such information from source code can be done\n\t\t\t\t  using a parser. However, it is fairly tedious to\n\t\t\t\t  build new parsers. And this is made worse by the\n\t\t\t\t  fact that it has to be done over and over again for\n\t\t\t\t  every language we want to analyze. In this paper we\n\t\t\t\t  propose a novel approach which minimizes the\n\t\t\t\t  knowledge required of a certain language for the\n\t\t\t\t  extraction of models implemented in that language by\n\t\t\t\t  reflecting on the implementation of preparsed ASTs\n\t\t\t\t  provided by an IDE. In a second phase we use a\n\t\t\t\t  technique referred to as Model Mapping by Example to\n\t\t\t\t  map platform dependent models onto domain specific\n\t\t\t\t  model.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Daniel Langone and Toon Verwaest",
		"BOOKTITLE": "2nd Workshop on FAMIX and Moose in Software Reengineering (FAMOOSr 2008)",
		"KEYWORDS": "scg08 scg-pub skip-doi jb09 hasler08 moose-pub tverwaes",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "32--35",
		"PEERREVIEW": "yes",
		"TITLE": "Extracting models from IDEs",
		"URL": "http://scg.unibe.ch/archive/papers/Lang08aModelExtraction.pdf",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lang08aModelExtraction.pdf"
	},
	{
		"key": "Lang11a",
		"type": "inproceedings",
		"ABSTRACT": "Subjective behavior is essential for applications that must adapt\n\t\t\t\t  their behavior to changing circumstances. Many different solutions\n\t\t\t\t  have been proposed in the past, based, for example, on perspectives,\n\t\t\t\t  roles, contextual layers, and \"force trees\". Although these approaches\n\t\t\t\t  are somehow equally expressive, each imposes a particular world view\n\t\t\t\t  which may not be appropriate for all applications.\n\t\t\t\t  We propose a unification of these approaches, called Subjectopia,\n\t\t\t\t  which makes explicit the underlying abstractions needed to support\n\t\t\t\t  subjective behavior, namely subjects, contextual elements and decision\n\t\t\t\t  strategies. We demonstrate how Subjectopia subsumes existing approaches,\n\t\t\t\t  provides a more general foundation for modeling subjective behavior,\n\t\t\t\t  and offers a means to alter subjective behavior in a running system.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Daniel Langone and Jorge Ressia and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 49th International Conference on Objects, Models, Components and Patterns (TOOLS'11)",
		"DOI": "10.1007/978-3-642-21952-8_10",
		"KEYWORDS": "scg-pub scg11 snf11 jb11 bifrost ercim11",
		"MEDIUM": "2",
		"MONTH": "June",
		"PAGES": "115--130",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"RATEX": "28%",
		"SERIES": "LNCS",
		"TITLE": "Unifying Subjectivity",
		"URL": "http://scg.unibe.ch/archive/papers/Lang11aSubjectivity.pdf",
		"VOLUME": "6705",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lang11aSubjectivity.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-642-21952-8_10"
	},
	{
		"key": "Lanz01a",
		"type": "inproceedings",
		"ABSTRACT": "One of the main problems which arises in the field\n\t\t\t\t  of software evolution is the sheer amount of\n\t\t\t\t  information to be dealt with. Compared to reverse\n\t\t\t\t  engineering where the main goal is the main\n\t\t\t\t  understanding of one single system. In the field of\n\t\t\t\t  software evolution this information is multiplied by\n\t\t\t\t  the number of versions of the system one wants to\n\t\t\t\t  understand. To counter this problem we have come up\n\t\t\t\t  with a flexible query engine which can perform\n\t\t\t\t  queries on the different versions of a system. In\n\t\t\t\t  this paper we give an outlook on our current work in\n\t\t\t\t  the field of software evolution and focus\n\t\t\t\t  particularly on the concepts behind the query engine\n\t\t\t\t  we have built.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Michele Lanza and Stéphane Ducasse and Lukas Steiger",
		"BOOKTITLE": "Proceedings of the Workshop on Formal Foundations of Software Evolution",
		"KEYWORDS": "scg-pub skip-doi snf01 scg-none jb01 stefPub moose-pub",
		"TITLE": "Understanding Software Evolution using a Flexible Query Engine",
		"URL": "http://scg.unibe.ch/archive/papers/Lanz01aQueryEngine.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lanz01aQueryEngine.pdf"
	},
	{
		"key": "Lanz01b",
		"type": "inproceedings",
		"ABSTRACT": "The reengineering and reverse engineering of\n\t\t\t\t  software systems is gaining importance in software\n\t\t\t\t  industry, because the accelerated turnover in\n\t\t\t\t  software companies creates legacy systems in a\n\t\t\t\t  shorter period of time. Especially understanding\n\t\t\t\t  classes is a key activity in object-oriented\n\t\t\t\t  programming, since classes represent the primary\n\t\t\t\t  abstractions from which applications are built. The\n\t\t\t\t  main problem of this task is to quickly grasp the\n\t\t\t\t  purpose of a class and its inner structure. To help\n\t\t\t\t  the reverse engineers in their first contact with a\n\t\t\t\t  foreign system, we propose a categorization of\n\t\t\t\t  classes based on the visualization of their internal\n\t\t\t\t  structure. The contributions of this paper are a\n\t\t\t\t  novel categorization of classes and a visualization\n\t\t\t\t  of the classes which we call the class blueprint. We\n\t\t\t\t  have validated the categorization on several case\n\t\t\t\t  studies, two of which we present here.",
		"ACCEPTNUM": "27",
		"ACCEPTTOTAL": "145",
		"ANNOTE": "internationalconference topconference",
		"AUTHOR": "Michele Lanza and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of 16th International Conference on Object-Oriented Programming Systems, Languages and Applications (OOPSLA '01)",
		"DOI": "10.1145/504282.504304",
		"KEYWORDS": "scg-pub snf01 scg-none jb01 stefPub moose-pub",
		"MISC": "acceptance rate: 27/145 = 18",
		"PAGES": "300--311",
		"PUBLISHER": "ACM Press",
		"TITLE": "A Categorization of Classes based on the Visualization of their Internal Structure: the Class Blueprint",
		"URL": "http://scg.unibe.ch/archive/papers/Lanz01bClassBlueprint.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lanz01bClassBlueprint.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/504282.504304"
	},
	{
		"key": "Lanz01c",
		"type": "inproceedings",
		"ABSTRACT": "One of the major problems in software evolution is\n\t\t\t\t  coping with the complexity which stems from the huge\n\t\t\t\t  amount of data that must be considered. The current\n\t\t\t\t  approaches to deal with that problem all aim at a\n\t\t\t\t  reduction of complexity and a filtering of the\n\t\t\t\t  relevant information. In this paper we propose an\n\t\t\t\t  approach based on a com- bination of software\n\t\t\t\t  visualization and software metrics which we have\n\t\t\t\t  already successfully applied in the field of\n\t\t\t\t  software reverse engineering. Using this approach we\n\t\t\t\t  discuss a simple and effective way to visualize the\n\t\t\t\t  evolution of software systems which helps to recover\n\t\t\t\t  the evolution of object oriented software systems.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Michele Lanza",
		"BOOKTITLE": "Proceedings of IWPSE 2001 (International Workshop on Principles of Software Evolution)",
		"DOI": "10.1145/602461.602467",
		"KEYWORDS": "scg-pub snf01 scg-none jb01 moose-pub",
		"PAGES": "37--42",
		"TITLE": "The Evolution Matrix: Recovering Software Evolution using Software Visualization Techniques",
		"URL": "http://scg.unibe.ch/archive/papers/Lanz01cEvolutionMatrix.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lanz01cEvolutionMatrix.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/602461.602467"
	},
	{
		"key": "Lanz01d",
		"type": "inproceedings",
		"ABSTRACT": "Understanding classes is a key activity in\n\t\t\t\t  object-oriented programming, since classes represent\n\t\t\t\t  the primary abstractions from which applications are\n\t\t\t\t  built. The main problem of this task is to quickly\n\t\t\t\t  grasp the purpose and inner structure of a class. In\n\t\t\t\t  this paper we discuss the class blueprint, a\n\t\t\t\t  visualization of the inner structure of classes.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Michele Lanza and Stéphane Ducasse",
		"BOOKTITLE": "Workshop Proceedings of OOPSLA 2001",
		"KEYWORDS": "scg-pub skip-doi snf01 scg-none jb01 stefPub moose-pub",
		"TITLE": "The Class Blueprint: A Visualization of the Internal Structure of Classes",
		"URL": "http://scg.unibe.ch/archive/papers/Lanz01dClassBlueprint.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lanz01dClassBlueprint.pdf"
	},
	{
		"key": "Lanz02a",
		"type": "inproceedings",
		"ABSTRACT": "Coping with huge amounts of data is one of the major\n\t\t\t\t  problems in the context of software evolution.\n\t\t\t\t  Current approaches reduce this complexity by\n\t\t\t\t  filtering out irrelevant information. In this paper\n\t\t\t\t  we propose an approach based on a combination of\n\t\t\t\t  software visualization and software metrics, as\n\t\t\t\t  software visualization is apt for complexity\n\t\t\t\t  reduction and metrics introduce the possibility to\n\t\t\t\t  qualify evolution. We discuss a simple and effective\n\t\t\t\t  way to visualize the evolution of software systems\n\t\t\t\t  which helps to recover the evolution of object\n\t\t\t\t  oriented software systems. In addition we define a\n\t\t\t\t  vocabulary that qualifies some specific situations\n\t\t\t\t  that occurs when considering system evolution.",
		"ADDRESS": "Paris",
		"ANNOTE": "nationalconference",
		"AUTHOR": "Michele Lanza and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of Langages et Modèles à Objets (LMO'02)",
		"KEYWORDS": "scg-pub skip-doi scg-none jb02 snf02 stefPub moose-pub",
		"PAGES": "135--149",
		"PUBLISHER": "Lavoisier",
		"TITLE": "Understanding Software Evolution Using a Combination of Software Visualization and Software Metrics",
		"URL": "http://scg.unibe.ch/archive/papers/Lanz02aEvolutionMatrix.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lanz02aEvolutionMatrix.pdf"
	},
	{
		"key": "Lanz02b",
		"type": "inproceedings",
		"ABSTRACT": "Software Metrics have become essential in software\n\t\t\t\t  engineering for several reasons, among which quality\n\t\t\t\t  assessment and reengineering. In the context of the\n\t\t\t\t  European Esprit Pro ject FAMOOS, whose main goal was\n\t\t\t\t  to provide methodologies for the reengineering of\n\t\t\t\t  large industrial software systems, we have developed\n\t\t\t\t  the Moose Reengineering Environment, based on the\n\t\t\t\t  language independent FAMIX metamodel. Moose includes\n\t\t\t\t  a metrics engine which supports language independent\n\t\t\t\t  metrics, since coping with software written in\n\t\t\t\t  different implementation languages was one of the\n\t\t\t\t  project's main constraints. Our current research is\n\t\t\t\t  pushing us towards the development and\n\t\t\t\t  implementation of a metametamodel, which would\n\t\t\t\t  include our metamodel and allow for several\n\t\t\t\t  extension in different research directions, among\n\t\t\t\t  which concept analysis, knowledge management and\n\t\t\t\t  software evolution. In this article we want to\n\t\t\t\t  present our current and future work for the\n\t\t\t\t  transition from language independent to domain\n\t\t\t\t  independent metrics.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Michele Lanza and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of the 6th International Workshop on Quantitative Approaches in Object-Oriented Software Engineering",
		"EDITOR": "Fernando Brito e Abreu and Mario Piattini and Geert Poels and Houari A. Sahraoui",
		"ISBN": "84-699-8696-1",
		"KEYWORDS": "scg-pub skip-doi scg-none jb02 snf02 stefPub moose-pub",
		"PAGES": "77--84",
		"TITLE": "Beyond Language Independent Object-Oriented Metrics: Model Independent Metrics",
		"URL": "http://scg.unibe.ch/archive/papers/Lanz02bModelIndependentMetrics.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lanz02bModelIndependentMetrics.pdf"
	},
	{
		"key": "Lanz03a",
		"type": "inproceedings",
		"ABSTRACT": "Software visualization tools face many challenges in\n\t\t\t\t  terms of their implementation, including\n\t\t\t\t  scalability, usability, adaptability, and\n\t\t\t\t  durability. Such tools, like many other research\n\t\t\t\t  tools, tend to have a short life cycle and are\n\t\t\t\t  vulnerble to software evolution processes because of\n\t\t\t\t  the complex problem domain and the constantly\n\t\t\t\t  changing requirements which are dictated by research\n\t\t\t\t  goals. In this paper we discuss the implementation\n\t\t\t\t  of the software visualization tool CodeCrawler\n\t\t\t\t  according to five criteria, namely the overall\n\t\t\t\t  architecture, the internal architecture, the\n\t\t\t\t  visualization engine, the metamodel and the\n\t\t\t\t  interactive facilities. This discussion generates\n\t\t\t\t  implementation recommendations and design guidelines\n\t\t\t\t  that hold for our tool and the class of tools its\n\t\t\t\t  stands for. We then also extract common design\n\t\t\t\t  guidelines and recommendations that apply for other\n\t\t\t\t  software visualization and general reverse\n\t\t\t\t  engineering tools as well, and hope that these\n\t\t\t\t  insights can be used fruitfully by other researchers\n\t\t\t\t  in this field.",
		"ACCEPTNUM": "40",
		"ACCEPTTOTAL": "118",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Michele Lanza",
		"BOOKTITLE": "Proceedings of CSMR 2003",
		"DOI": "10.1109/CSMR.2003.1192450",
		"KEYWORDS": "recast03 scg-pub scg-none jb03 moose-pub",
		"MISC": "acceptance rate: 40/118 = 34",
		"PAGES": "409--418",
		"PUBLISHER": "IEEE Press",
		"TITLE": "CodeCrawler — Lessons Learned in Building a Software Visualization Tool",
		"URL": "http://scg.unibe.ch/archive/papers/Lanz03aLessonsLearned.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lanz03aLessonsLearned.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/CSMR.2003.1192450"
	},
	{
		"key": "Lanz03c",
		"type": "inproceedings",
		"ABSTRACT": "Software Visualization is, despite the many\n\t\t\t\t  publications and advances in this research field,\n\t\t\t\t  still not being considered by mainstream software\n\t\t\t\t  industry: currently very few integrated development\n\t\t\t\t  environments offer (if at all) only limited\n\t\t\t\t  visualization support, and in general it can be said\n\t\t\t\t  that software visualization is being ignored at a\n\t\t\t\t  professional level by the average software\n\t\t\t\t  developer. Moreover, even relatively successful\n\t\t\t\t  software visualization tools (such as Rigi, Shrimp,\n\t\t\t\t  JInsight, etc.) are seldom being used except by\n\t\t\t\t  their developers themselves. In this position paper,\n\t\t\t\t  based on our own experience and an analysis of the\n\t\t\t\t  current state and possible future trends of\n\t\t\t\t  integrated development environments, we put up a\n\t\t\t\t  non-exhaustive list of features that software\n\t\t\t\t  visualization tools should possess in the future to\n\t\t\t\t  have more consideration by mainstream development.",
		"AUTHOR": "Michele Lanza",
		"BOOKTITLE": "Proceedings of VisSoft 2003 (2nd International Workshop on Visualizing Software for Understanding and Analysis)",
		"KEYWORDS": "recast04 scg-pub skip-doi scg-none jb04 moose-pub",
		"PAGES": "62--67",
		"PUBLISHER": "IEEE CS Press",
		"TITLE": "Program Visualization Support for Highly Iterative Development Environments",
		"URL": "http://scg.unibe.ch/archive/papers/Lanz03cVisSoft.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lanz03cVisSoft.pdf"
	},
	{
		"key": "Lanz03d",
		"type": "article",
		"ABSTRACT": "Reverse engineering software systems has become a\n\t\t\t\t  major concern in software industry because of their\n\t\t\t\t  sheer size and complexity. This problem needs to be\n\t\t\t\t  tackled, since the systems in question are of\n\t\t\t\t  considerable worth to their owners an d maintainers.\n\t\t\t\t  In this article we present the concept of a\n\t\t\t\t  polymetric view, a lightweight software\n\t\t\t\t  visualization technique enriched with software\n\t\t\t\t  metrics information. Polymetric views help to\n\t\t\t\t  understand the structure and detect problems of a\n\t\t\t\t  software syst em in the initial phases of a reverse\n\t\t\t\t  engineering process. We discuss the benefits and\n\t\t\t\t  limits of several predefined polymetric views we\n\t\t\t\t  have implemented in our tool CodeCrawler. Moreover,\n\t\t\t\t  based on clusters of different polymetric views we\n\t\t\t\t  have developed a methodology which supports and\n\t\t\t\t  guides a software engineer in the first phases of a\n\t\t\t\t  reverse engineering of a large software system. We\n\t\t\t\t  have refined this methodology by repeatedly applying\n\t\t\t\t  it on industrial systems, and illustrate it by\n\t\t\t\t  applying a selection of polymetric views to a case\n\t\t\t\t  study.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Michele Lanza and Stéphane Ducasse",
		"DOI": "10.1109/TSE.2003.1232284",
		"JOURNAL": "Transactions on Software Engineering (TSE)",
		"KEYWORDS": "scg-pub scg-none jb04 recast04 stefPub moose-pub",
		"MISC": "SCI impact factor 1.73",
		"MONTH": "September",
		"NUMBER": "9",
		"PAGES": "782--795",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "Polymetric Views---A Lightweight Visual Approach to Reverse Engineering",
		"URL": "http://scg.unibe.ch/archive/papers/Lanz03dTSEPolymetric.pdf",
		"VOLUME": "29",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lanz03dTSEPolymetric.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/TSE.2003.1232284"
	},
	{
		"key": "Lanz03e",
		"type": "inproceedings",
		"ABSTRACT": "CodeCrawler is a language independent software visu-\n\t\t\t\t  alization tool. It is mainly targeted at visualizing\n\t\t\t\t  object- oriented software, and in its newest\n\t\t\t\t  implementation it has become a general information\n\t\t\t\t  visualization tool. It has been validated in several\n\t\t\t\t  industrial case studies over the past few years. It\n\t\t\t\t  strongly adheres to lightweight princi- ples:\n\t\t\t\t  CodeCrawler implements and visualizes polymetric\n\t\t\t\t  views, lightweight visualizations of software\n\t\t\t\t  enriched with semantic information such as software\n\t\t\t\t  metrics and source code information.",
		"ANNOTE": "tooldemo",
		"AUTHOR": "Michele Lanza",
		"BOOKTITLE": "Proceedings of VisSoft 2003 (2nd International Workshop on Visualizing Software for Understanding and Analysis)",
		"KEYWORDS": "recast04 scg-pub skip-doi scg-none jb04 moose-pub lanza",
		"PAGES": "51--52",
		"PUBLISHER": "IEEE CS Press",
		"TITLE": "CodeCrawler — A Lightweight Software Visualization Tool",
		"URL": "http://scg.unibe.ch/archive/papers/Lanz03eVisSoft.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lanz03eVisSoft.pdf"
	},
	{
		"key": "Lanz05b",
		"type": "incollection",
		"ABSTRACT": "CodeCrawler is an extensible and language\n\t\t\t\t  independent software visualization tool. It has been\n\t\t\t\t  validated in several industrial case studies over\n\t\t\t\t  the past years. CodeCrawler enables the fast\n\t\t\t\t  exploration of new visualization ideas. It\n\t\t\t\t  implements and visualizes polymetric views,\n\t\t\t\t  visualizations of software enriched with information\n\t\t\t\t  such as software metrics and other source code\n\t\t\t\t  semantics. It provides a rich set of views that can\n\t\t\t\t  be customized using a large set of metrics. While\n\t\t\t\t  CodeCrawler is mainly targeted at visualizing\n\t\t\t\t  object-oriented software, in its latest\n\t\t\t\t  implementation it has become a general information\n\t\t\t\t  visualization tool.",
		"ADDRESS": "Milano",
		"AERES": "OS",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "articlebook",
		"AUTHOR": "Michele Lanza and Stéphane Ducasse",
		"BOOKTITLE": "Tools for Software Maintenance and Reengineering",
		"INRIA": "hors",
		"ISBN": "88-464-6396-X",
		"KEYWORDS": "scg-pub skip-doi stefPub recast05 scg-none jb05 moose-pub",
		"PAGES": "74--94",
		"PUBLISHER": "Franco Angeli",
		"SELECTIF": "non",
		"SERIES": "RCOST / Software Technology Series",
		"TITLE": "CodeCrawler — An Extensible and Language Independent 2D and 3D Software Visualization Tool",
		"URL": "http://scg.unibe.ch/archive/papers/Lanz05bCCBookChapter.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lanz05bCCBookChapter.pdf"
	},
	{
		"key": "Lemo13a",
		"type": "incollection",
		"ABSTRACT": "The goal of this roadmap paper is to summarize the state-of-the-art and identify research\n\t\tchallenges when developing, deploying and managing self-adaptive software systems. Instead of dealing\n\t\twith a wide range of topics associated with the field, we focus on four essential topics of\n\t\tself-adaptation: design space for self-adaptive solutions, software engineering processes for\n\t\tself-adaptive systems, from centralized to decentralized control, and practical run-time verification\n\t\t& validation for self-adaptive systems. For each topic, we present an overview, suggest future\n\t\tdirections, and focus on selected challenges. This paper complements and extends a previous roadmap on\n\t\tsoftware engineering for self-adaptive systems published in 2009 covering a different set of topics,\n\t\tand reflecting in part on the previous paper. This roadmap is one of the many results of the Dagstuhl\n\t\tSeminar 10431 on Software Engineering for Self-Adaptive Systems, which took place in October 2010.",
		"AUTHOR": "Lemos, Rogério and Giese, Holger and Müller, Hausi and Shaw, Mary and Andersson, Jesper and Litoiu, Marin and Schmerl, Bradley and Tamura, Gabriel and Villegas, Norha and Vogel, Thomas and Weyns, Danny and Baresi, Luciano and Becker, Basil and Bencomo, Nelly and Brun, Yuriy and Cukic, Bojan and Desmarais, Ron and Dustdar, Schahram and Engels, Gregor and Geihs, Kurt and Göschka, Karl and Gorla, Alessandra and Grassi, Vincenzo and Inverardi, Paola and Karsai, Gabor and Kramer, Jeff and Lopes, Antónia and Magee, Jeff and Malek, Sam and Mankovskii, Serge and Mirandola, Raffaela and Mylopoulos, John and Nierstrasz, Oscar and Pezzè, Mauro and Prehofer, Christian and Schäfer, Wilhelm and Schlichting, Rick and Smith, Dennis and Sousa, João Pedro and Tahvildari, Ladan and Wong, Kenny and Wuttke, Jochen",
		"BOOKTITLE": "Software Engineering for Self-Adaptive Systems II",
		"DOI": "10.1007/978-3-642-35813-5_1",
		"EDITOR": "Lemos, Rogério and Giese, Holger and Müller, Hausi and Shaw, Mary",
		"ISBN": "978-3-642-35812-8",
		"KEYWORDS": "scg-pub scg13 snf-none jb13",
		"MEDIUM": "2",
		"PAGES": "1-32",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer Berlin Heidelberg",
		"SERIES": "Lecture Notes in Computer Science",
		"TITLE": "Software Engineering for Self-Adaptive Systems: A Second Research Roadmap",
		"URL": "http://dx.doi.org/10.1007/978-3-642-35813-5_1",
		"VOLUME": "7475",
		"YEAR": "2013",
		"BDSK-URL-1": "http://dx.doi.org/10.1007/978-3-642-35813-5_1"
	},
	{
		"key": "Lesk16b",
		"type": "inproceedings",
		"ABSTRACT": "Promises are synchronization constructs that hide the complexity of process synchronisation from the developer by providing a placeholder for the result of a potentially incomplete computation performed in a concurrent process. Promises evaluated by remote processes pose challenges for debugging when the remote computation raises an exception. Current debuggers are either unaware that there is a problem in the remote computation or give developers access only to the context of the remote process. This does not allow developers to interact at the same time with the process that launched the promise and the remote process that executed the promise's computation. To improve debugging of remote promises, in this paper we propose a debugger interface that presents a unified view of both the original and the remote process, by merging the call chains of the two processes at the point where the promise was created. We exemplify our approach, discuss challenges for making it practical, and illustrate through an initial prototype that it can improve debugging of exceptions in remote promises.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Max Leske and Andrei Chiş and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the International Workshop on Smalltalk Technologies",
		"SERIES": "IWST' 16",
		"TITLE": "A promising approach for debugging remote promises",
		"PAGES": "18:1--18:9",
		"YEAR": "2016",
		"KEYWORDS": "scg-pub, snf-asa2, scg16, jb16, debugging, concurrency, threads, Andrei Chis, internationalworkshop",
		"URL": "http://scg.unibe.ch/archive/papers/Lesk16b.pdf",
		"DOI": "10.1145/2991041.2991059",
		"PEERREVIEW": "yes",
		"LANGUAGE": "English",
		"MEDIUM": "2",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lesk16b.pdf"
	},
	{
		"key": "Lesk17a",
		"type": "article",
		"ABSTRACT": "Concurrency issues are inherently harder to identify and fix than issues in sequential programs, due to aspects like indeterminate order of access to shared resources and thread synchronisation. Live debuggers are often used by developers to gain insights into the behaviour of concurrent programs by exploring the call stacks of threads. Nevertheless, contemporary live debuggers for concurrent programs are usually sequential debuggers augmented with the ability to display different threads in isolation. To these debuggers every thread call stack begins with a designated start routine and the calls that led to the creation of the thread are not visible, as they are part of a different thread. This requires developers to manually link stack traces belonging to related but distinct threads, adding another burden to the already difficult act of debugging concurrent programs. To improve debugging of concurrent programs we address the problem of incomplete call stacks in debuggers through a thread and debugger model that enables live debugging of child threads within the context of their parent threads. The proposed debugger operates on a virtual thread that merges together multiple relevant threads. To better understand the features of debuggers for concurrent programs we present an in-depth discussion of the concurrency related features in current live debuggers. We test the applicability of the proposed model by instantiating it for simple threads, local and remote promises, and a remote object-oriented database. Starting from these use cases we further discuss implementation details ensuring a practical approach.",
		"TITLE": "Improving live debugging of concurrent threads through thread histories",
		"JOURNAL": "Science of Computer Programming",
		"YEAR": "2018",
		"VOLUME": "161",
		"PAGES": "122-148",
		"ISSN": "0167-6423",
		"DOI": "10.1016/j.scico.2017.10.005",
		"URL": "http://scg.unibe.ch/archive/papers/Lesk17a.pdf",
		"AUTHOR": "Max Leske and Andrei Chiş and Oscar Nierstrasz",
		"KEYWORDS": "scg-pub scg17 snf-asa2 jb18, Concurrency, Debugging, Promises, Smalltalk, Domain-specific tools, Andrei Chis",
		"PEERREVIEW": "yes",
		"LANGUAGE": "English",
		"MEDIUM": "2",
		"ANNOTE": "internationaljournal",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lesk17a.pdf",
		"BDSK-URL-2": "http://www.sciencedirect.com/science/article/pii/S0167642317302174"
	},
	{
		"key": "Leue17b",
		"type": "inproceedings",
		"TITLE": "Harvesting the Wisdom of the Crowd to Infer Method Nullness in Java",
		"AUTHOR": "Leuenberger, Manuel and Osman, Haidar and Ghafari, Mohammad and Nierstrasz, Oscar",
		"BOOKTITLE": "Proceedings of the 17th International Working Conference on Source Code Analysis and Manipulation",
		"ANNOTE": "internationalconference",
		"SERIES": "SCAM 2017",
		"YEAR": "2017",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"LOCATION": "Shanghai, China",
		"ORGANIZATION": "IEEE",
		"URL": "http://scg.unibe.ch/archive/papers/Leue17b-InferMethodNullness.pdf",
		"DOI": "10.1109/SCAM.2017.22",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb18",
		"ABSTRACT": "Null pointer exceptions are common bugs in Java projects. Previous\nresearch has shown that dereferencing the results of method calls is the main\nsource of these bugs, as developers do not anticipate that some methods return\nnull. To make matters worse, we find that whether a method returns null or not\n(nullness), is rarely documented. We argue that method nullness is a vital piece of\ninformation that can help developers avoid this category of bugs. This is\nespecially important for external APIs where developers may not even have access to\nthe code.\n\tIn this paper, we study the method nullness of Apache Lucene, the de facto\nstandard library for text processing in Java. Particularly, we investigate how\noften the result of each Lucene method is checked against null in Lucene clients.\nWe call this measure method nullability, which can serve as a proxy for method\nnullness. Analyzing Lucene internal and external usage, we find that most methods\nare never checked for null. External clients check more methods than Lucene checks\ninternally. Manually inspecting our dataset reveals that some null checks are\nunnecessary. We present an IDE plugin that complements existing documentation and\nmakes up for missing documentation regard- ing method nullness and generates\nnullness annotations, so that static analysis can pinpoint potentially missing or\nunnecessary null checks."
	},
	{
		"key": "Leue17c",
		"type": "inproceedings",
		"TITLE": "KOWALSKI: Collecting API Clients in Easy Mode",
		"AUTHOR": "Leuenberger, Manuel and Osman, Haidar and Ghafari, Mohammad and Nierstrasz, Oscar",
		"BOOKTITLE": "Proceedings of the 33rd International Conference on Software Maintenance and Evolution",
		"ANNOTE": "internationalconference",
		"SERIES": "ICSME 2017",
		"YEAR": "2017",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"LOCATION": "Shanghai, China",
		"ORGANIZATION": "IEEE",
		"URL": "http://scg.unibe.ch/archive/papers/Leue17c-KowalskiCollectingApi.pdf",
		"DOI": "10.1109/ICSME.2017.78",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb18",
		"ABSTRACT": "Understanding API usage is important for upstream and downstream developers. However, compiling a dataset of API clients is often a tedious task, especially since one needs many clients to draw a representative picture of the API usage.\n\tIn this paper, we present KOWALSKI, a tool that takes the name of an API, then finds and downloads client binaries by exploiting the Maven dependency management system. As a case study, we collect clients of Apache Lucene, the de facto standard for full-text search, analyze the binaries, and create a typed call graph that allows developers to identify hotspots in the API.\n\tA video demonstrating how KOWALSKI is used for this experiment can be found at https://youtu.be/zdx28GnoSRQ."
	},
	{
		"key": "Leue19a",
		"type": "inproceedings",
		"AUTHOR": "Manuel Leuenberger",
		"TITLE": "Exploring Example-driven Migration",
		"BOOKTITLE": "Proceedings of the Conference Companion of the 3rd International Conference on Art, Science, and Engineering of Programming",
		"SERIES": "Programming '19",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"MONTH": "April",
		"YEAR": "2019",
		"ISBN": "978-1-4503-6257-3",
		"LOCATION": "Genova, Italy",
		"PAGES": "29:1--29:3",
		"ARTICLENO": "29",
		"NUMPAGES": "3",
		"URL": "http://scg.unibe.ch/archive/papers/Leue19a.pdf",
		"DOI": "10.1145/3328433.3328463",
		"ACMID": "3328463",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA",
		"KEYWORDS": "scg-pub snf-asa3 scg19 jb20",
		"ABSTRACT": "Despite many research efforts to automate API usage migration, it remains often a manual task for developers. We aim to reduce the developer's pain by exploring ways to integrate the migration process into the IDE. Our migration workbench leverages API usage examples and interactive refactorings to migrate code from one API version to the other."
	},
	{
		"key": "Leue19b",
		"type": "unpublished",
		"AUTHOR": "Manuel Leuenberger",
		"TITLE": "Can I Remove This Method? How Live Feedback from the Ecosystem Supports Co-Evolution",
		"NOTE": "Presented at International Workshop on Smalltalk Technologies 2019",
		"URL": "http://scg.unibe.ch/archive/papers/Leue19b.pdf",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"MONTH": "August",
		"YEAR": "2019",
		"KEYWORDS": "skip-doi scg-pub snf-asa3 scg19 jb20",
		"ABSTRACT": "Albeit open-source projects have been co-evolving since years, upgrading a library can still be a tedious task for developers. APIs change over time, and breaking changes require precious developer time to adapt a dependent project's code. We present our vision on how embracing co-evolution in general, and library upgrades in specific, as a first-class citizen in our IDE, can support both API authors and API users. In a tiny self-experiment we show how API authors can profit from live feedback on the compatibility of their changes. API users can profit by being provided migrations to be applied on the dependent's code."
	},
	{
		"key": "Lian02a",
		"type": "inproceedings",
		"ABSTRACT": "PECOS is a collaborative project between industrial\n\t\t\t\t  and research partners that seeks to enable\n\t\t\t\t  component-based technology for a class of embedded\n\t\t\t\t  systems known as \"field devices\". Results so far\n\t\t\t\t  include a component model for field devices and a\n\t\t\t\t  composition language for specifying connections\n\t\t\t\t  between software components. Here we investigate the\n\t\t\t\t  application of Rate Monotonic Analysis (RMA) to the\n\t\t\t\t  problem of generating real-time schedules for\n\t\t\t\t  compositions of field device components.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Peng Liang and Gabriela Arévalo and Stéphane Ducasse and Michele Lanza and Nathanael Schärli and Roel Wuyts and Oscar Nierstrasz",
		"BOOKTITLE": "ECOOP 2002 Workshop Reader",
		"KEYWORDS": "scg-pub skip-doi scg-none jb02 pecos stefPub arevalo schaerli",
		"TITLE": "Applying RMA for Scheduling Field Device Components",
		"URL": "http://scg.unibe.ch/archive/papers/Lian02aPecosRMA.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lian02aPecosRMA.pdf"
	},
	{
		"key": "Lien05a",
		"type": "inproceedings",
		"ABSTRACT": "Traits are basically mixins or interfaces but with\n\t\t\t\t  method bodies. In languages that support traits,\n\t\t\t\t  classes are composed out of traits. There are two\n\t\t\t\t  main advantages with traits. Firstly, decomposing\n\t\t\t\t  existing classes into traits from which they can be\n\t\t\t\t  recomposed improves the factoring of hierarchies.\n\t\t\t\t  Secondly it increases the library reuse potential by\n\t\t\t\t  providing more reusable traits. Identifying traits\n\t\t\t\t  and decomposing class hierarchies into traits is\n\t\t\t\t  therefore an important and challenging task to\n\t\t\t\t  facilitate maintainability and evolution. In this\n\t\t\t\t  paper we present how we use Formal Concept Analysis\n\t\t\t\t  to identify traits in inheritance hierarchies. Our\n\t\t\t\t  approach is two-staged: first we identify within a\n\t\t\t\t  hierarchy maximal groups of methods that have a set\n\t\t\t\t  of classes in common, second we cluster cohesive\n\t\t\t\t  groups of methods based on method invocations as\n\t\t\t\t  potential traits. We applied our approach on two\n\t\t\t\t  significant hierarchies and compare our results with\n\t\t\t\t  the manual refactorization of the same code which\n\t\t\t\t  was done by the authors of traits.",
		"ACCEPTNUM": "28",
		"ACCEPTTOTAL": "291",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference topconference",
		"AUTHOR": "Adrian Lienhard and Stéphane Ducasse and Gabriela Arévalo",
		"BOOKTITLE": "ASE'05: Proceedings of the 20th International Conference on Automated Software Engineering",
		"CVS": "ConAnASE05Traits",
		"DOI": "10.1145/1101908.1101921",
		"INRIA": "hors",
		"KEYWORDS": "scg-pub snf05 recast06 stefPub moose-pub arevalo scg-none jb06 listic",
		"MEDIUM": "2",
		"MISC": "acceptance rate: 28/291 = 9",
		"MONTH": "November",
		"PAGES": "66--75",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"RATE": "9%",
		"SELECTIF": "oui",
		"TITLE": "Identifying Traits with Formal Concept Analysis",
		"URL": "http://scg.unibe.ch/archive/papers/Lien05aIdentifyingTraits.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lien05aIdentifyingTraits.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1101908.1101921"
	},
	{
		"key": "Lien06a",
		"type": "inproceedings",
		"ABSTRACT": "Most of today's dynamic analysis approaches are\n\t\t\t\t  based on method traces. However, in the case of\n\t\t\t\t  object-orientation understanding program execution\n\t\t\t\t  by analyzing method traces is complicated because\n\t\t\t\t  the behavior of a program depends on the sharing and\n\t\t\t\t  the transfer of object references (aliasing). We\n\t\t\t\t  argue that trace-based dynamic analysis is at a too\n\t\t\t\t  low level of abstraction for object-oriented\n\t\t\t\t  systems. We propose a new approach that captures the\n\t\t\t\t  life cycle of objects by explicitly taking into\n\t\t\t\t  account object aliasing and how aliases propagate\n\t\t\t\t  during the execution of the program. In this paper,\n\t\t\t\t  we present in detail our new meta-model and discuss\n\t\t\t\t  future tracks opened by it.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Adrian Lienhard and Stéphane Ducasse and Tudor Gîrba and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings International Workshop on Program Comprehension through Dynamic Analysis (PCODA'06)",
		"KEYWORDS": "scg-pub skip-doi stefPub girba scg-none jb07 fb06 snf07 object-flow dynamic-analysis",
		"MEDIUM": "2",
		"PAGES": "39--43",
		"PEERREVIEW": "yes",
		"TITLE": "Capturing How Objects Flow At Runtime",
		"URL": "http://scg.unibe.ch/archive/papers/Lien06aCapturingHowObjectsFlowPCODA06.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lien06aCapturingHowObjectsFlowPCODA06.pdf"
	},
	{
		"key": "Lien07a",
		"type": "inproceedings",
		"ABSTRACT": "The domain-specific ontology of a software system\n\t\t\t\t  includes a set of features and their relationships.\n\t\t\t\t  While the problem of locating features in\n\t\t\t\t  object-oriented programs has been widely studied,\n\t\t\t\t  runtime dependencies between features are less well\n\t\t\t\t  understood. Features cannot be understood in\n\t\t\t\t  isolation, since their behavior often depends on\n\t\t\t\t  objects created and referenced in previously\n\t\t\t\t  exercised features. It is difficult to spot runtime\n\t\t\t\t  dependencies between features just by browsing\n\t\t\t\t  source code. Hence, code modifications intended for\n\t\t\t\t  one feature, often inadvertently affect other\n\t\t\t\t  features. In this paper, we propose an approach to\n\t\t\t\t  precisely identify dependencies between features\n\t\t\t\t  based on a fine-grained dynamic analysis which\n\t\t\t\t  captures details about how objects are referenced at\n\t\t\t\t  runtime. The results of two case studies indicate\n\t\t\t\t  that our approach helps software maintainers in\n\t\t\t\t  understanding critical feature dependencies.",
		"ADDRESS": "Washington, DC, USA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Adrian Lienhard and Orla Greevy and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the International Conference on Program Comprehension (ICPC'07)",
		"DOI": "10.1109/ICPC.2007.38",
		"ISBN": "0-7695-2860-0",
		"ISSN": "1063-6897",
		"KEYWORDS": "scg07 scg-pub jb07 snf07 moose-pub features object-flow dynamic-analysis",
		"MEDIUM": "2",
		"MONTH": "June",
		"PAGES": "59--68",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "Tracking Objects to detect Feature Dependencies",
		"URL": "http://scg.unibe.ch/archive/papers/Lien07aFeatureDependencies.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lien07aFeatureDependencies.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICPC.2007.38"
	},
	{
		"key": "Lien07b",
		"type": "inproceedings",
		"ABSTRACT": "Science requires tools, and computer science is no\n\t\t\t\t  different. In a typical research context however, it\n\t\t\t\t  is not known upfront how a tool should work.\n\t\t\t\t  Researching the tool's design is part of the\n\t\t\t\t  investigation process. Various designs have to be\n\t\t\t\t  prototyped and experimented with. This paper focuses\n\t\t\t\t  on the research process of interactive visualization\n\t\t\t\t  tools. We present how to improve development, so\n\t\t\t\t  that a novel tool can be tested and modified at\n\t\t\t\t  (almost) the same time. We present the Mondrian\n\t\t\t\t  framework, which supports on-the-fly prototyping of\n\t\t\t\t  interactive visualizations. As an example, we\n\t\t\t\t  present the research process of the Feature\n\t\t\t\t  Dependency Browser, a visualization tool which we\n\t\t\t\t  developed to allow software engineers inspect\n\t\t\t\t  runtime dependencies between features.",
		"ADDRESS": "Los Alamitos, CA, USA",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Adrian Lienhard and Adrian Kuhn and Orla Greevy",
		"BOOKTITLE": "Proceedings IEEE International Workshop on Visualizing Software for Understanding (Vissoft'07)",
		"DOI": "10.1109/VISSOF.2007.4290702",
		"ISBN": "1-4244-0600-5",
		"KEYWORDS": "scg07 scg-pub snf07 jb07 moose-pub object-flow dynamic-analysis",
		"MEDIUM": "2",
		"MONTH": "June",
		"PAGES": "67--70",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "Rapid Prototyping of Visualizations using Mondrian",
		"URL": "http://scg.unibe.ch/archive/papers/Lien07bMondrian.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lien07bMondrian.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/VISSOF.2007.4290702"
	},
	{
		"key": "Lien07c",
		"type": "inproceedings",
		"ABSTRACT": "To extract abstract views of the behavior of an\n\t\t\t\t  object-oriented system for reverse engineering, a\n\t\t\t\t  body of research exists that analyzes a system's\n\t\t\t\t  runtime execution. Those approaches primarily\n\t\t\t\t  analyze the control flow by tracing method execution\n\t\t\t\t  events. However, they do not capture information\n\t\t\t\t  flows. We address this problem by proposing a novel\n\t\t\t\t  dynamic analysis technique named Object Flow\n\t\t\t\t  Analysis, which complements method execution tracing\n\t\t\t\t  with an accurate analysis of the runtime flow of\n\t\t\t\t  objects. To exemplify the usefulness of our analysis\n\t\t\t\t  we present a visual approach that allows a system\n\t\t\t\t  engineer to study classes and components in terms of\n\t\t\t\t  how they exchange objects at runtime. We illustrate\n\t\t\t\t  and validate our approach on two case studies.",
		"ADDRESS": "New York, NY, USA",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Adrian Lienhard and Stéphane Ducasse and Tudor Gîrba",
		"BOOKTITLE": "Proceedings of the 2007 International Conference on Dynamic Languages (ICDL'07)",
		"DOI": "10.1145/1352678.1352686",
		"INRIA": "hors",
		"ISBN": "978-1-60558-084-5",
		"KEYWORDS": "scg07 scg-pub jb08 snf08 girba moose-pub object-flow dynamic-analysis",
		"LOCATION": "Lugano, Switzerland",
		"MEDIUM": "2",
		"PAGES": "121--140",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM Digital Library",
		"SELECTIF": "non",
		"TITLE": "Object Flow Analysis — Taking an Object-Centric View on Dynamic Analysis",
		"URL": "http://scg.unibe.ch/archive/papers/Lien07c-ObjectFlowAnalysis.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lien07c-ObjectFlowAnalysis.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1352678.1352686"
	},
	{
		"key": "Lien07d",
		"type": "inproceedings",
		"ABSTRACT": "We need to understand the impact of side effects\n\t\t\t\t  whenever changing complex object-oriented software\n\t\t\t\t  systems. This can be difficult as side effects are\n\t\t\t\t  at best implicit in static views of the software,\n\t\t\t\t  and typically execution traces do not capture data\n\t\t\t\t  flow between parts of the system. To solve this\n\t\t\t\t  problem, we complement execution traces with dynamic\n\t\t\t\t  object flow information. In our previous work we\n\t\t\t\t  analyzed object flows between features and classes.\n\t\t\t\t  In this paper, we use object flow information to\n\t\t\t\t  analyze side effects in execution traces and to\n\t\t\t\t  detect how future behavior in the trace is affected\n\t\t\t\t  by it. Using a visualization, the developer can\n\t\t\t\t  study how a selected part of the program accessed\n\t\t\t\t  program state and what side effect its execution\n\t\t\t\t  produced. Like this, the developer can investigate\n\t\t\t\t  how a particular part of the program works without\n\t\t\t\t  needing to understand the source code in detail. To\n\t\t\t\t  illustrate our approach, we use a running example of\n\t\t\t\t  writing unit tests for a legacy system.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Adrian Lienhard and Tudor Gîrba and Orla Greevy and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 3rd International Workshop on Program Comprehension through Dynamic Analysis (PCODA'07)",
		"EDITOR": "Andy Zaidman and Abdelwahab Hamou-Lhadj and Orla Greevy",
		"ISBN": "978-0-7695-3034-5",
		"ISSN": "1872-5392",
		"KEYWORDS": "scg07 scg-pub snf08 skip-doi jb08 girba moose-pub object-flow dynamic-analysis",
		"MEDIUM": "2",
		"PAGES": "11--17",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Technische Universiteit Delft",
		"TITLE": "Exposing Side Effects in Execution Traces",
		"URL": "http://scg.unibe.ch/archive/papers/Lien07dSideEffectsPCODA.pdf",
		"URL2": "http://swerl.tudelft.nl/twiki/pub/Main/PCODA2007/PCODA2007proceedings.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lien07dSideEffectsPCODA.pdf%20http://swerl.tudelft.nl/twiki/pub/Main/PCODA2007/PCODA2007proceedings.pdf"
	},
	{
		"key": "Lien08a",
		"type": "inproceedings",
		"ABSTRACT": "Writing unit tests for legacy systems is a key\n\t\t\t\t  maintenance task. When writing tests for\n\t\t\t\t  object-oriented programs, objects need to be set up\n\t\t\t\t  and the expected effects of executing the unit under\n\t\t\t\t  test need to be verified. If developers lack\n\t\t\t\t  internal knowledge of a system, the task of writing\n\t\t\t\t  tests is non-trivial. To address this problem, we\n\t\t\t\t  propose an approach that exposes side effects\n\t\t\t\t  detected in example runs of the system and uses\n\t\t\t\t  these side effects to guide the developer when\n\t\t\t\t  writing tests. We introduce a visualization called\n\t\t\t\t  Test Blueprint, through which we identify what the\n\t\t\t\t  required fixture is and what assertions are needed\n\t\t\t\t  to verify the correct behavior of a unit under test.\n\t\t\t\t  The dynamic analysis technique that underlies our\n\t\t\t\t  approach is based on both tracing method executions\n\t\t\t\t  and on tracking the flow of objects at runtime. To\n\t\t\t\t  demonstrate the usefulness of our approach we\n\t\t\t\t  present results from two case studies.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Adrian Lienhard and Tudor Gîrba and Orla Greevy and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 12th European Conference on Software Maintenance and Reengineering (CSMR'08)",
		"DOI": "10.1109/CSMR.2008.4493303",
		"KEYWORDS": "girba scg08 scg-pub visualization object-flow dynamic-analysis snf08 jb08",
		"MEDIUM": "2",
		"PAGES": "83--92",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Test Blueprints — Exposing Side Effects in Execution Traces to Support Writing Unit Tests",
		"URL": "http://scg.unibe.ch/archive/papers/Lien08a-TestBlueprint.pdf",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lien08a-TestBlueprint.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/CSMR.2008.4493303"
	},
	{
		"key": "Lien08b",
		"type": "inproceedings",
		"ABSTRACT": "Back-in-time debuggers are extremely useful tools\n\t\t\t\t  for identifying the causes of bugs, as they allow us\n\t\t\t\t  to inspect the past states of objects no longer\n\t\t\t\t  present in the current execution stack.\n\t\t\t\t  Unfortunately the \"omniscient\" approaches that try\n\t\t\t\t  to remember all previous states are impractical\n\t\t\t\t  because they either consume too much space or they\n\t\t\t\t  are far too slow. Several approaches rely on\n\t\t\t\t  heuristics to limit these penalties, but they\n\t\t\t\t  ultimately end up throwing out too much relevant\n\t\t\t\t  information. In this paper we propose a practical\n\t\t\t\t  approach to back-in-time debugging that attempts to\n\t\t\t\t  keep track of only the relevant past data. In\n\t\t\t\t  contrast to other approaches, we keep object history\n\t\t\t\t  information together with the regular objects in the\n\t\t\t\t  application memory. Although seemingly\n\t\t\t\t  counter-intuitive, this approach has the effect that\n\t\t\t\t  past data that is not reachable from current\n\t\t\t\t  application objects (and hence, no longer relevant)\n\t\t\t\t  is automatically garbage collected. In this paper we\n\t\t\t\t  describe the technical details of our approach, and\n\t\t\t\t  we present benchmarks that demonstrate that memory\n\t\t\t\t  consumption stays within practical bounds.\n\t\t\t\t  Furthermore since our approach works at the virtual\n\t\t\t\t  machine level, the performance penalty is\n\t\t\t\t  significantly better than with other approaches.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Adrian Lienhard and Tudor Gîrba and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 22nd European Conference on Object-Oriented Programming (ECOOP'08)",
		"DOI": "10.1007/978-3-540-70592-5_25",
		"ISBN": "978-3-540-70591-8",
		"KEYWORDS": "scg08 scg-pub object-flow snf08 jb08 girba",
		"MEDIUM": "2",
		"NOTE": "ECOOP distinguished paper award",
		"PAGES": "592--615",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer",
		"SERIES": "LNCS",
		"TITLE": "Practical Object-Oriented Back-in-Time Debugging",
		"URL": "http://scg.unibe.ch/archive/papers/Lien08bBackInTimeDebugging.pdf",
		"VOLUME": "5142",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lien08bBackInTimeDebugging.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-540-70592-5_25"
	},
	{
		"key": "Lien09a",
		"type": "inproceedings",
		"ABSTRACT": "Conventional debugging tools present developers with\n\t\t\t\t  means to explore the run-time context in which an\n\t\t\t\t  error has occurred. In many cases this is enough to\n\t\t\t\t  help the developer discover the faulty source code\n\t\t\t\t  and correct it. However, rather often errors occur\n\t\t\t\t  due to code that has executed in the past, leaving\n\t\t\t\t  certain objects in an inconsistent state. The actual\n\t\t\t\t  run-time error only occurs when these inconsistent\n\t\t\t\t  objects are used later in the program. So-called\n\t\t\t\t  back-in-time debuggers help developers step back\n\t\t\t\t  through earlier states of the program and explore\n\t\t\t\t  execution contexts not available to conventional\n\t\t\t\t  debuggers. Nevertheless, even back-in-time debuggers\n\t\t\t\t  do not help answer the question, “Where did this\n\t\t\t\t  object come from?” The Object-Flow Virtual Machine,\n\t\t\t\t  which we have proposed in previous work, tracks the\n\t\t\t\t  flow of objects to answer precisely such questions,\n\t\t\t\t  but this VM does not provide dedicated debugging\n\t\t\t\t  support to explore faulty programs. In this paper we\n\t\t\t\t  present a novel debugger, called Compass, to\n\t\t\t\t  navigate between conventional run-time\n\t\t\t\t  stack-oriented control flow views and object flows.\n\t\t\t\t  Compass enables a developer to effectively navigate\n\t\t\t\t  from an object contributing to an error back-in-time\n\t\t\t\t  through all the code that has touched the object. We\n\t\t\t\t  present the design and implementation of Compass,\n\t\t\t\t  and we demonstrate how flow-centric, back-in-time\n\t\t\t\t  debugging can be used to effectively locate the\n\t\t\t\t  source of hard-to-find bugs.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Adrian Lienhard and Julien Fierz and Oscar Nierstrasz",
		"BOOKTITLE": "Objects, Components, Models and Patterns, Proceedings of TOOLS Europe 2009",
		"DOI": "10.1007/978-3-642-02571-6_16",
		"KEYWORDS": "scg09 scg-pub jb09 snf09",
		"MEDIUM": "2",
		"PAGES": "272--288",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNBIP",
		"TITLE": "Flow-Centric, Back-In-Time Debugging",
		"URL": "http://scg.unibe.ch/archive/papers/Lien09aCompass.pdf",
		"VOLUME": "33",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lien09aCompass.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-642-02571-6_16"
	},
	{
		"key": "Lien08c",
		"type": "article",
		"ABSTRACT": "A large body of research analyzes the runtime\n\t\t\t\t  execution of a system to extract abstract behavioral\n\t\t\t\t  views. Those approaches primarily analyze control\n\t\t\t\t  flow by tracing method execution events or they\n\t\t\t\t  analyze object graphs of heap snapshots. However,\n\t\t\t\t  they do not capture how objects are passed through\n\t\t\t\t  the system at runtime. We refer to the exchange of\n\t\t\t\t  objects as the object flow, and we claim that object\n\t\t\t\t  flow is necessary to analyze if we are to understand\n\t\t\t\t  the runtime of an object-oriented application. We\n\t\t\t\t  propose and detail Object Flow Analysis, a novel\n\t\t\t\t  dynamic analysis technique that takes this new\n\t\t\t\t  information into account. To evaluate its\n\t\t\t\t  usefulness, we present a visual approach that allows\n\t\t\t\t  a developer to study classes and components in terms\n\t\t\t\t  of how they exchange objects at runtime. We\n\t\t\t\t  illustrate our approach on three case studies.",
		"AERES": "ACL",
		"AERESSTATUS": "aeres10",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Adrian Lienhard and Stéphane Ducasse and Tudor Gîrba",
		"DOI": "10.1016/j.cl.2008.05.006",
		"INRIA": "hors",
		"JOURNAL": "Journal of Computer Languages, Systems and Structures",
		"KEYWORDS": "scg09 scg-pub girba moose-pub object-flow dynamic-analysis remoose jb09 snf09",
		"MEDIUM": "2",
		"NUMBER": "1",
		"PAGES": "63--79",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Elsevier",
		"SELECTIF": "non",
		"TITLE": "Taking an Object-Centric View on Dynamic Information with Object Flow Analysis",
		"URL": "http://scg.unibe.ch/archive/papers/Lien08cObjectFlowAnalysis.pdf",
		"VOLUME": "35",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lien08cObjectFlowAnalysis.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.cl.2008.05.006"
	},
	{
		"key": "Lien12a",
		"type": "article",
		"ABSTRACT": "Dynamic analysis is increasingly attracting\n\t\t\t\t  attention for debugging, profiling, and program\n\t\t\t\t  comprehension. Ten to twenty years ago, many dynamic\n\t\t\t\t  analyses investigated only simple method execution\n\t\t\t\t  traces. Today, in contrast, many sophisticated\n\t\t\t\t  dynamic analyses exist, for instance for detecting\n\t\t\t\t  memory leaks, analyzing ownership properties,\n\t\t\t\t  measuring garbage collector performance, or\n\t\t\t\t  supporting debugging tasks. These analyses depend on\n\t\t\t\t  complex program instrumentations and analysis\n\t\t\t\t  models, making it challenging to understand,\n\t\t\t\t  compare, and reproduce the proposed approaches.\n\t\t\t\t  While formal specifications and proofs are common in\n\t\t\t\t  the field of static analysis, most dynamic analyses\n\t\t\t\t  are specified using informal, textual descriptions.\n\t\t\t\t  In this article we propose a formal framework using\n\t\t\t\t  operational semantics that allows researchers to\n\t\t\t\t  precisely specify their dynamic analysis. Our goal\n\t\t\t\t  is to provide an accessible and reusable basis on\n\t\t\t\t  which researchers that may not be familiar with\n\t\t\t\t  rigorous specifications of dynamic analyses can\n\t\t\t\t  build. By extending the provided semantics, one can\n\t\t\t\t  concisely specify how runtime events are captured\n\t\t\t\t  and how this data is transformed to populate the\n\t\t\t\t  analysis model. Furthermore, our approach provides\n\t\t\t\t  the foundations to reason about properties of a\n\t\t\t\t  dynamic analysis.",
		"ADDRESS": "Piscataway, NJ, USA",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Adrian Lienhard and Tudor Gîrba and Oscar Nierstrasz",
		"DOI": "10.1109/TSE.2011.38",
		"JOURNAL": "Transactions on Software Engineering",
		"KEYWORDS": "scg-pub scg12 jb11 snf10 girba ercim11",
		"MEDIUM": "2",
		"NB": "was Lien11a",
		"NUMBER": "3",
		"PAGES": "694--706",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Press",
		"TITLE": "Specifying Dynamic Analyses by Extending Language Semantics",
		"URL": "http://scg.unibe.ch/archive/papers/Lien11aDynamicAnalysis.pdf",
		"VOLUME": "38",
		"YEAR": "2012",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lien11aDynamicAnalysis.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/TSE.2011.38"
	},
	{
		"key": "Loew07a",
		"type": "inproceedings",
		"ABSTRACT": "While many software systems today have to be aware\n\t\t\t\t  of the context in which they are executing, there is\n\t\t\t\t  still little support for structuring a program with\n\t\t\t\t  respect to context. A first step towards better\n\t\t\t\t  context-orientation was the introduction of method\n\t\t\t\t  layers. This paper proposes two additional language\n\t\t\t\t  concepts, namely the implicit activation of method\n\t\t\t\t  layers, and the introduction of dynamic variables",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Martin von Löwis and Marcus Denker and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 2007 International Conference on Dynamic Languages (ICDL 2007)",
		"DOI": "10.1145/1352678.1352688",
		"ISBN": "978-1-60558-084-5",
		"KEYWORDS": "scg07 scg-pub jb08 snf08",
		"MEDIUM": "2",
		"PAGES": "143--156",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM Digital Library",
		"TITLE": "Context-Oriented Programming: Beyond Layers",
		"URL": "http://scg.unibe.ch/archive/papers/Loew07aPyContext.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Loew07aPyContext.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1352678.1352688"
	},
	{
		"key": "Lump96a",
		"type": "inproceedings",
		"ABSTRACT": "We seek to support the development of open,\n\t\t\t\t  distributed applications from plug-compatible\n\t\t\t\t  software abstractions. In order to rigorously\n\t\t\t\t  specify these abstractions, we are elaborating a\n\t\t\t\t  formal object model for software composition in\n\t\t\t\t  which objects and related software abstractions are\n\t\t\t\t  viewed as patterns of communicating processes. The\n\t\t\t\t  semantic foundation is Milner's pi calculus, and the\n\t\t\t\t  starting point for our object model is Pierce and\n\t\t\t\t  Turner's encoding of objects as processes in the\n\t\t\t\t  experimental Pict programming language. Our\n\t\t\t\t  experience shows that common object-oriented\n\t\t\t\t  programming abstractions such as dynamic binding,\n\t\t\t\t  inheritance, genericity, and class variables are\n\t\t\t\t  most easily modelled when metaobjects are explicitly\n\t\t\t\t  reified as first class entities (i.e., processes).\n\t\t\t\t  Furthermore, various roles that are typically merged\n\t\t\t\t  (or confused) in object-oriented languages such as\n\t\t\t\t  classes, implementations, and metaobjects, each show\n\t\t\t\t  up as strongly-typed, first class processes",
		"ADDRESS": "Leysin",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Markus Lumpe and Jean-Guy Schneider and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of Languages et Modèles à Objects",
		"KEYWORDS": "scg-pub skip-doi snf96 lmo96 pict pi olit scg-none jb96 scg-coord-old",
		"MONTH": "October",
		"PAGES": "1--12",
		"TITLE": "Using Metaobjects to Model Concurrent Objects with PICT",
		"URL": "http://scg.unibe.ch/archive/papers/Lump96aMetaobjectsWithPict.pdf",
		"YEAR": "1996",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lump96aMetaobjectsWithPict.pdf"
	},
	{
		"key": "Lump97a",
		"type": "inproceedings",
		"ABSTRACT": "When do we call a software development environment a\n\t\t\t\t  composition environment? A composition environment\n\t\t\t\t  must be built of three parts: i) a reusable\n\t\t\t\t  component library, ii) a component framework\n\t\t\t\t  determining the software architecture, and iii) an\n\t\t\t\t  open and flexible composition language. Most of the\n\t\t\t\t  effort in component technology was spent on the\n\t\t\t\t  first two parts. Now it is crucial to address the\n\t\t\t\t  last part and find an appropriate model to glue\n\t\t\t\t  existing components together. In this work, we\n\t\t\t\t  investigate existing component and glue models,\n\t\t\t\t  define a set of requirements a composition language\n\t\t\t\t  must fulfill, and report our first results using a\n\t\t\t\t  prototype implementation of a general-purpose\n\t\t\t\t  composition language based on the Pi-calculus.",
		"ADDRESS": "Zurich",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Markus Lumpe and Jean-Guy Schneider and Oscar Nierstrasz and Franz Achermann",
		"BOOKTITLE": "Proceedings of ESEC '97 Workshop on Foundations of Component-Based Systems",
		"EDITOR": "Gary T. Leavens and Murali Sitaraman",
		"KEYWORDS": "scg-pub skip-doi glue scripting jpict composition onhindex(38) focbs97 snf97 scg-none jb97 scg-coord-98",
		"MONTH": "September",
		"PAGES": "178--187",
		"TITLE": "Towards a formal composition language",
		"URL": "http://scg.unibe.ch/archive/papers/Lump97aAFormalCompLang.pdf",
		"YEAR": "1997",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lump97aAFormalCompLang.pdf"
	},
	{
		"key": "Lump00a",
		"type": "incollection",
		"ABSTRACT": "A composition language based on a formal semantic\n\t\t\t\t  foundation will facilitate precise specification of\n\t\t\t\t  glue abstractions and compositions, and will support\n\t\t\t\t  reasoning about their behaviour. The semantic\n\t\t\t\t  foundation, however, must address a set of\n\t\t\t\t  requirements like encapsulation, objects as\n\t\t\t\t  processes, components as abstractions, plug\n\t\t\t\t  compatibility, a formal object model, and\n\t\t\t\t  scalability. In this work, we propose the\n\t\t\t\t  piL-calculus, an extension of the pi-calculus, as a\n\t\t\t\t  formal foundation for software composition, define a\n\t\t\t\t  language in terms of it, and illustrate how this\n\t\t\t\t  language can be used to plug components together.",
		"AUTHOR": "Markus Lumpe and Franz Achermann and Oscar Nierstrasz",
		"BOOKTITLE": "Foundations of Component Based Systems",
		"EDITOR": "Gary Leavens and Murali Sitaraman",
		"KEYWORDS": "snf99 skip-doi pict pi scg-coord-99 scg-none jb00 scg-pub onhindex(55) piccola scg-coord-00",
		"PAGES": "69--90",
		"PUBLISHER": "Cambridge University Press",
		"TITLE": "A Formal Language for Composition",
		"URL": "http://scg.unibe.ch/archive/papers/Lump00aFormalLanguage.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lump00aFormalLanguage.pdf"
	},
	{
		"key": "Lung05a",
		"type": "inproceedings",
		"ABSTRACT": "Using visualization and exploration tools can be of\n\t\t\t\t  great use for the understanding of a software system\n\t\t\t\t  when only its source code is available. However,\n\t\t\t\t  understanding a large software system by visualizing\n\t\t\t\t  only its lower level artifacts (e.g., classes,\n\t\t\t\t  methods) and the relations between them does not\n\t\t\t\t  scale for industrial-size systems. To address the\n\t\t\t\t  scalability issue, higher level hierarchical\n\t\t\t\t  abstractions (e.g., package structure, clustered\n\t\t\t\t  decompositions of the system) should be used\n\t\t\t\t  together with relations between them that are\n\t\t\t\t  usually aggregated from the lower level relations.\n\t\t\t\t  In this paper, we present the concepts behind\n\t\t\t\t  Softwarenaut, a tool aimed at exploring any kind of\n\t\t\t\t  hierarchical decompositions of a system, and then we\n\t\t\t\t  look at a specific exploration of a system. In the\n\t\t\t\t  experiment, the hierarchical decomposition of the\n\t\t\t\t  system is the result of applying a semantical\n\t\t\t\t  clustering to group classes that use similar terms.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Mircea Lungu and Adrian Kuhn and Tudor Gîrba and Michele Lanza",
		"BOOKTITLE": "3rd International Workshop on Visualizing Software for Understanding and Analysis (VISSOFT 2005)",
		"DOI": "10.1109/VISSOF.2005.1684313",
		"KEYWORDS": "scg-pub visualization girba moose-pub scg-none jb06 recast06 akuhn",
		"PAGES": "95--100",
		"TITLE": "Interactive Exploration of Semantic Clusters",
		"URL": "http://scg.unibe.ch/archive/papers/Lung05aExploreSemanticClusters.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lung05aExploreSemanticClusters.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/VISSOF.2005.1684313"
	},
	{
		"key": "Lung06a",
		"type": "inproceedings",
		"ABSTRACT": "Recovering the architecture is the first step\n\t\t\t\t  towards reengineering a software system. Many\n\t\t\t\t  reverse engineering tools use top-down exploration\n\t\t\t\t  as a way of providing a visual and interactive\n\t\t\t\t  process for architecture recovery. During the\n\t\t\t\t  exploration process, the user navigates through\n\t\t\t\t  various views on the system by choosing from several\n\t\t\t\t  exploration operations. Although some sequences of\n\t\t\t\t  these operations lead to views which, from the\n\t\t\t\t  architectural point of view, are mode relevant than\n\t\t\t\t  others, current tools do not provide a way of\n\t\t\t\t  predicting which exploration paths are worth taking\n\t\t\t\t  and which are not. In this article we propose a set\n\t\t\t\t  of package patterns which are used for augmenting\n\t\t\t\t  the exploration process with in formation about the\n\t\t\t\t  worthiness of the various exploration paths. The\n\t\t\t\t  patterns are defined based on the internal package\n\t\t\t\t  structure and on the relationships between the\n\t\t\t\t  package and the other packages in the system. To\n\t\t\t\t  validate our approach, we verify the relevance of\n\t\t\t\t  the proposed patterns for real-world systems by\n\t\t\t\t  analyzing their frequency of occurrence in six\n\t\t\t\t  open-source software projects.",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Mircea Lungu and Michele Lanza and Tudor Gîrba",
		"BOOKTITLE": "Proceedings of CSMR 2006 (10th European Conference on Software Maintenance and Reengineering)",
		"DOI": "10.1109/CSMR.2006.39",
		"KEYWORDS": "scg-pub visualization scg-none jb06 fb06 recast06 girba moose-pub norex06",
		"MEDIUM": "2",
		"PAGES": "185--196",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Package Patterns for Visual Architecture Recovery",
		"URL": "http://scg.unibe.ch/archive/papers/Lung06aPackagePatterns.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lung06aPackagePatterns.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/CSMR.2006.39"
	},
	{
		"key": "Lung07b",
		"type": "inproceedings",
		"ABSTRACT": "Software evolution research has been focused mostly\n\t\t\t\t  on analyzing the evolution of single software\n\t\t\t\t  systems. However, it is rarely the case that a\n\t\t\t\t  project exists as standalone, independent of others.\n\t\t\t\t  Rather, projects exist in parallel within larger\n\t\t\t\t  contexts in companies, research groups or even the\n\t\t\t\t  open-source communities, contexts that we call\n\t\t\t\t  super-repositories. In this paper, we argue that\n\t\t\t\t  visualization of super-repositories is useful in a\n\t\t\t\t  range of situations, and we describe Small Project\n\t\t\t\t  Observatory, a prototype tool which aims to\n\t\t\t\t  visualize super-repositories.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Mircea Lungu and Tudor Gîrba",
		"BOOKTITLE": "Proceedings of International Workshop on Principles of Software Evolution (IWPSE 2007)",
		"DOI": "10.1145/1294948.1294974",
		"ISBN": "978-1-59593-722-3",
		"KEYWORDS": "scg07 scg-pub snf-none evolution visualization girba jb08 moose-pub norex07",
		"MEDIUM": "2",
		"PAGES": "106--109",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM Press",
		"TITLE": "A Small Observatory for Super-Repositories",
		"URL": "http://scg.unibe.ch/archive/papers/Lung07bSmallProjectObservatory.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lung07bSmallProjectObservatory.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1294948.1294974"
	},
	{
		"key": "Lung07c",
		"type": "inproceedings",
		"ABSTRACT": "Reverse engineering and software evolution research\n\t\t\t\t  has been focused mostly on analyzing single software\n\t\t\t\t  systems. However, rarely a project exists in\n\t\t\t\t  isolation; instead, projects exist in parallel\n\t\t\t\t  within a larger context given by a company, a\n\t\t\t\t  research group or the open-source community.\n\t\t\t\t  Technically, such a context manifests itself in the\n\t\t\t\t  form of super-repositories, containers of several\n\t\t\t\t  projects developed in parallel. Well-known examples\n\t\t\t\t  of such super-repositories include SourceForge and\n\t\t\t\t  CodeHaus. We present an easily accessible platform\n\t\t\t\t  which supports the analysis of such\n\t\t\t\t  super-repositories. The platform can be valuable for\n\t\t\t\t  reverse engineering both the projects and the\n\t\t\t\t  structure of the organization as reflected in the\n\t\t\t\t  interactions and collaborations between developers.\n\t\t\t\t  Throughout the paper we present various types of\n\t\t\t\t  analysis applied to three open-source and one\n\t\t\t\t  industrial Smalltalk super-repositories, containing\n\t\t\t\t  hundreds of projects developed by dozens of people.",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Mircea Lungu and Michele Lanza and Tudor Gîrba and Reinout Heeck",
		"BOOKTITLE": "Proceedings of WCRE 2007 (14th Working Conference on Reverse Engineering)",
		"DOI": "10.1109/WCRE.2007.46",
		"ISBN": "0-7695-3034-6",
		"ISSN": "1095-1350",
		"KEYWORDS": "snf-none scg-pub evolution visualization girba scg-none jb08 moose-pub",
		"MEDIUM": "2",
		"PAGES": "120--129",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Reverse Engineering Super-Repositories",
		"URL": "http://scg.unibe.ch/archive/papers/Lung07cSuperRepositories.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lung07cSuperRepositories.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2007.46"
	},
	{
		"key": "Lung10a",
		"type": "inproceedings",
		"ABSTRACT": "In large software systems, knowing the dependencies\n\t\t\t\t  between modules or components is critical to\n\t\t\t\t  assess the impact of changes. To recover the\n\t\t\t\t  dependencies, fact extractors analyze the system\n\t\t\t\t  as a whole and build the dependency graph, parsing\n\t\t\t\t  the system down to the statement level. At the level\n\t\t\t\t  of software ecosystems, which are collections of\n\t\t\t\t  software projects, the dependencies that need to\n\t\t\t\t  be recovered reside not only within the individual\n\t\t\t\t  systems, but also between the libraries,\n\t\t\t\t  frameworks, and entire software systems that make up\n\t\t\t\t  the complete ecosystem; scaling issues arise. In\n\t\t\t\t  this paper we present and evaluate several variants\n\t\t\t\t  of a lightweight and scalable approach to recover\n\t\t\t\t  dependencies between the software projects of an\n\t\t\t\t  ecosystem. We evaluate our recovery algorithms on\n\t\t\t\t  the Squeak 3.10 Universe, an ecosystem containing\n\t\t\t\t  more than 200 software projects.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Mircea Lungu and Romain Robbes and Michele Lanza",
		"BOOKTITLE": "ASE'10: Proceedings of the 25th IEEE/ACM International Conference on Automated Software Engineering",
		"DOI": "10.1145/1858996.1859058",
		"KEYWORDS": "scg-bigdata scg-pub scg10 jb12 snf-none ecosystems lungu sde-ecosystems",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"PUBLISHER": "ACM Press",
		"TITLE": "Recovering Inter-Project Dependencies in Software Ecosystems",
		"URL": "http://scg.unibe.ch/archive/papers/Lung10a.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lung10a.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1858996.1859058"
	},
	{
		"key": "Lung10b",
		"type": "article",
		"ABSTRACT": "Software evolution research has focused mostly on\n\t\t\t\t  analyzing the evolution of single software systems.\n\t\t\t\t  However, it is rarely the case that a project exists\n\t\t\t\t  as standalone, independent of others. Rather,\n\t\t\t\t  projects exist in parallel within larger contexts in\n\t\t\t\t  companies, research groups or even the open-source\n\t\t\t\t  communities. We call these contexts software\n\t\t\t\t  ecosystems, and on this paper we present The Small\n\t\t\t\t  Project Observatory, a prototype tool which aims to\n\t\t\t\t  support the analysis of project ecosystems through\n\t\t\t\t  interactive visualization and exploration. We\n\t\t\t\t  present a case-study of exploring an ecosystem using\n\t\t\t\t  our tool, we describe about the architecture of the\n\t\t\t\t  tool, and we distill the lessons learned during the\n\t\t\t\t  tool-building experience.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Mircea Lungu and Michele Lanza and Tudor Gîrba and Romain Robbes",
		"DOI": "10.1016/j.scico.2009.09.004",
		"JOURNAL": "Science of Computer Programming, Elsevier",
		"KEYWORDS": "scg-pub scg10 jb10 hasler09 girba evol11 moose-pub",
		"MEDIUM": "2",
		"MONTH": "April",
		"NUMBER": "4",
		"PAGES": "264--275",
		"PEERREVIEW": "yes",
		"TITLE": "The Small Project Observatory: Visualizing Software Ecosystems",
		"URL": "http://scg.unibe.ch/archive/papers/Lung09aSPO.pdf",
		"VOLUME": "75",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lung09aSPO.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.scico.2009.09.004"
	},
	{
		"key": "Lung12a",
		"type": "article",
		"ABSTRACT": "As a complex software system evolves, its architecture typically\n\t\tdegrades, and thus it becomes progressively harder to understand and\n\t\tmaintain. Softwarenaut is an interactive and collaborative tool that helps\n\t\tdevelopers recover and consequently improve the architecture of such\n\t\tsystems by offering mechanisms to represent, filter, query and manipulate\n\t\tarchitectural views of the system under analysis. Softwarenaut is an open\n\t\tand extensible tool that is part of the Moose software analysis platform,\n\t\twhich is used for numerous academic and industrial projects related to\n\t\tsoftware evolution.",
		"ANNOTE": "notrefereed",
		"AUTHOR": "Mircea Lungu and Oscar Nierstrasz",
		"JOURNAL": "ERCIM News",
		"KEYWORDS": "scg-pub skip-doi jb12 snf12 scg12",
		"MEDIUM": "2",
		"MONTH": "January",
		"PEERREVIEW": "no",
		"TITLE": "Recovering Software Architecture with Softwarenaut",
		"URL": "http://ercim-news.ercim.eu/en88/special/recovering-software-architecture-with-softwarenaut",
		"VOLUME": "88",
		"YEAR": "2012",
		"BDSK-URL-1": "http://ercim-news.ercim.eu/en88/special/recovering-software-architecture-with-softwarenaut"
	},
	{
		"key": "Lung12c",
		"type": "article",
		"ABSTRACT": "Research has been empowered by increased network bandwidth and raw computation power to analyze all of these artifacts at possibly massive scales. Therefore it shouldn't surprise us that current software engineering research uses the new wealth of information to improve the lives of software developers. Analysis of software ecosystems and super-repositories enters the realm of big software data. ",
		"ANNOTE": "notrefereed",
		"AUTHOR": "Mircea Lungu and Oscar Nierstrasz and Niko Schwarz",
		"JOURNAL": "ERCIM News",
		"KEYWORDS": "scg-pub skip-doi jb12 snf12 scg-bigdata scg12",
		"MEDIUM": "2",
		"MONTH": "April",
		"PEERREVIEW": "no",
		"TITLE": "Big Software Data Analysis",
		"URL": "http://ercim-news.ercim.eu/en89/special/big-software-data-analysis",
		"VOLUME": "89",
		"YEAR": "2012",
		"BDSK-URL-1": "http://ercim-news.ercim.eu/en89/special/big-software-data-analysis"
	},
	{
		"key": "Lung13a",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Mircea Lungu and Jan Kurš",
		"ABSTRACT": "One of the long running debates between\n\tprogrammers is whether camelCaseldentifiers are better than\n\tunderscore_identifiers. This is ultimately a matter of\n\tprogramming language culture and personal taste, and to our\n\tbest knowledge none of the camps has won the argument yet. It\n\tis our intuition that a solution exists which is superior to\n\tboth the previous ones from the point of view of usability:\n\tthe solution we name sentence case identifiers allows phrases\n\tas nams for program entities such as classes or methods. In\n\tthis paper we propose a study in which to evaluate the impact\n\tof sentence case identifiers in practice.",
		"BOOKTITLE": "USER'13: Proceedings of the 2nd Workshop on User evaluations for Software Engineering Researchers",
		"KEYWORDS": "scg-pub snf-asa1 scg13 jb14 lungu internationalworkshop, kursjan",
		"MEDIUM": "4",
		"PAGES": "13 - 15",
		"PEERREVIEW": "yes",
		"TITLE": "On Planning an Evaluation of the Impact of Identifier Names on the Readability and Maintainability of Programs",
		"URL": "http://scg.unibe.ch/archive/papers/Lung13a-Planning.pdf",
		"DOI": "10.1109/USER.2013.6603079",
		"YEAR": "2013",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lung13a-Planning.pdf"
	},
	{
		"key": "Lung14a",
		"type": "article",
		"ABSTRACT": "Architecture recovery is an activity applied to a system whose initial architecture has eroded. When the system is large, the user must use dedicated tools to support the recovery process. We present Softwarenaut — a tool which supports architecture recovery through interactive exploration and visualization. Classical architecture recovery features, such as filtering and details on demand, are enhanced with evolutionary capabilities when multi-version information about a subject system is available. The tool allows sharing and discovering the results of previous analysis sessions through a global repository of architectural views indexed by systems. We present the features of the tool together with the architecture recovery process that it supports using as a case-study ArgoUML, a well-known open source Java system.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Mircea Lungu and Michele Lanza and Oscar Nierstrasz",
		"DOI": "10.1016/j.scico.2012.04.007",
		"JOURNAL": "Science of Computer Programming",
		"KEYWORDS": "softwarenaut mircpub jb14 snf-asa1 scg-pub scg14",
		"MEDIUM": "2",
		"NUMBER": "0",
		"PAGES": "204 - 223",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Elsevier",
		"TITLE": "Evolutionary and Collaborative Software Architecture Recovery with Softwarenaut",
		"URL": "http://scg.unibe.ch/archive/papers/Lung14a.pdf",
		"VOLUME": "79",
		"YEAR": "2014",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Lung14a.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.scico.2012.04.007"
	},
	{
		"key": "Mari05a",
		"type": "inproceedings",
		"ABSTRACT": "To automatically analyze the code, the analyses must\n\t\t\t\t  be implemented as software programs. As analyses\n\t\t\t\t  become increasingly complex, implementing them using\n\t\t\t\t  imperative and interrogative programming is\n\t\t\t\t  oftentimes cumbersome. Consequently, the\n\t\t\t\t  understanding, testing and reuse of analyses is\n\t\t\t\t  severely hampered. In this paper we identify a set\n\t\t\t\t  of key mechanisms that are involved in the\n\t\t\t\t  implementation of any static analysis: navigation,\n\t\t\t\t  selection, set arithmetics, filtering and property\n\t\t\t\t  aggregation. We show that neither of the\n\t\t\t\t  aforementioned approaches offers a simple support\n\t\t\t\t  for these mechanisms and, as a result, an\n\t\t\t\t  undesirable overhead of complexity is added to the\n\t\t\t\t  implementation of most analyses. The paper\n\t\t\t\t  introduces SAIL, a language designed to offer a\n\t\t\t\t  proper support to a simplify writing of analyses. In\n\t\t\t\t  order to validate the expressiveness of SAIL the\n\t\t\t\t  paper provides a comprehensive comparison with the\n\t\t\t\t  other two approaches.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Cristina Marinescu and Radu Marinescu and Tudor Gîrba",
		"BOOKTITLE": "METRICS 2005",
		"KEYWORDS": "scg-none jb06 scg-pub skip-doi girba recast06",
		"PAGES": "110--119",
		"TITLE": "Towards a Simplified Implementation of Object-Oriented Design Metrics",
		"URL": "http://scg.unibe.ch/archive/papers/Mari05aSAIL.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Mari05aSAIL.pdf"
	},
	{
		"key": "Matt09a",
		"type": "inproceedings",
		"ABSTRACT": "For popular software systems, the number of daily\n\t\t\t\t  submitted bug reports is high. Triaging these\n\t\t\t\t  incoming reports is a time consuming task. Part of\n\t\t\t\t  the bug triage is the assignment of a report to a\n\t\t\t\t  developer with the appropriate expertise. In this\n\t\t\t\t  paper, we present an approach to automatically\n\t\t\t\t  suggest developers who have the appropriate\n\t\t\t\t  expertise for handling a bug report. We model\n\t\t\t\t  developer expertise using the vocabulary found in\n\t\t\t\t  their source code contributions and compare this\n\t\t\t\t  vocabulary to the vocabulary of bug reports. We\n\t\t\t\t  evaluate our approach by comparing the suggested\n\t\t\t\t  experts to the persons who eventually worked on the\n\t\t\t\t  bug. Using eight years of Eclipse development as a\n\t\t\t\t  case study, we achieve 33.6 top-1 precision and\n\t\t\t\t  71.0 top-10 recall.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Dominique Matter and Adrian Kuhn and Oscar Nierstrasz",
		"BOOKTITLE": "MSR '09: Proceedings of the 2009 6th IEEE International Working Conference on Mining Software Repositories",
		"DOI": "10.1109/MSR.2009.5069491",
		"KEYWORDS": "scg09 scg-pub jb09 snf09 akuhn",
		"LOCATION": "Vancouver, Canada",
		"MEDIUM": "2",
		"PAGES": "131--140",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE",
		"TITLE": "Assigning Bug Reports using a Vocabulary-Based Expertise Model of Developers",
		"URL": "http://scg.unibe.ch/archive/papers/Matt09aAssigningBugreports.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Matt09aAssigningBugreports.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/MSR.2009.5069491"
	},
	{
		"key": "Meij96a",
		"type": "inproceedings",
		"ABSTRACT": "Creating applications using object-oriented\n\t\t\t\t  frameworks is done at a rela- tively low abstraction\n\t\t\t\t  level, leaving a large gap with the high abstraction\n\t\t\t\t  level of a de- sign. This makes the use of a\n\t\t\t\t  framework difficult, and allows design and\n\t\t\t\t  realization to diverge. Design patterns are more\n\t\t\t\t  specific elements of design, and thus reduce this\n\t\t\t\t  gap. We even bridge this gap by making design\n\t\t\t\t  patterns and the classes that play a role within\n\t\t\t\t  them into special purpose software components.\n\t\t\t\t  System realization becomes a matter of composing\n\t\t\t\t  special purpose class-components. We also introduce\n\t\t\t\t  a system, FACE, which supports the visual\n\t\t\t\t  composition of such specifications.",
		"AUTHOR": "Theo Dirk Meijler and Robert Engel",
		"BOOKTITLE": "EuroPLoP preliminary Conference Proceedings",
		"KEYWORDS": "olit scg-pub skip-doi toBeChecked snf96 scg-none jb96",
		"MONTH": "July",
		"TITLE": "Making Design Patterns Explicit in FACE, a Framework Adaptive Composition Environment",
		"URL": "http://scg.unibe.ch/archive/papers/Meij96aFACE.pdf",
		"YEAR": "1996",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Meij96aFACE.pdf"
	},
	{
		"key": "Meij96m",
		"type": "inproceedings",
		"ABSTRACT": "An object-oriented framework represents variations\n\t\t\t\t  in the application do-main via so-called hot spots.\n\t\t\t\t  Maturing the right set of hot spots requires an\n\t\t\t\t  iterative de-velopment process which gives rise to\n\t\t\t\t  incomplete framework documentation. This paper shows\n\t\t\t\t  that by measuring the changes between different\n\t\t\t\t  releases of the framework, it is possible to detect\n\t\t\t\t  undocumented hot spots. We expect that our work will\n\t\t\t\t  result in better documented and consequently more\n\t\t\t\t  reusable frameworks.",
		"AUTHOR": "Theo Dirk Meijler and Serge Demeyer and Robert Engel",
		"BOOKTITLE": "Special Issues in Object-Oriented Programming (ECOOP '96 Workshop Reader)",
		"EDITOR": "Max Mühlhäuser",
		"ISBN": "3-920993-67-51",
		"KEYWORDS": "olit famoos-papunr scg-pub skip-doi toBeChecked snf97 scg-none jb96 sergedem-papunr",
		"MONTH": "July",
		"PUBLISHER": "dpunkt.verlag",
		"TITLE": "Class Composition in FACE, a Framework Adaptive Composition Environment",
		"URL": "http://scg.unibe.ch/archive/papers/Meij96mClassComposition.pdf",
		"YEAR": "1996",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Meij96mClassComposition.pdf"
	},
	{
		"key": "Meij97a",
		"type": "inproceedings",
		"ABSTRACT": "Tools incorporating design patterns combine the\n\t\t\t\t  advantage of having a high-abstraction level of\n\t\t\t\t  describing a system and the possibility of coupling\n\t\t\t\t  these abstractions to some underlying\n\t\t\t\t  implementation. Still, all cur-rent tools are based\n\t\t\t\t  on generating source code in which the design\n\t\t\t\t  patterns become implicit. After that, further\n\t\t\t\t  extension and adaptation of the software is needed\n\t\t\t\t  but this can no longer be supported at the same\n\t\t\t\t  level of abstraction. This paper presents FACE, an\n\t\t\t\t  environment based on an explicit representa-tion of\n\t\t\t\t  design patterns, sustaining an incremental\n\t\t\t\t  development style without abandoning the\n\t\t\t\t  higher-level design pattern abstraction. A visual\n\t\t\t\t  composition tool for FACE has been developed in the\n\t\t\t\t  Self programming language.",
		"AUTHOR": "Theo Dirk Meijler and Serge Demeyer and Robert Engel",
		"BOOKTITLE": "Proceedings ESEC/FSE '97",
		"DOI": "10.1007/3-540-63531-9_9",
		"EDITOR": "M. Jazayeri and H. Schauer",
		"ISBN": "978-3-540-63531-4",
		"KEYWORDS": "olit famoos-papref scg-pub toBeChecked snf97 scg-none jb97 sergedem-papref",
		"MONTH": "September",
		"PAGES": "94--110",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Making Design Patterns Explicit in FACE, a Framework Adaptive Composition Environment",
		"URL": "http://scg.unibe.ch/archive/papers/Meij97aExplicitDesignPatterns.pdf",
		"VOLUME": "1301",
		"YEAR": "1997",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Meij97aExplicitDesignPatterns.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/3-540-63531-9_9"
	},
	{
		"key": "Meij97b",
		"type": "incollection",
		"ABSTRACT": "Traditional software development approaches do not\n\t\t\t\t  cope well with the evolving requirements of open\n\t\t\t\t  systems. We argue that such systems are best viewed\n\t\t\t\t  as flexible compositions of \"software components\"\n\t\t\t\t  designed to work together as part of a component\n\t\t\t\t  framework that formalizes a class of applications\n\t\t\t\t  with a common software architecture. To enable such\n\t\t\t\t  a view of software systems, we need appropriate\n\t\t\t\t  support from programming language technology,\n\t\t\t\t  software tools, and methods. We will briefly review\n\t\t\t\t  the current state of object-oriented technology,\n\t\t\t\t  insofar as it supports component-oriented\n\t\t\t\t  development, and propose a research agenda of topics\n\t\t\t\t  for further investigation.",
		"AUTHOR": "Theo Dirk Meijler and Oscar Nierstrasz",
		"BOOKTITLE": "Cooperative Information Systems: Current Trends and Directions",
		"EDITOR": "M.P. Papazoglou and G. Schlageter",
		"KEYWORDS": "olit scg-pub skip-doi scg-none jb-none snf96 omnrep onhindex(60)",
		"MONTH": "November",
		"PAGES": "49--78",
		"PUBLISHER": "Academic Press",
		"TITLE": "Beyond Objects: Components",
		"URL": "http://scg.unibe.ch/archive/papers/Meij97bBeyondObjects.pdf",
		"YEAR": "1997",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Meij97bBeyondObjects.pdf"
	},
	{
		"key": "Mens01a",
		"type": "inproceedings",
		"ABSTRACT": "In current-day software development, programmers\n\t\t\t\t  often use programming patterns to clarify their\n\t\t\t\t  intents and to increase the understandability of\n\t\t\t\t  their programs. Unfortunately, most software\n\t\t\t\t  development environments do not adequately support\n\t\t\t\t  the declaration and use of such patterns. To\n\t\t\t\t  explicitly codify these patterns, we adopt a\n\t\t\t\t  declarative meta programming approach. In this\n\t\t\t\t  approach, we reify the structure of an\n\t\t\t\t  (object-oriented) program in terms of logic clauses.\n\t\t\t\t  We declare programming patterns as logic rules on\n\t\t\t\t  top of these clauses. By querying the logic system,\n\t\t\t\t  these rules allow us to check, enforce and search\n\t\t\t\t  for occurrences of certain patterns in the software.\n\t\t\t\t  As such, the programming patterns become an active\n\t\t\t\t  part of the software development and maintenance\n\t\t\t\t  environment.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Kim Mens and Isabel Michiels and Roel Wuyts",
		"BOOKTITLE": "SEKE 2001 Proceedings",
		"DOI": "10.1016/S0957-4174(02)00076-3",
		"KEYWORDS": "SOUL scg-pub scg-none jb02 snf02",
		"MISC": "SCI impact factor 0.321",
		"NOTE": "International conference on Software Engineering and Knowledge Engineering, Buenos Aires, Argentina, June 13-15, 2001",
		"PAGES": "236--243",
		"PUBLISHER": "Knowledge Systems Institute",
		"TITLE": "Supporting Software Development through Declaratively Codified Programming Patterns",
		"URL": "http://scg.unibe.ch/archive/papers/Mens01a.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Mens01a.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/S0957-4174(02)00076-3"
	},
	{
		"key": "Mens01b",
		"type": "article",
		"ABSTRACT": "In current-day software development, programmers\n\t\t\t\t  often use programming patterns to clarify their\n\t\t\t\t  intents and to increase the understandability of\n\t\t\t\t  their programs. Unfortunately, most software\n\t\t\t\t  development environments do not adequately support\n\t\t\t\t  the declaration and use of such patterns. To\n\t\t\t\t  explicitly codify these patterns, we adopt a\n\t\t\t\t  declarative meta programming approach. In this\n\t\t\t\t  approach, we reify the structure of an\n\t\t\t\t  (object-oriented) program in terms of logic clauses.\n\t\t\t\t  We declare programming patterns as logic rules on\n\t\t\t\t  top of these clauses. By querying the logic system,\n\t\t\t\t  these rules allow us to check, enforce and search\n\t\t\t\t  for occurrences of certain patterns in the software.\n\t\t\t\t  As such, the programming patterns become an active\n\t\t\t\t  part of the software development and maintenance\n\t\t\t\t  environment.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Kim Mens and Isabel Michiels and Roel Wuyts",
		"DOI": "10.1016/S0957-4174(02)00076-3",
		"INSTITUTION": "Programming Technology Lab, Vrije Universiteit Brussel, Belgium",
		"JOURNAL": "SEKE 2001 Special Issue of Elsevier Journal on Expert Systems with Applications",
		"KEYWORDS": "SOUL scg-pub scg-none jb02 snf02",
		"MISC": "Extended version of Mens01a",
		"TITLE": "Supporting Software Development through Declaratively Codified Programming Patterns",
		"URL": "http://scg.unibe.ch/archive/papers/Mens01b.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Mens01b.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/S0957-4174(02)00076-3"
	},
	{
		"key": "Mens02a",
		"type": "article",
		"ABSTRACT": "Metrics are essential in object-oriented software\n\t\t\t\t  engineering for several reasons, among which quality\n\t\t\t\t  assessment and improvement of development team\n\t\t\t\t  productivity. While the mathematical nature of\n\t\t\t\t  metrics calls for clear definitions, frequently\n\t\t\t\t  there exist many contradicting definitions of the\n\t\t\t\t  same metric depending on the implementation\n\t\t\t\t  language. We suggest to express and define metrics\n\t\t\t\t  using a language-independent metamodel based on\n\t\t\t\t  graphs. This graph-based approach allows for an\n\t\t\t\t  unambiguous definition of generic object-oriented\n\t\t\t\t  metrics and higher-order metrics. We also report on\n\t\t\t\t  some prototype tools that implement these ideas.",
		"AUTHOR": "Tom Mens and Michele Lanza",
		"DOI": "10.1016/S1571-0661(05)80529-8",
		"JOURNAL": "Electronic Notes in Theoretical Computer Science",
		"KEYWORDS": "scg-pub scg-none jb02 snf02",
		"NUMBER": "2",
		"PUBLISHER": "Elsevier Science",
		"TITLE": "A Graph-Based Metamodel for Object-Oriented Software Metrics",
		"URL": "http://scg.unibe.ch/archive/papers/Mens02a.pdf",
		"VOLUME": "72",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Mens02a.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/S1571-0661(05)80529-8"
	},
	{
		"key": "Mens03a",
		"type": "article",
		"ABSTRACT": "This paper reports on the results of the workshop on\n\t\t\t\t  Declarative Meta Programming to Support Software\n\t\t\t\t  Development in Edinburgh on September 23, 2002. It\n\t\t\t\t  enumerates the presentations made, classifies the\n\t\t\t\t  contributions and lists the main results of the\n\t\t\t\t  discussions held at the workshop. As such it\n\t\t\t\t  provides the context for future workshops around\n\t\t\t\t  this topic.",
		"ANNOTE": "workshopproceedings",
		"AUTHOR": "Tom Mens and Roel Wuyts and Kris De Volder and Kim Mens",
		"DOI": "10.1145/638750.638770",
		"JOURNAL": "ACM SIGSOFT Software Engineering Notes",
		"KEYWORDS": "snf03 scg-pub scg-none jb03",
		"MONTH": "January",
		"NUMBER": "2",
		"TITLE": "Workshop Proceedings — Declarative Meta Programming to Support Software Development",
		"URL": "http://scg.unibe.ch/archive/papers/Mens03a.pdf",
		"VOLUME": "28",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Mens03a.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/638750.638770"
	},
	{
		"key": "Meri14a",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"ABSTRACT": "Software developers often ask questions about software systems and software ecosystems\n\t\t\t\tthat entail exploration and navigation, such as who uses this component?,\n\t\t\t\tand where is this feature implemented?. Software visualisation can be a\n\t\t\t\tgreat aid to understanding and exploring the answers to such questions,\n\t\t\t\tbut visualisations require expertise to implement effectively, and they\n\t\t\t\tdo not always scale well to large systems. We propose to automatically\n\t\t\t\tgenerate software visualisations based on software models derived from open\n\t\t\t\tsource software corpora and from an analysis of the properties of typical\n\t\t\t\tdevelopers queries and commonly used visualisations. The key challenges we\n\t\t\t\tsee are (1) understanding how to match queries to suitable visualisations,\n\t\t\t\tand (2) scaling visualisations effectively to very large software systems\n\t\t\t\tand corpora. In the paper we motivate the idea of automatic software\n\t\t\t\tvisualisation, we enumerate the challenges and our proposals to address them,\n\t\t\t\tand we describe some very initial results in our attempts to develop scalable\n\t\t\t\tvisualisations of open source software corpora.",
		"AUTHOR": "Merino, Leonel",
		"BOOKTITLE": "SATToSE'14: Pre-Proceedings of the 7th International Seminar Series on Advanced Techniques & Tools for Software Evolution",
		"KEYWORDS": "scg-pub snf-asa1 skip-doi visualisations merino scg14 jb14",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"MONTH": "July",
		"PAGES": "71--74",
		"TITLE": "Adaptable Visualisation Based On User Needs",
		"YEAR": "2014",
		"URL": "http://scg.unibe.ch/archive/papers/Meri14a.pdf",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Meri14a.pdf"
	},
	{
		"key": "Meri15a",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"ABSTRACT": "Visualisation provides good support for software analysis. It copes with\n        the intangible nature of software by providing concrete representations of it. By\n        reducing the complexity of software, visualisations are especially useful when\n        dealing with large amounts of code. One domain that usually deals with large amounts\n        of source code data is empirical analysis. Although there are many tools for\n        analysis and visualisation, they do not cope well software corpora. In this paper we\n        present Explora, an infrastructure that is specifically targeted at visualising\n        corpora. We report on early results when conducting a sample analysis on Smalltalk\n        and Java corpora.",
		"AUTHOR": "Leonel Merino and Mircea Lungu and Oscar Nierstrasz",
		"BOOKTITLE": "SATToSE'14: Post-Proceedings of the 7th International Seminar Series on Advanced Techniques & Tools for Software Evolution",
		"PUBLISHER": "CEUR Workshop Proceedings (CEUR-WS.org)",
		"VOLUME": "1354",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"KEYWORDS": "scg-pub skip-doi visualisations merino scg15 jb15 snf-asa1",
		"TITLE": "Explora: Infrastructure for Scaling Up Software Visualisation to Corpora",
		"YEAR": "2015",
		"URL": "http://scg.unibe.ch/archive/papers/Meri15a.pdf",
		"NOTE": "http://ceur-ws.org/Vol-1354/",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Meri15a.pdf"
	},
	{
		"key": "Meri15b",
		"type": "inproceedings",
		"AUTHOR": "Leonel Merino and Mircea Lungu and Oscar Nierstrasz",
		"TITLE": "Explora: A Visualisation Tool for Metric Analysis of Software Corpora",
		"BOOKTITLE": "VISSOFT'15: Proceedings of the 3rd IEEE Working Conference on Software Visualization",
		"ABSTRACT": "When analysing software metrics, users find that\n\t\t\tvisualisation tools lack support for (1) the detection of patterns\n\t\t\twithin metrics; and (2) enabling analysis of software corpora.\n\t\t\tIn this paper we present Explora, a visualisation tool designed\n\t\t\tfor the simultaneous analysis of multiple metrics of systems\n\t\t\tin software corpora. Explora incorporates a novel lightweight\n\t\t\tvisualisation technique called PolyGrid that promotes the detection\n\t\t\tof graphical patterns. We present an example where we\n\t\t\tanalyse the relation of subtype polymorphism with inheritance\n\t\t\tand invocation in corpora of Smalltalk and Java systems and\n\t\t\tfind that (1) subtype polymorphism is more likely to be found\n\t\t\tin large hierarchies; (2) as class hierarchies grow horizontally,\n\t\t\tthey also do so vertically; and (3) in polymorphic hierarchies the\n\t\t\tlength of the name of the classes is orthogonal to the cardinality\n\t\t\tof the call sites.",
		"ANNOTE": "internationalconference",
		"PUBLISHER": "IEEE",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa1 scg15 jb16",
		"PAGES": "195--199",
		"DOI": "10.1109/VISSOFT.2015.7332436",
		"YEAR": "2015",
		"URL": "http://scg.unibe.ch/archive/papers/Meri15b.pdf"
	},
	{
		"key": "Meri16a",
		"type": "inproceedings",
		"AUTHOR": "Leonel Merino and Mohammad Ghafari and Oscar Nierstrasz",
		"TITLE": "Towards Actionable Visualisation in Software Development",
		"BOOKTITLE": "VISSOFT'16: Proceedings of the 4th IEEE Working Conference on Software Visualization",
		"ABSTRACT": "Although abundant studies have shown how visualisation can help software developers to perform their daily tasks, visualisation is still not a common practice since developers have little support for adopting a proper visualisation for their needs.\nIn this paper we review the 346 papers published in SOFTVIS/VISSOFT venues and identify 65 design study papers that describe how visualisation is used to alleviate various difficulties in software development. We classify these studies into several problem domains that we collected from the research on software development community, and highlight the characteristics of each study. On the one hand, we support software developers to put visualisation in action by mapping existing techniques to particular needs in various problem domains. On the other hand, we help researchers in the field by exposing domains with little visualisation support. We found a disconnect between the problem domains on which visualisation have focused and the domains that get the most attention from practitioners.",
		"ANNOTE": "internationalconference",
		"PUBLISHER": "IEEE",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa2 scg16 jb17",
		"DOI": "10.1109/VISSOFT.2016.10",
		"YEAR": "2016",
		"URL": "http://scg.unibe.ch/archive/papers/Meri16a.pdf"
	},
	{
		"key": "Meri16b",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Leonel Merino and Dominik Seliner and Mohammad Ghafari and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of International Workshop on Smalltalk Technologies (IWST 2016)",
		"ABSTRACT": "Understanding the network of collaborations, identifying the key players, potential future collaborators, and trends in the field are very important to carry out a project successfully. In this paper, we present CommunityExplorer, a visualization framework that facilitates presenting, exploring, and understanding the network of collaborations at once. The framework performs data extraction, parsing, and modeling automatically. It is easy to adopt and utilizes a bigraph visualization that scales well. We demonstrate the advantage of CommunityExplorer to identify the collaboration of authors on 346 and 104 research papers published in SOTFVIS/VISSOFT and IWST communities respectively. We found that even though SOFTVIS/VISSOFT has more contributors, IWST exhibits more collaboration. We discovered that contributors in IWST are more resilient than those in SOFTVIS/VISSOFT, which are more volatile. Moreover, collaboration in IWST is concentrated in a single large group, while in SOFTVIS/VISSOFT it is spread among many tiny groups and a few medium-sized ones.",
		"KEYWORDS": "scg-pub snf-asa2 scg16 jb16",
		"PEERREVIEW": "yes",
		"TITLE": "CommunityExplorer: A Framework for Visualizing Collaboration Networks",
		"PAGES": "2:1--2:9",
		"YEAR": "2016",
		"MEDIUM": "4",
		"DOI": "10.1145/2991041.2991043",
		"URL": "http://scg.unibe.ch/archive/papers/Meri16b.pdf"
	},
	{
		"key": "Meri16c",
		"type": "inproceedings",
		"AUTHOR": "Leonel Merino and Mohammad Ghafari and Oscar Nierstrasz and Alexandre Bergel and Juraj Kubelka",
		"TITLE": "MetaVis: Exploring Actionable Visualization",
		"BOOKTITLE": "VISSOFT'16: Proceedings of the 4th IEEE Working Conference on Software Visualization",
		"ABSTRACT": "Software visualization can be very useful for answering complex questions that arise in the software development process. Although modern visualization engines offer expressive APIs for building such visualizations, developers often have difficulties to (1) identify a suitable visualization technique to answer their particular development question, and to (2) implement that visualization using the existing APIs. Examples that illustrate the usage of an engine to build concrete visualizations offer a good starting point, but developers may have to traverse long lists of categories and analyze examples one-by-one to find a suitable one.\nWe propose MetaVis, a tool that fills the gap between existing visualization techniques and their practical applications during software development. We classify questions frequently formulated by software developers and for each, based on our expertise, identify suitable visualizations. MetaVis uses tags mined from these questions to offer a tag-iconic cloud-based visualization. Each tag links to suitable visualizations that developers can explore, modify and try out. We present initial results of an implementation of MetaVis in the Pharo programming environment. The tool visualizes 76 developers' questions assigned to 49 visualization examples.",
		"ANNOTE": "internationalconference",
		"PUBLISHER": "IEEE",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa2 scg16 jb17",
		"DOI": "10.1109/VISSOFT.2016.19",
		"YEAR": "2016",
		"URL": "http://scg.unibe.ch/archive/papers/Meri16c.pdf"
	},
	{
		"key": "Meri17a",
		"type": "article",
		"AUTHOR": "Leonel Merino and Mohammad Ghafari and Oscar Nierstrasz",
		"TITLE": "Towards Actionable Visualization for Software Developers",
		"ANNOTE": "internationaljournal",
		"JOURNAL": "Journal of Software: Evolution and Process",
		"VOLUME": "30",
		"NUMBER": "2",
		"ISSN": "2047-7481",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"URL": "http://scg.unibe.ch/archive/papers/Meri17a.pdf",
		"DOI": "10.1002/smr.1923",
		"PAGES": "e1923--n/a",
		"KEYWORDS": "scg-pub snf-asa2 scg18 jb18",
		"YEAR": "2017",
		"ABSTRACT": "Abundant studies have shown that visualization is advantageous for software developers, yet adopting visualization during software development is not a common practice due to the large effort involved in finding an appropriate visualization. Developers require support to facilitate that task. Among 368 papers in SOFTVIS/VISSOFT venues, we identify 86 design study papers about the application of visualization to relieve concerns in software development. We extract from these studies the task, need, audience, data source, representation, medium and tool; and we characterize them according to the subject, process and problem domain. On the one hand, we support software developers to put visualization in action by mapping existing visualization techniques to particular needs from different perspectives. On the other hand, we highlight the problem domains that are overlooked in the field and need more support."
	},
	{
		"key": "Meri17b",
		"type": "inproceedings",
		"AUTHOR": "Leonel Merino and Johannes Fuchs and Michael Blumenschein and Craig Anslow and Mohammad Ghafari and Oscar Nierstrasz and Michael Behrisch and Daniel Keim",
		"TITLE": "On the Impact of the Medium in the Effectiveness of 3D Software Visualization",
		"BOOKTITLE": "VISSOFT'17: Proceedings of the 5th IEEE Working Conference on Software Visualization",
		"ABSTRACT": "Many visualizations have proven to be effective in supporting various software related tasks. Although multiple media can be used to display a visualization, the standard computer screen is used the most. We hypothesize that the medium has a role in their effectiveness. We investigate our hypotheses by conducting a controlled user experiment. In the experiment we focus on the 3D city visualization technique used for software comprehension tasks. We deploy 3D city visualizations across a standard computer screen (SCS), an immersive 3D environment (I3D), and a physical 3D printed model (P3D). We asked twenty-seven participants (whom we divided in three groups for each medium) to visualize software systems of various sizes, solve a set of uniform comprehension tasks, and complete a questionnaire. We measured the effectiveness of visualizations in terms of performance, recollection, and user experience. We found that even though developers using P3D required the least time to identify outliers, they perceived the least difficulty when visualizing systems based on SCS. Moreover, developers using I3D obtained the highest recollection.",
		"ANNOTE": "internationaljournal",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb18",
		"PAGES": "11--21",
		"DOI": "10.1109/VISSOFT.2017.17",
		"PUBLISHER": "IEEE",
		"PEERREVIEW": "yes",
		"YEAR": "2017",
		"URL": "http://scg.unibe.ch/archive/papers/Meri17b.pdf"
	},
	{
		"key": "Meri17c",
		"type": "inproceedings",
		"AUTHOR": "Leonel Merino and Mohammad Ghafari and Craig Anslow and Oscar Nierstrasz",
		"TITLE": "CityVR: Gameful Software Visualization",
		"BOOKTITLE": "ICSME'17: Proceedings of the 33rd IEEE International Conference on Software Maintenance and Evolution (TD Track)",
		"ANNOTE": "internationalconference",
		"ABSTRACT": "Gamification of software engineering tasks improve developer engagement, but has been limited to mechanisms such as points and badges. We believe that a tool that provides developers an interface analogous to computer games can represent the gamification of software engineering tasks more effectively via software visualization. We introduce CityVR -an interactive software visualization tool that implements the city metaphor technique using virtual reality in an immersive 3D environment medium to boost developer engagement in software comprehension tasks. We evaluated our tool with a case study based on ArgoUML. We measured engagement in terms of feelings, interaction, and time perception. We report on how our design choices relate to developer engagement. We found that developers i) felt curious, immersed, in control, excited, and challenged, ii) spent considerable interaction time navigating and selecting elements, and iii) perceived that time passed faster than in reality, and therefore were willing to spend more time using the tool to solve software engineering tasks.",
		"PUBLISHER": "IEEE",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb18",
		"PAGES": "633--637",
		"DOI": "10.1109/ICSME.2017.70",
		"YEAR": "2017",
		"URL": "http://scg.unibe.ch/archive/papers/Meri17c.pdf"
	},
	{
		"key": "Meri18a",
		"type": "article",
		"TITLE": "A Systematic Literature Review of Software Visualization Evaluation",
		"JOURNAL": "Journal of Systems and Software",
		"VOLUME": "144",
		"PAGES": "165-180",
		"YEAR": "2018",
		"MONTH": "October",
		"ISSN": "0164-1212",
		"DOI": "10.1016/j.jss.2018.06.027",
		"ANNOTE": "internationaljournal",
		"URL": "http://scg.unibe.ch/archive/papers/Meri18a.pdf",
		"AUTHOR": "Leonel Merino and Mohammad Ghafari and Craig Anslow and Oscar Nierstrasz",
		"KEYWORDS": "scg-pub snf-asa2 scg18 jb18",
		"ABSTRACT": "Abstract Context: Software visualizations can help\n\t\tdevelopers to analyze multiple aspects of complex software systems, but\n\t\ttheir effectiveness is often uncertain due to the lack of evaluation\n\t\tguidelines. Objective: We identify common problems in the evaluation of\n\t\tsoftware visualizations with the goal of formulating guidelines to\n\t\timprove future evaluations. Method: We review the complete literature\n\t\tbody of 387 full papers published in the SOFTVIS/VISSOFT conferences, and\n\t\tstudy 181 of those from which we could extract evaluation strategies,\n\t\tdata collection methods, and other aspects of the evaluation. Results: Of\n\t\tthe proposed software visualization approaches, 62% lack a strong\n\t\tevaluation. We argue that an effective software visualization should not\n\t\tonly boost time and correctness but also recollection, usability,\n\t\tengagement, and other emotions. Conclusion: We call on researchers\n\t\tproposing new software visualizations to provide evidence of their\n\t\teffectiveness by conducting thorough (i) case studies for approaches that\n\t\tmust be studied in situ, and when variables can be controlled, (ii)\n\t\texperiments with randomly selected participants of the target audience\n\t\tand real-world open source software systems to promote reproducibility\n\t\tand replicability. We present guidelines to increase the evidence of the\n\t\teffectiveness of software visualization approaches, thus improving their\n\t\tadoption rate."
	},
	{
		"key": "Meri18c",
		"type": "inproceedings",
		"AUTHOR": "Leonel Merino and Alexandre Bergel and Oscar Nierstrasz",
		"TITLE": "Overcoming Issues of 3D Software Visualization through Immersive Augmented Reality",
		"BOOKTITLE": "VISSOFT'18: Proceedings of the 6th IEEE Working Conference on Software Visualization",
		"ABSTRACT": "Several usability issues (i.e., navigation, occlusion, selection, and text readability) affect the few 3D visualizations proposed to support developers on software engineering tasks. We observe that most 3D software visualizations are displayed on a standard computer screen, and hypothesize that displaying them in immersive augmented reality can help to (i) overcome usability issues of 3D visualizations, and (ii) increase their effectiveness to support software concerns. We investigate our hypothesis via a controlled experiment. In it, nine participants use 3D city visualizations displayed on a Microsoft HoloLens device to complete a set of software comprehension tasks. We further investigate our conjectures through an observational user study, in which the same participants of the experiment use a space-time cube visualization to analyze program executions. We collect data to (1) quantitatively analyze the effectiveness of visualizations in terms of user performance (i.e., completion time, correctness, and recollection), and user experience (i.e., difficulty, and emotions); and (2) qualitatively analyze how immersive augmented reality helps to overcome the limitations of 3D visualizations. We found that immersive augmented reality facilitates navigation and reduces occlusion, while performance is adequate, and developers obtain an outstanding experience. Selection and text readability still remain open issues.",
		"ANNOTE": "internationalconference",
		"KEYWORDS": "scg-pub snf-asa2 scg18 jb19",
		"PUBLISHER": "IEEE",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"YEAR": "2018",
		"DOI": "10.1109/VISSOFT.2018.00014",
		"PAGES": "54--64",
		"URL": "http://scg.unibe.ch/archive/papers/Meri18c.pdf"
	},
	{
		"key": "Meri19a",
		"type": "inproceedings",
		"AUTHOR": "Merino, Leonel and Hess, Mario and Bergel, Alexandre and Nierstrasz, Oscar and Weiskopf, Daniel",
		"TITLE": "PerfVis: Pervasive Visualization in Immersive Augmented Reality for Performance Awareness",
		"ABSTRACT": "Developers are usually unaware of the impact of code changes\n\tto the performance of software systems. Although developers\n\tcan analyze the performance of a system by executing, for\n\tinstance, a performance test to compare the performance of two\n\tconsecutive versions of the system, changing from a\n\tprogramming task to a testing task would disrupt the\n\tdevelopment flow. In this paper, we propose the use of a city\n\tvisualization that dynamically provides developers with a\n\tpervasive view of the continuous performance of a system. We\n\tuse an immersive augmented reality device (Microsoft HoloLens)\n\tto display our visualization and extend the integrated\n\tdevelopment environment on a computer screen to use the\n\tphysical space. We report on technical details of the design\n\tand implementation of our visualization tool, and discuss\n\tearly feedback that we collected of its usability. Our\n\tinvestigation explores a new visual metaphor to support the\n\texploration and analysis of possibly very large and\n\tmultidimensional performance data. Our initial result\n\tindicates that the city metaphor can be adequate to analyze\n\tdynamic performance data on a large and non-trivial software\n\tsystem.",
		"BOOKTITLE": "Companion of the 2019 ACM/SPEC International Conference on Performance Engineering",
		"SERIES": "ICPE '19",
		"YEAR": "2019",
		"ISBN": "978-1-4503-6286-3",
		"LOCATION": "Mumbai, India",
		"PAGES": "13--16",
		"NUMPAGES": "4",
		"URL": "http://scg.unibe.ch/archive/papers/Meri19a-perfvis.pdf",
		"DOI": "10.1145/3302541.3313104",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"ANNOTE": "internationalconference",
		"ACMID": "3313104",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA",
		"KEYWORDS": "scg-pub jb19 scg19 snf-asa3 performance engineering, software visualization"
	},
	{
		"key": "Meri19b",
		"type": "inproceedings",
		"AUTHOR": "Leonel Merino and Ekaterina Kozlova and Oscar Nierstrasz and Daniel Weiskopf",
		"TITLE": "VISON: An Ontology-Based Approach for Software Visualization Tool Discoverability",
		"BOOKTITLE": "VISSOFT'19: Proceedings of the 7th IEEE Working Conference on Software Visualization",
		"ABSTRACT": "Although many tools have been presented in the research\n\t\tliterature of software visualization, there is little\n\t\tevidence of their adoption. To choose a suitable\n\t\tvisualization tool, practitioners need to analyze various\n\t\tcharacteristics of tools such as their supported software\n\t\tconcerns and level of maturity. Indeed, some of such\n\t\ttools can be prototypes for which the lifespan is\n\t\texpected to be short, whereas some other tools can be\n\t\tfairly mature products that are maintained for a longer\n\t\ttime. Although such characteristics are often described\n\t\tin papers, we conjecture that practitioners willing to\n\t\tadopt software visualizations require additional support\n\t\tto discover suitable visualization tools. In this paper,\n\t\twe elaborate on our efforts to provide such support. To\n\t\tthis end, we systematically analyzed research papers in\n\t\tthe literature of software visualization and curated a\n\t\tcatalog of 70 available tools that employ various\n\t\tvisualization techniques to support the analysis of\n\t\tmultiple software concerns. We further encapsulate these\n\t\tcharacteristics in an ontology. VISON, our software\n\t\tvisualization ontology, captures these semantics as\n\t\tconcepts and relationships. We report on early results of\n\t\tusage scenarios that demonstrate how the ontology can\n\t\tsupport (i) developers to find suitable tools for\n\t\tparticular development concerns, and (ii) researchers who\n\t\tpropose new software visualization tools to identify a\n\t\tbaseline tool for a controlled experiment.",
		"ANNOTE": "internationalconference",
		"DOI": "10.1109/VISSOFT.2019.00014",
		"URL": "http://scg.unibe.ch/archive/papers/Meri19b-vison.pdf",
		"KEYWORDS": "scg-pub snf-asa3 scg19 jb20",
		"PUBLISHER": "IEEE",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"YEAR": "2019"
	},
	{
		"key": "Meye06a",
		"type": "inproceedings",
		"ABSTRACT": "Data visualization is the process of representing\n\t\t\t\t  data as pictures to support reasoning about the\n\t\t\t\t  underlying data. For the interpretation to be as\n\t\t\t\t  easy as possible, we need to be as close as possible\n\t\t\t\t  to the original data. As most visualization tools\n\t\t\t\t  have an internal meta-model, which is different from\n\t\t\t\t  the one for the presented data, they usually need to\n\t\t\t\t  duplicate the original data to conform to their\n\t\t\t\t  meta-model. This leads to an increase in the\n\t\t\t\t  resources needed, increase which is not always\n\t\t\t\t  justified. In this work we argue for the need of\n\t\t\t\t  having an engine that is as close as possible to the\n\t\t\t\t  data and we present our solution of moving the\n\t\t\t\t  visualization tool to the data, instead of moving\n\t\t\t\t  the data to the visualization tool. Our solution\n\t\t\t\t  also emphasizes the necessity of reusing basic\n\t\t\t\t  blocks to express complex visualizations and\n\t\t\t\t  allowing the programmer to script the visualization\n\t\t\t\t  using his preferred tools, rather than a third party\n\t\t\t\t  format. As a validation of the expressiveness of our\n\t\t\t\t  framework, we show how we express several already\n\t\t\t\t  published visualizations and describe the pros and\n\t\t\t\t  cons of the approach.",
		"ADDRESS": "New York, NY, USA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Michael Meyer and Tudor Gîrba and Mircea Lungu",
		"BOOKTITLE": "ACM Symposium on Software Visualization (SoftVis'06)",
		"DOI": "10.1145/1148493.1148513",
		"KEYWORDS": "hasler07 scg-pub girba visualization scg-none jb07 fb06 mooseCincom norex06 moose-pub sde-visualization",
		"MEDIUM": "2",
		"PAGES": "135--144",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM Press",
		"TITLE": "Mondrian: An Agile Visualization Framework",
		"URL": "http://scg.unibe.ch/archive/papers/Meye06aMondrian.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Meye06aMondrian.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1148493.1148513"
	},
	{
		"key": "Milo14a",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"ABSTRACT": "Polymorphism, along with inheritance, is one of the most important\n\t\tfeatures in object-oriented languages, but it is also one of the biggest\n\t\tobstacles to source code comprehension. Depending on the run-time type of the\n\t\treceiver of a message, any one of a number of possible methods may be invoked.\n\t\tSeveral algorithms for creating accurate call-graphs using static analysis\n\t\talready exist, however, they consume significant time and memory resources. We\n\t\tpropose an approach that will combine static and dynamic analysis and yield the\n\t\tbest possible precision with a minimal trade-off between used resources and\n\t\taccuracy.",
		"AUTHOR": "Milojković, Nevena",
		"BOOKTITLE": "SATToSE'14: Pre-Proceedings of the 7th International Seminar Series on Advanced Techniques & Tools for Software Evolution",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"KEYWORDS": "scg-pub snf-asa1 skip-doi dynamic analysis scg14 jb14 Milojkovic Milojković",
		"MONTH": "July",
		"PAGES": "54--55",
		"TITLE": "Towards cheap, accurate polymorphism detection",
		"YEAR": "2014",
		"URL": "http://scg.unibe.ch/archive/papers/Milo14a.pdf",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Milo14a.pdf"
	},
	{
		"key": "Milo15a",
		"type": "inproceedings",
		"ABSTRACT": "Subtype polymorphism is a cornerstone of object-oriented programming. By\n\thiding variability in behavior behind a uniform interface, polymorphism\n\tdecouples clients from providers and thus enables genericity, modularity and extensi-\n\tbility. At the same time, however, it scatters the implementation of the behavior over\n\tmultiple classes thus potentially hampering program comprehension. The extent to which\n\tpolymorphism is used in real programs and the impact of polymorphism on program\n\tcomprehension are not very well understood. We report on a preliminary study of the\n\tprevalence of polymorphism in several hundred open source software systems written in\n\tSmalltalk, one of the oldest object-oriented programming languages, and in Java, one of\n\tthe most widespread ones. Although a large portion of the call sites in these systems are\n\tpolymorphic, a majority have a small number of potential candidates. Smalltalk uses\n\tpolymorphism to a much greater extent than Java. We discuss how these findings can be used\n\tas input for more detailed studies in program comprehension and for better developer\n\tsupport in the IDE.",
		"AUTHOR": "Nevena Milojković and Andrea Caracciolo and Mircea Lungu and Oscar Nierstrasz and David Röthlisberger and Romain Robbes",
		"BOOKTITLE": "Proceedings of the 2015 IEEE 23rd International Conference on Program Comprehension",
		"LOCATION": "Florence, Italy",
		"ISSN": "1063-6897",
		"KEYWORDS": "scg-pub snf-asa1 scg15 jb15 Milojkovic Milojković",
		"MEDIUM": "2",
		"PAGES": "186--195",
		"NUMPAGES": "10",
		"PEERREVIEW": "yes",
		"TITLE": "Polymorphism in the Spotlight: Studying its Prevalence in Java and Smalltalk",
		"NOTE": "Published",
		"YEAR": "2015",
		"PUBLISHER": "IEEE Press",
		"DOI": "10.1109/ICPC.2015.29",
		"URL": "http://scg.unibe.ch/archive/papers/Milo15a.pdf"
	},
	{
		"key": "Milo16a",
		"type": "inproceedings",
		"ABSTRACT": "Dynamically typed languages allow developers to write more expressive source code, but their lack of static information about types of variables is one of the main\nobstacles during program comprehension and maintenance. Static type information reduces the complexity of a program.\nMost of the type inference algorithms suffer from the problem of false positives or negatives. Complex approaches are required to avoid this problem.\nWe propose a simple heuristic that uses easily accessible run-time information about the usage of each class as a receiver type for a message send. This frequency serves as a proxy for the likelihood that a variable belongs to that class at run time and is used to promote the correct type towards the top of the list of possible types for a variable.\nOur evaluation of a proof-of-concept prototype implemented in Pharo Smalltalk shows that our heuristic is reason- ably precise to detect both library and project-related types on average in 65.92% to 82.83% of cases.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Nevena Milojković and Clément Béra and Mohammad Ghafari and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of International Workshop on Smalltalk Technologies (IWST 2016)",
		"KEYWORDS": "scg-pub snf-asa2 scg16 jb16 Milojkovic",
		"PEERREVIEW": "yes",
		"PAGES": "6:1--6:11",
		"TITLE": "Inferring Types by Mining Class Usage Frequency from Inline Caches",
		"YEAR": "2016",
		"DOI": "10.1145/2991041.2991047",
		"MEDIUM": "4",
		"URL": "http://scg.unibe.ch/archive/papers/Milo16a.pdf"
	},
	{
		"key": "Milo16b",
		"type": "inproceedings",
		"ABSTRACT": "Although dynamically typed languages allow developers to be more productive in writing source code, their lack of information about types of variables is one of the main obstacles during program comprehension. Static type information helps developers to decrease software maintenance time.\nInferring the types of variables requires complex algorithms in order to avoid false positives or negatives. Their main aim is to shorten the list of possible types for a variable.\nWe have developed a couple of cheap heuristics that use easily accessible information about the presence of each class in the available source code to promote the correct type towards the top of the list of possible types for a variable.\nOur evaluation of a proof-of-concept prototype, implemented in Pharo Smalltalk, shows that both for domain- specific types and standard libraries these heuristics tend to work well. The evaluated heuristics prove to be reasonably precise, promoting the correct types of a variable towards the top of the list in 50.67% up to 89.09% of cases on average, depending on the applied heuristic. The heuristic that has proven to be the best was compared with one existing type inference algorithm and the best heuristic yields significantly better results with less effort.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Nevena Milojković and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 2016 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software, Onward! 2016",
		"KEYWORDS": "scg-pub snf-asa2 scg16 jb17 Milojkovic",
		"PEERREVIEW": "yes",
		"TITLE": "Exploring Cheap Type Inference Heuristics in Dynamically Typed Languages",
		"DOI": "10.1145/2986012.2986017",
		"ISBN": "978-1-4503-4076-2",
		"LOCATION": "Amsterdam, Netherlands",
		"PAGES": "43--56",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA",
		"YEAR": "2016",
		"MEDIUM": "2",
		"URL": "http://scg.unibe.ch/archive/papers/Milo16b.pdf"
	},
	{
		"key": "Milo17a",
		"type": "inproceedings",
		"AUTHOR": "Nevena Milojković and Mohammad Ghafari and Oscar Nierstrasz",
		"ABSTRACT": "The lack of static type information is one of the main obstacles to program comprehension in dynamically-typed languages. While static type inference algorithms try to remedy this problem, they usually suffer from the problem of false positives or false negatives.\nIn order to partially compensate for the lack of static type information, a common practice in dynamically-typed languages is to name or annotate method arguments in such a way that they reveal their expected type, e.g., aString, anInt, or string: String. Recent studies confirmed that these type annotations are indeed frequently used by developers in dynamically-typed languages.\nWe propose a lightweight heuristic that uses these hints from method argument names to augment the performance of a static type inference algorithm. The evaluation through a proof-of-concept prototype implemented in Pharo Smalltalk shows that the augmented algorithm outperforms the basic algorithm, and correctly infers types for 81% more method arguments.",
		"LOCATION": "Buenos Aires, Argentina",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb17 Milojkovic",
		"PEERREVIEW": "yes",
		"DOI": "10.1109/ICPC.2017.33",
		"MEDIUM": "2",
		"BOOKTITLE": "25th IEEE International Conference on Program Comprehension",
		"ANNOTE": "internationalconference",
		"TITLE": "Exploiting Type Hints in Method Argument Names to Improve Lightweight Type Inference",
		"URL": "http://scg.unibe.ch/archive/papers/Milo17a.pdf",
		"YEAR": "2017"
	},
	{
		"key": "Milo17b",
		"type": "inproceedings",
		"AUTHOR": "Nevena Milojković and Mohammad Ghafari and Oscar Nierstrasz",
		"LOCATION": "Buenos Aires, Argentina",
		"ABSTRACT": "Duck typing provides a way to reuse code and allow a developer to write more extensible code. At the same time, it scatters the implementation of a functionality over multiple classes and causes difficulties in program comprehension.\nThe extent to which duck typing is used in real programs is not very well understood. We report on a preliminary study of the prevalence of duck typing in more than a thousand dynamically-typed open source software systems developed in Smalltalk.\nAlthough a small portion of the call sites in these systems is duck-typed, in half of the analysed systems at least 20% of methods are duck-typed.",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb17 Milojkovic",
		"PEERREVIEW": "yes",
		"DOI": "10.1109/ICPC.2017.10",
		"MEDIUM": "2",
		"BOOKTITLE": "25th IEEE International Conference on Program Comprehension (ERA Track)",
		"ANNOTE": "internationalconference",
		"TITLE": "It's Duck (Typing) Season!",
		"URL": "http://scg.unibe.ch/archive/papers/Milo17b.pdf",
		"YEAR": "2017"
	},
	{
		"key": "Milo17c",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"ABSTRACT": "Dynamically-typed languages allow faster\nsoftware development by not posing the type\nconstraints. Static type information facilitates\nprogram comprehension and software maintenance.\nType inference algorithms attempt\nto reconstruct the type information from the\ncode, yet they suffer from the problem of\nfalse positives or false negatives. The use of\ncomplex type inference algorithms is questionable\nduring the development phase, due to\ntheir performance costs. Instead, we propose\nlightweight heuristics to improve simple type\ninference algorithms and, at the same time,\npreserve their swiftness.",
		"AUTHOR": "Milojković, Nevena",
		"BOOKTITLE": "SATToSE'17: Pre-Proceedings of the 10th International Seminar Series on Advanced Techniques & Tools for Software Evolution",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb17 skip-doi Milojkovic Milojković",
		"MONTH": "June",
		"LOCATION": "Madrid, Spain",
		"TITLE": "Improving the Precision of Type Inference Algorithms with Lightweight Heuristics",
		"YEAR": "2017",
		"URL": "http://scg.unibe.ch/archive/papers/Milo17c.pdf",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Milo17c.pdf"
	},
	{
		"key": "Milo17e",
		"type": "article",
		"ABSTRACT": "The lack of static type information in dynamically-typed languages often\n\t\tposes obstacles for developers. Type inference algorithms can\n\t\thelp, but inferring precise type information requires complex\n\t\talgorithms that are often slow. A simple approach that considers only\n\t\tthe locally used interface of variables can identify potential classes\n\t\tfor variables, but popular interfaces can generate a large number of\n\t\tfalse positives. We propose an approach called inline-cache type\n\t\tinference (ICTI) to augment the precision of fast and simple type\n\t\tinference algorithms. ICTI uses type information available in the\n\t\tinline caches during multiple software runs, to provide a ranked list\n\t\tof possible classes that most likely represent a variable's type. We\n\t\tevaluate ICTI through a proof-of-concept that we implement in Pharo\n\t\tSmalltalk. The analysis of the top-n+2 inferred types (where n is the\n\t\tnumber of recorded run-time types for a variable) for 5486 variables\n\t\tfrom four different software systems shows that ICTI produces\n\t\tpromising results for about 75% of the variables. For more than 90% of\n\t\tvariables, the correct run-time type is present among first six\n\t\tinferred types. Our ordering shows a twofold improvement when compared\n\t\twith the unordered basic approach, i.e., for a significant number of\n\t\tvariables for which the basic approach offered ambiguous results, ICTI\n\t\twas able to promote the correct type to the top of the list.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Nevena Milojković and Clément Béra and Mohammad Ghafari and Oscar Nierstrasz",
		"JOURNAL": "Science of Computer Programming, Elsevier, Special Issue on Adv. Dynamic Languages",
		"KEYWORDS": "scg-pub scg17 snf-asa2 jb18",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"DOI": "10.1016/j.scico.2017.11.003",
		"TITLE": "Mining Inline Cache Data to Order Inferred Types in Dynamic Languages",
		"URL": "http://scg.unibe.ch/archive/papers/Milo17e.pdf",
		"VOLUME": "161",
		"PAGES": "105-121",
		"YEAR": "2018"
	},
	{
		"key": "Minj05a",
		"type": "inproceedings",
		"ABSTRACT": "The trait model is complementary to class\n\t\t\t\t  inheritance and allows collections of methods to be\n\t\t\t\t  reused by several classes. The classbox model allows\n\t\t\t\t  a collection of classes to be locally extended with\n\t\t\t\t  variables and/or methods addition. This paper\n\t\t\t\t  describes a symbiosis of these two models: classes\n\t\t\t\t  can be locally extended by using a trait. It is\n\t\t\t\t  illustrated by an efficient implementation of the\n\t\t\t\t  collaboration model where a collaboration is\n\t\t\t\t  represented by a classbox and a role by a trait.",
		"ADDRESS": "Bern, Switzerland",
		"AERES": "ACL",
		"ANNOTE": "nationalconference",
		"AUTHOR": "Florian Minjat and Alexandre Bergel and Pierre Cointe and Stéphane Ducasse",
		"BOOKTITLE": "Actes de Langages et Modèles à Objets (LMO'05)",
		"INRIA": "hors",
		"KEYWORDS": "traits classbox scg-pub skip-doi scg stefPub scg-none jb05 alexPub alexandrePub noWorkshop snf05",
		"PAGES": "33--46",
		"SELECTIF": "non",
		"TITLE": "Mise en symbiose des traits et des classboxes: Application à l'expression des collaborations",
		"URL": "http://scg.unibe.ch/archive/papers/Minj05a-TraitClassbox.pdf",
		"VOLUME": "11",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Minj05a-TraitClassbox.pdf"
	},
	{
		"key": "More99a",
		"type": "book",
		"ADDRESS": "Kaiserslautern, Germany",
		"EDITOR": "Ana Moreira and Serge Demeyer",
		"KEYWORDS": "olit ecoop99wr scg-pub skip-abstract skip-doi skip-pdf toBeChecked scglib snf99 scg-none jb99 sergedem-volume scg-none jb99",
		"MONTH": "December",
		"NUMBER": "1743",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Object-Oriented Technology (ECOOP'99 Workshop Reader)",
		"YEAR": "1999"
	},
	{
		"key": "Mose95a",
		"type": "incollection",
		"AUTHOR": "Simon Moser",
		"BOOKTITLE": "Software — Concepts and Tools",
		"ISSN": "0945-8115",
		"KEYWORDS": "skip-pdf skip-abstract skip-doi snf-none olit scg-pub toBeChecked scg-none jb95",
		"MONTH": "July",
		"PAGES": "63--80",
		"PUBLISHER": "Springer Intl.",
		"TITLE": "Metamodels for Object-Oriented Systems",
		"VOLUME": "16",
		"YEAR": "1995"
	},
	{
		"key": "Mose96a",
		"type": "article",
		"ABSTRACT": "A field study of over thirty projects using Object\n\t\t\t\t  Technology has shown that the availability (or\n\t\t\t\t  absence) of reusable frameworks has substantial\n\t\t\t\t  productivity impacts. This can make it more\n\t\t\t\t  difficult to reliably estimate the size and cost of\n\t\t\t\t  such projects early in the software process. The\n\t\t\t\t  newly proposed System Meter method tackles this\n\t\t\t\t  problem by distinguishing functionality to be\n\t\t\t\t  implemented from functionality supported by reusable\n\t\t\t\t  components. It therefore yields more uniform and\n\t\t\t\t  predictable productivity measures. Moreover, it can\n\t\t\t\t  also be applied already after a preliminary analysis\n\t\t\t\t  phase, in contrast to the more traditional Function\n\t\t\t\t  Points approach.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Simon Moser and Oscar Nierstrasz",
		"DOI": "10.1109/2.536783",
		"JOURNAL": "IEEE Computer",
		"KEYWORDS": "olit scg-pub snf96 scg-none jb96 onhindex(84)",
		"MONTH": "September",
		"PAGES": "45--51",
		"TITLE": "The Effect of Object-Oriented Frameworks on Developer Productivity",
		"URL": "http://scg.unibe.ch/archive/papers/Mose96aOOMetrics.pdf",
		"YEAR": "1996",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Mose96aOOMetrics.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/2.536783"
	},
	{
		"key": "Moug03a",
		"type": "inproceedings",
		"ABSTRACT": "Array programming shines in its ability to express\n\t\t\t\t  computations at a high-level of abstraction,\n\t\t\t\t  allowing one to manipulate and query whole sets of\n\t\t\t\t  data at once. This paper presents the OPA model that\n\t\t\t\t  enhances object-oriented programming with array\n\t\t\t\t  programming features. The goal of OPA is to\n\t\t\t\t  determine a minimum set of modifications that must\n\t\t\t\t  be made to the traditional object model in order to\n\t\t\t\t  take advantage of the possibilities of array\n\t\t\t\t  programming. It is based on a minimal extension of\n\t\t\t\t  method invocation and the definition of a kernel of\n\t\t\t\t  methods implementing fundamental array programming\n\t\t\t\t  operations. The OPA model presents a generalization\n\t\t\t\t  of traditional message passing in the sense that a\n\t\t\t\t  message can be send to an entire set of objects. The\n\t\t\t\t  model is validated in FS, a new scripting language.",
		"ACCEPTNUM": "26",
		"ACCEPTTOTAL": "142",
		"ANNOTE": "internationalconference topconference",
		"AUTHOR": "Philippe Mougin and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of 17th International Conference on Object-Oriented Programming Systems, Languages and Applications (OOPSLA'03)",
		"DOI": "10.1145/949305.949312",
		"KEYWORDS": "snf04 scg-pub scg-none jb04 stefPub",
		"MISC": "acceptance rate: 26/142 = 18",
		"MONTH": "October",
		"PAGES": "65--77",
		"TITLE": "OOPAL: Integrating Array Programming in Object-Oriented Programming",
		"URL": "http://scg.unibe.ch/archive/papers/Moug03aOOPALOOPSLA.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Moug03aOOPALOOPSLA.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/949305.949312"
	},
	{
		"key": "Nebb98m",
		"type": "inproceedings",
		"AUTHOR": "Robb Nebbe",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP '98 Workshop Reader)",
		"EDITOR": "Serge Demeyer and Jan Bosch",
		"KEYWORDS": "olit famoos-papunr scg-pub skip-abstract skip-doi toBeChecked snf98 scg-none jb98",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Semantic Structure: a Basis for Software Architecture",
		"URL": "http://scg.unibe.ch/archive/famoos/Nebb98m/nebbe_oosa.pdf",
		"VOLUME": "1543",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/famoos/Nebb98m/nebbe_oosa.pdf"
	},
	{
		"key": "Nebb98n",
		"type": "inproceedings",
		"ABSTRACT": "This position paper is based on work recovering\n\t\t\t\t  architectures from object-oriented systems in the\n\t\t\t\t  context of the FAMOOS Esprit project. Our experience\n\t\t\t\t  corroborates the existence of aspects that cross-cut\n\t\t\t\t  the functionality of a software system. However,\n\t\t\t\t  when examining how the problems arising from such a\n\t\t\t\t  situation are dealt with in Ada where the language\n\t\t\t\t  has built-in support for concurrency and C++ where\n\t\t\t\t  no such support exists suggests the possibility of a\n\t\t\t\t  more general approach to aspect-oriented programming\n\t\t\t\t  based on the following hypothesis about software\n\t\t\t\t  structure that so far has proven to be correct. \"A\n\t\t\t\t  software system can be structured as a set of\n\t\t\t\t  independent semantic domains consisting of a core\n\t\t\t\t  problem domain and a set of coordinated supporting\n\t\t\t\t  domains.\" I will use the term semantics to refer to\n\t\t\t\t  an axiomatic or denotational notions of semantics\n\t\t\t\t  where only the result is considered as semantically\n\t\t\t\t  relevant as opposed to an operational notion of\n\t\t\t\t  semantics where how the result was obtained is\n\t\t\t\t  equally important. I will also use the term\n\t\t\t\t  coordination to mean the linking of actions or\n\t\t\t\t  instances from different semantic domains. This is a\n\t\t\t\t  very general notion of coordination of which the\n\t\t\t\t  more traditional use of coordination in relation to\n\t\t\t\t  concurrency is an example.",
		"AUTHOR": "Robb Nebbe",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP '98 Workshop Reader)",
		"EDITOR": "Serge Demeyer and Jan Bosch",
		"KEYWORDS": "olit famoos-papunr scg-pub skip-doi toBeChecked snf98 scg-none jb98",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Composition and Coordination: the Two Paradigms Underlying AOP?",
		"URL": "http://scg.unibe.ch/archive/famoos/Nebb98n/nebbe_aop.pdf",
		"VOLUME": "1543",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/famoos/Nebb98n/nebbe_aop.pdf"
	},
	{
		"key": "Nebb99z",
		"type": "techreport",
		"ABSTRACT": "This document defines a language plug-in for FAMIX,\n\t\t\t\t  the FAMOOS information exchange model. It extends\n\t\t\t\t  and interprets the FAMIX core model to cover the\n\t\t\t\t  essential entities from the Ada programming\n\t\t\t\t  language.",
		"AUTHOR": "Robb Nebbe",
		"INSTITUTION": "University of Bern",
		"KEYWORDS": "scg-pub skip-doi scg-none jb-none olit famoos-techrep snf99 moose-pub",
		"MONTH": "August",
		"TITLE": "FAMIX Ada language plug-in 2.2",
		"URL": "http://scg.unibe.ch/archive/famoos/FAMIX/Plugins/AdaPlugin2.2.html http://scg.unibe.ch/archive/famoos/FAMIX/Plugins/AdaPlugin2.2.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/famoos/FAMIX/Plugins/AdaPlugin2.2.html%20http://scg.unibe.ch/archive/famoos/FAMIX/Plugins/AdaPlugin2.2.pdf"
	},
	{
		"key": "Nier95a",
		"type": "incollection",
		"ABSTRACT": "The key requirement for open systems is that they be\n\t\t\t\t  flexible, or recomposable. This suggests that they\n\t\t\t\t  must first of all be composable. Object-oriented\n\t\t\t\t  techniques help by allowing applications to be\n\t\t\t\t  viewed as compositions of collaborating objects, but\n\t\t\t\t  are limited in supporting other kinds of\n\t\t\t\t  abstractions that may have finer or coarser\n\t\t\t\t  granularity than objects. A composition language\n\t\t\t\t  supports the technical requirements of a\n\t\t\t\t  component-oriented development approach by shifting\n\t\t\t\t  emphasis from programming and inheritance of classes\n\t\t\t\t  to specification and composition of components.\n\t\t\t\t  Objects are viewed as processes, and components are\n\t\t\t\t  abstractions over the object space. An application\n\t\t\t\t  is viewed as an explicit composition of software\n\t\t\t\t  components. By making software architectures\n\t\t\t\t  explicit and manipulable, we expect to better\n\t\t\t\t  support application evolution and flexibility. In\n\t\t\t\t  this position paper we will elaborate our\n\t\t\t\t  requirements and outline a strategy for the design\n\t\t\t\t  and implementation of a composition language for the\n\t\t\t\t  development of open systems.",
		"AUTHOR": "Oscar Nierstrasz and Theo Dirk Meijler",
		"BOOKTITLE": "Object-Based Models and Langages for Concurrent Systems",
		"DOI": "10.1007/3-540-59450-7_9",
		"EDITOR": "Paolo Ciancarini and Oscar Nierstrasz and Akinori Yonezawa",
		"ISBN": "978-3-540-59450-5",
		"KEYWORDS": "olit scg-pub snf95 racl OBM94-09 scg-none jb94 scg-coord-old onhindex(117)",
		"PAGES": "147--161",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Requirements for a Composition Language",
		"URL": "http://scg.unibe.ch/archive/papers/Nier95aReqtsForaCompLang.pdf",
		"VOLUME": "924",
		"YEAR": "1995",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier95aReqtsForaCompLang.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/3-540-59450-7_9"
	},
	{
		"key": "Nier95b",
		"type": "book",
		"ABSTRACT": "Object-Oriented Software Composition represents the\n\t\t\t\t  results of about ten years of collective research by\n\t\t\t\t  the authors on various aspects of object-oriented\n\t\t\t\t  technology. The message of the book is that the\n\t\t\t\t  technology is not merely about “object-oriented\n\t\t\t\t  programming,” but that it provides the key to\n\t\t\t\t  component-oriented software development. Within this\n\t\t\t\t  view, one can see applications not only as\n\t\t\t\t  collections of collaborating and communicating\n\t\t\t\t  objects, but as compositions of plug-compatible\n\t\t\t\t  software components. The work presented in this book\n\t\t\t\t  was carried out either by members of the Object\n\t\t\t\t  Systems Group at the University of Geneva in\n\t\t\t\t  Switzerland, or by partners in collaborative\n\t\t\t\t  research projects.",
		"EDITOR": "Oscar Nierstrasz and Dennis Tsichritzis",
		"ISBN": "0-13-220674-9",
		"KEYWORDS": "olit-obc osg skip-doi scg-pub toBeChecked snf95 book scglib scg-none jb94 scg-none jb95 onhindex(211)",
		"PUBLISHER": "Prentice-Hall",
		"TITLE": "Object-Oriented Software Composition",
		"URL": "http://scg.unibe.ch/archive/oosc/index.html",
		"YEAR": "1995",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/oosc/index.html"
	},
	{
		"key": "Nier95c",
		"type": "incollection",
		"ABSTRACT": "Modern software systems are increasingly required to\n\t\t\t\t  be open and distributed. Such systems are open not\n\t\t\t\t  only in terms of network connections and\n\t\t\t\t  interoperability support for heterogeneous hardware\n\t\t\t\t  and software platforms, but, above all, in terms of\n\t\t\t\t  evolving and changing requirements. Although\n\t\t\t\t  object-oriented technology offers some relief, to a\n\t\t\t\t  large extent the languages, methods and tools fail\n\t\t\t\t  to address the needs of open systems because they do\n\t\t\t\t  not escape from traditional models of software\n\t\t\t\t  development that assume system requirements to be\n\t\t\t\t  closed and stable. We argue that open systems\n\t\t\t\t  requirements can only be adequately addressed by\n\t\t\t\t  adopting a component-oriented as opposed to a purely\n\t\t\t\t  object-oriented software development approach, by\n\t\t\t\t  shifting emphasis away from programming and towards\n\t\t\t\t  generalized software composition.",
		"AUTHOR": "Oscar Nierstrasz and Laurent Dami",
		"BOOKTITLE": "Object-Oriented Software Composition",
		"EDITOR": "Oscar Nierstrasz and Dennis Tsichritzis",
		"KEYWORDS": "olit osg OOSC01 scg-pub skip-doi toBeChecked snf95 onhindex(149) scg-none jb94 sclit omnrep",
		"PAGES": "3--28",
		"PUBLISHER": "Prentice-Hall",
		"TITLE": "Component-Oriented Software Technology",
		"URL": "http://scg.unibe.ch/archive/oosc/index.html",
		"YEAR": "1995",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/oosc/index.html"
	},
	{
		"key": "Nier95d",
		"type": "incollection",
		"ABSTRACT": "Previous work on type-theoretic foundations for\n\t\t\t\t  object-oriented programming languages has mostly\n\t\t\t\t  focused on applying or extending functional type\n\t\t\t\t  theory to functional \"objects.\" This approach, while\n\t\t\t\t  benefiting from a vast body of existing literature,\n\t\t\t\t  has the disadvantage of dealing with state change\n\t\t\t\t  either in a roundabout way or not at all, and\n\t\t\t\t  completely sidestepping issues of concurrency. In\n\t\t\t\t  particular, dynamic issues of non-uniform service\n\t\t\t\t  availability and conformance to protocols are not\n\t\t\t\t  addressed by functional types. We propose a new type\n\t\t\t\t  framework that characterizes objects as regular\n\t\t\t\t  (finite state) processes that provide guarantees of\n\t\t\t\t  service along public channels. We also propose a new\n\t\t\t\t  notion of subtyping for active objects, based on\n\t\t\t\t  Brinksma's notion of extension, that extends Wegner\n\t\t\t\t  and Zdonik's \"principle of substitutability\" to\n\t\t\t\t  non-uniform service availability. Finally, we\n\t\t\t\t  formalize what it means to \"satisfy a client's\n\t\t\t\t  expectations,\" and we show how regular types can be\n\t\t\t\t  used to tell when sequential or concurrent clients\n\t\t\t\t  are satisfied.",
		"AUTHOR": "Oscar Nierstrasz",
		"BOOKTITLE": "Object-Oriented Software Composition",
		"EDITOR": "Oscar Nierstrasz and Dennis Tsichritzis",
		"KEYWORDS": "olit-obc osg OOSC04 scg-pub skip-doi toBeChecked snf95 rtao scg-none jb94 omnrep",
		"PAGES": "99--121",
		"PUBLISHER": "Prentice-Hall",
		"TITLE": "Regular Types for Active Objects",
		"URL": "http://scg.unibe.ch/archive/oosc/index.html",
		"YEAR": "1995",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/oosc/index.html"
	},
	{
		"key": "Nier95e",
		"type": "article",
		"ABSTRACT": "Software composition refers to the\n\t\t\t\t  construction of software applications from\n\t\t\t\t  components that implement abstractions pertaining to\n\t\t\t\t  a particular problem domain. Raising the level of\n\t\t\t\t  abstraction is a time-honored way of dealing with\n\t\t\t\t  complexity, but the real benefit of composable\n\t\t\t\t  software systems lies in their increased\n\t\t\t\t  flexibility: a system built from components should\n\t\t\t\t  be easy to recompose to address new requirements. A\n\t\t\t\t  certain amount of success has been achieved in some\n\t\t\t\t  well-understood application domains, as witnessed by\n\t\t\t\t  the popularity of user-interface toolkits, fourth\n\t\t\t\t  generation languages and application generators. But\n\t\t\t\t  how can we generalize this?",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Oscar Nierstrasz and Theo Dirk Meijler",
		"DOI": "10.1145/210376.210389",
		"JOURNAL": "ACM Computing Surveys",
		"KEYWORDS": "olit scg-pub toBeChecked snf95 scg-none jb95 scg-coord-old onhindex(132)",
		"MONTH": "June",
		"NUMBER": "2",
		"PAGES": "262--264",
		"TITLE": "Research Directions in Software Composition",
		"URL": "http://scg.unibe.ch/archive/papers/Nier95eResearchDirections.pdf",
		"VOLUME": "27",
		"YEAR": "1995",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier95eResearchDirections.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/210376.210389"
	},
	{
		"key": "Nier95f",
		"type": "inproceedings",
		"ABSTRACT": "Traditional software development approaches do not\n\t\t\t\t  cope well with the evolving requirements of open\n\t\t\t\t  systems. We argue that such systems are best viewed\n\t\t\t\t  as flexible compositions of \"software components\"\n\t\t\t\t  designed to work together as part of a component\n\t\t\t\t  framework that formalizes a class of applications\n\t\t\t\t  with a common software architecture. To enable such\n\t\t\t\t  a view of software systems, we need appropriate\n\t\t\t\t  support from programming language technology,\n\t\t\t\t  software tools, and methods. We will briefly review\n\t\t\t\t  the current state of object-oriented technology,\n\t\t\t\t  insofar as it supports componentoriented\n\t\t\t\t  development, and propose a research agenda of topics\n\t\t\t\t  for further investigation.",
		"ADDRESS": "Nancy",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings, Langages et Modèles à Objets",
		"KEYWORDS": "olit scg-pub skip-doi toBeChecked snf95 scg-none jb95 scg-coord-old",
		"MONTH": "October",
		"PAGES": "193--204",
		"TITLE": "Research Topics in Software Composition",
		"URL": "http://scg.unibe.ch/archive/papers/Nier95fResearchTopics.pdf",
		"YEAR": "1995",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier95fResearchTopics.pdf"
	},
	{
		"key": "Nier96a",
		"type": "inproceedings",
		"ABSTRACT": "Flexibility is achieved in open systems by adopting\n\t\t\t\t  software architectures that allow software\n\t\t\t\t  components to be easily plugged in, adapted and\n\t\t\t\t  exchanged. But open systems are generally con\n\t\t\t\t  current, distributed and heterogeneous in addition\n\t\t\t\t  to being adaptable. Ad hoc approaches to specifying\n\t\t\t\t  component frameworks can lead to unexpected semantic\n\t\t\t\t  conflicts. We propose, instead, to develop a\n\t\t\t\t  rigorous foundation for composable software systems\n\t\t\t\t  by a series of experiments in modelling concurrent\n\t\t\t\t  and object-based software abstractions as\n\t\t\t\t  composable, communicating processes. Eventually we\n\t\t\t\t  hope to identify and realize the most useful\n\t\t\t\t  compositional idioms as a composition language for\n\t\t\t\t  open systems specification.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Oscar Nierstrasz and Jean-Guy Schneider and Markus Lumpe",
		"BOOKTITLE": "Proceedings 1st IFIP Workshop on Formal Methods for Open Object-based Distributed Systems FMOODS '96",
		"KEYWORDS": "olit scg-pub skip-doi snf96 scg-none jb96 scg-coord-old fmoods96",
		"PAGES": "271--282",
		"PUBLISHER": "Chapmann & Hall",
		"TITLE": "Formalizing Composable Software Systems — A Research Agenda",
		"URL": "http://scg.unibe.ch/archive/papers/Nier96aCompositionResearch.pdf",
		"YEAR": "1996",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier96aCompositionResearch.pdf"
	},
	{
		"key": "Nier97a",
		"type": "article",
		"ABSTRACT": "In der letzten Zeit wird immer häufiger von\n\t\t\t\t  komponentenorientierter Softwareentwicklung\n\t\t\t\t  gesprochen, wobei meistens nicht klar ist, was\n\t\t\t\t  darunter eigentlich zu verstehen ist. Was macht ein\n\t\t\t\t  Stück Software zur Komponente? Wir sagen,\n\t\t\t\t  daß Softwarekomponenten in einer speziellen Art\n\t\t\t\t  und Weise konstruiert werden müssen, um mit\n\t\t\t\t  anderen Komponenten zu einer Applikation\n\t\t\t\t  zusammengefügt werden zu können. Mit anderen\n\t\t\t\t  Worten, eine Softwarekomponente ist Teil eines\n\t\t\t\t  Komponentenframeworks, daß (i) eine Bibliothek\n\t\t\t\t  von Black-Box-Komponenten zu Verfügung stellt,\n\t\t\t\t  (ii) eine wiederverwendbare Softwarearchitektur\n\t\t\t\t  definiert, in der die Komponenten geeignet\n\t\t\t\t  integriert sind und (iii) eine bestimmte Art von\n\t\t\t\t  Glue, die es uns erlaubt, Komponenten miteinander zu\n\t\t\t\t  verbinden. In diesem Artikel versuchen wir, den\n\t\t\t\t  Ist-Zustand der Komponententechnologie wiederzugeben\n\t\t\t\t  und behaupten, daß nur eine bessere\n\t\t\t\t  Unterstützung im Bereich Frameworks und Gluing\n\t\t\t\t  die Komponententechnologie vorwärts bringen\n\t\t\t\t  kann.",
		"ANNOTE": "invited",
		"AUTHOR": "Oscar Nierstrasz and Markus Lumpe",
		"JOURNAL": "HMD — Theorie und Praxis der Wirtschaftsinformatik",
		"KEYWORDS": "scg-pub skip-doi olit snf97 scg-none jb97",
		"MONTH": "September",
		"PAGES": "8--23",
		"TITLE": "Komponenten, Komponentenframeworks und Gluing",
		"URL": "http://scg.unibe.ch/archive/papers/Nier97aKomponentenUndGluing.pdf",
		"YEAR": "1997",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier97aKomponentenUndGluing.pdf"
	},
	{
		"key": "Nier98a",
		"type": "techreport",
		"ABSTRACT": "The peer review process for technical contributions\n\t\t\t\t  to conferences in computing sciences is very\n\t\t\t\t  thorough, and can be as stringent as the review\n\t\t\t\t  process for journal publications in other domains.\n\t\t\t\t  The programme committee for such a conference will\n\t\t\t\t  typically convene at a meeting, where submitted\n\t\t\t\t  papers are discussed, and accepted or rejected for\n\t\t\t\t  presentation at the conference. Experience shows\n\t\t\t\t  that discussions are more focussed, and the entire\n\t\t\t\t  process runs more smoothly if most of the time is\n\t\t\t\t  devoted to those papers that are actually\n\t\t\t\t  \"championed\" by some committee member. In order to\n\t\t\t\t  make this work effectively, however, the notion of\n\t\t\t\t  \"championing\" must be introduced early in the review\n\t\t\t\t  process. This paper presents a set of process\n\t\t\t\t  patterns that help to achieve this goal.",
		"AUTHOR": "Oscar Nierstrasz",
		"INSTITUTION": "Washington University",
		"KEYWORDS": "snf-none olit scg-pub skip-doi scg-none jb98",
		"NUMBER": "WUCS-98-25",
		"TITLE": "Identify the Champion",
		"TYPE": "Proceedings of PLoP 98, TR",
		"URL": "http://scg.unibe.ch/download/champion/champion.pdf",
		"URL2": "http://scg.unibe.ch/download/champion/index.html",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/download/champion/champion.pdf%20http://scg.unibe.ch/download/champion/index.html"
	},
	{
		"key": "Nier98b",
		"type": "inproceedings",
		"ABSTRACT": "Tool support is recognised as a key issue in the\n\t\t\t\t  reengineering of large scale object-oriented\n\t\t\t\t  systems. However, due to the heterogeneity in\n\t\t\t\t  today's object-oriented programming languages, it is\n\t\t\t\t  hard to reuse reengineering tools across legacy\n\t\t\t\t  systems. This paper proposes a language independent\n\t\t\t\t  exchange model, so that tools may perform their\n\t\t\t\t  tasks independent of the underlying programming\n\t\t\t\t  language. We have adopted CDIF as the basis for the\n\t\t\t\t  exchange of information, using this model, between\n\t\t\t\t  the reengineering tool prototypes in the FAMOOS\n\t\t\t\t  project. The main reasons for adopting CDIF are,\n\t\t\t\t  that firstly it is an industry standard, and\n\t\t\t\t  secondly it has a standard plain text encoding which\n\t\t\t\t  tackles the requirements of convenient querying and\n\t\t\t\t  human readability. Next to that the CDIF framework\n\t\t\t\t  supports the extensibility we need to define our\n\t\t\t\t  model and language plug-ins.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Oscar Nierstrasz and Sander Tichelaar and Serge Demeyer",
		"BOOKTITLE": "OOPSLA '98 Workshop on Model Engineering, Methods and Tools Integration with CDIF",
		"KEYWORDS": "olit famoos-papunr scg-pub skip-doi sergedem-papunr tich-papunr snf98 scg-none jb98 moose-pub",
		"MONTH": "October",
		"TITLE": "CDIF as the Interchange Format between Reengineering Tools",
		"URL": "http://scg.unibe.ch/archive/papers/Nier98bCDIFasReengFormat.pdf",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier98bCDIFasReengFormat.pdf"
	},
	{
		"key": "Nier00a",
		"type": "inproceedings",
		"ABSTRACT": "The peer review process for technical contributions\n\t\t\t\t  to conferences in computing sciences is very\n\t\t\t\t  thorough, and can be as stringent as the review\n\t\t\t\t  process for journal publications in other domains.\n\t\t\t\t  The programme committee for such a conference will\n\t\t\t\t  typically convene at a meeting, where submitted\n\t\t\t\t  papers are discussed, and accepted or rejected for\n\t\t\t\t  presentation at the conference. Experience shows\n\t\t\t\t  that discussions are more focussed, and the entire\n\t\t\t\t  process runs more smoothly if most of the time is\n\t\t\t\t  devoted to those papers that are actually\n\t\t\t\t  \"championed\" by some committee member. In order to\n\t\t\t\t  make this work effectively, however, the notion of\n\t\t\t\t  \"championing\" must be introduced early in the review\n\t\t\t\t  process. This paper presents a set of process\n\t\t\t\t  patterns that help to achieve this goal.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Oscar Nierstrasz",
		"BOOKTITLE": "Pattern Languages of Program Design",
		"EDITOR": "N. Harrison and B. Foote and H. Rohnert",
		"KEYWORDS": "olit scg-pub skip-doi scg-none jb98 snf99 jb00",
		"PAGES": "539--556",
		"PUBLISHER": "Addison Wesley",
		"TITLE": "Identify the Champion",
		"URL": "https://www.oscar.nierstrasz.org/champion/",
		"URL2": "http://scg.unibe.ch/archive/papers/Nier00aIdentifyTheChampion.pdf",
		"VOLUME": "4",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/download/champion/champion.pdf%20http://scg.unibe.ch/archive/papers/Nier00aIdentifyTheChampion.pdf%20http://scg.unibe.ch/download/champion/index.html"
	},
	{
		"key": "Nier00b",
		"type": "inproceedings",
		"ABSTRACT": "Software is not just difficult to develop, but it is\n\t\t\t\t  even more difficult to maintain in the face of\n\t\t\t\t  changing requirements. The complexity of software\n\t\t\t\t  evolution can, however, be significantly reduced if\n\t\t\t\t  we manage to separate the stable artifacts (the\n\t\t\t\t  components) from their configuration (the scripts).\n\t\t\t\t  We have proposed a simple, unifying framework of\n\t\t\t\t  forms, agents, and channels for modelling components\n\t\t\t\t  and scripts, and we have developed an experimental\n\t\t\t\t  composition language, called Piccola, based on this\n\t\t\t\t  framework, that supports the specification of\n\t\t\t\t  applications as flexible compositions of stable\n\t\t\t\t  components. In this paper we show how Piccola can be\n\t\t\t\t  used to reduce the complexity of software evolution\n\t\t\t\t  through the specification and use of an appropriate\n\t\t\t\t  compositional style, and we illustrate the approach\n\t\t\t\t  through a non-trivial example of mixin layer\n\t\t\t\t  composition.",
		"ADDRESS": "Kanazawa, Japan",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Oscar Nierstrasz and Franz Achermann",
		"BOOKTITLE": "Proceedings International Symposium on Principles of Software Evolution (ISPSE 2000)",
		"DOI": "10.1109/ISPSE.2000.913216",
		"KEYWORDS": "snf01 scg-pub piccola mixin-layers scg-none jb00 scg-coord-00",
		"MISC": "Nov 1-2",
		"MONTH": "November",
		"PAGES": "11--19",
		"PUBLISHER": "IEEE",
		"TITLE": "Supporting Compositional Styles for Software Evolution",
		"URL": "http://scg.unibe.ch/archive/papers/Nier00bSCS.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier00bSCS.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ISPSE.2000.913216"
	},
	{
		"key": "Nier00c",
		"type": "inproceedings",
		"ABSTRACT": "Moore's Law is pushing us inevitably towards a world\n\t\t\t\t  of pervasive, wireless, spontaneously networked\n\t\t\t\t  computing devices. Whatever these devices do, they\n\t\t\t\t  will have to talk to and negotiate with one another,\n\t\t\t\t  and so software agents will have to represent them.\n\t\t\t\t  Whereas conventional services on intranets will\n\t\t\t\t  continue to be distributed using established\n\t\t\t\t  middleware standards, internet services are being\n\t\t\t\t  built on top of http, wap or other protocols, and\n\t\t\t\t  exchange information in HTML, XML and just about\n\t\t\t\t  anything that can be wrapped as a MIME type or\n\t\t\t\t  streamed. This situation leads us to three software\n\t\t\t\t  problems: (i) How can we simplify the task of\n\t\t\t\t  programming these agents? (i.e., Java is not\n\t\t\t\t  enough), (ii) How can agents interact and\n\t\t\t\t  interoperate in an open, evolving network\n\t\t\t\t  environment? (i.e., XML is not enough), (iii) How\n\t\t\t\t  can we reason about the services that agents provide\n\t\t\t\t  and use? (i.e., IDL is not enough). We discuss these\n\t\t\t\t  questions in the context of our work on Piccola, a\n\t\t\t\t  small composition language, and outline ongoing and\n\t\t\t\t  further research.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Oscar Nierstrasz and Jean-Guy Schneider and Franz Achermann",
		"BOOKTITLE": "ECOOP 2000 Workshop on Component-Oriented Programming",
		"KEYWORDS": "oobib(gen) piccola scg-pub skip-doi snf00 scg-none jb00 scg-coord-00",
		"TITLE": "Agents Everywhere, All the Time",
		"URL": "http://scg.unibe.ch/archive/papers/Nier00cAgentsEverywhere.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier00cAgentsEverywhere.pdf"
	},
	{
		"key": "Nier00d",
		"type": "inproceedings",
		"ABSTRACT": "Separation of concerns is a principle we apply to\n\t\t\t\t  reduce complexity. This principle is especially\n\t\t\t\t  important when it is used to separate stable from\n\t\t\t\t  flexible parts of software systems to reduce the\n\t\t\t\t  complexity of software evolution. We encapsulate the\n\t\t\t\t  stable parts as components and the flexible parts as\n\t\t\t\t  scripts. But there is a large range of requirements\n\t\t\t\t  and consequent techniques available to achieve this\n\t\t\t\t  separation. We propose a simple, unifying framework\n\t\t\t\t  of forms, agents, and channels for modelling\n\t\t\t\t  components and scripts. We have also developed an\n\t\t\t\t  experimental composition language, called Piccola,\n\t\t\t\t  based on this framework, that supports the\n\t\t\t\t  specification of applications as flexible\n\t\t\t\t  compositions of stable components.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Oscar Nierstrasz and Franz Achermann",
		"BOOKTITLE": "ECOOP 2000 Workshop on Aspects & Dimensions of Concerns",
		"KEYWORDS": "oobib(gen) piccola scg-pub skip-doi snf00 scg-none jb00 scg-coord-00",
		"TITLE": "Separation of Concerns through Unification of Concepts",
		"URL": "http://scg.unibe.ch/archive/papers/Nier00dSeparationOfConcerns.pdf",
		"URL2": "http://trese.cs.utwente.nl/Workshops/adc2000/",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier00dSeparationOfConcerns.pdf%20http://trese.cs.utwente.nl/Workshops/adc2000/"
	},
	{
		"key": "Nier02a",
		"type": "inproceedings",
		"ABSTRACT": "Component-based software development is becoming\n\t\t\t\t  mainstream for conventional applications. However,\n\t\t\t\t  components can be difficult to deploy in embedded\n\t\t\t\t  systems because of non-functional requirements.\n\t\t\t\t  Pecos is a collaborative project between industrial\n\t\t\t\t  and research partners that seeks to enable\n\t\t\t\t  component-based technology for a class of embedded\n\t\t\t\t  systems known as field devices. In this paper we\n\t\t\t\t  introduce a component model for field devices that\n\t\t\t\t  captures a range of non-functional properties and\n\t\t\t\t  constraints. We report on the current status of\n\t\t\t\t  Pecos, including the Pecos composition language,\n\t\t\t\t  language mappings to Java and C++, and industrial\n\t\t\t\t  case studies.",
		"ADDRESS": "Berlin, Germany",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Oscar Nierstrasz and Gabriela Arévalo and Stéphane Ducasse and Roel Wuyts and Andrew Black and Peter Müller and Christian Zeidler and Thomas Genssler and Reinier van den Born",
		"BOOKTITLE": "Proceedings First International IFIP/ACM Working Conference on Component Deployment",
		"KEYWORDS": "scg-pub skip-doi scg-none jb02 pecos stefPub arevalo onhindex(82)",
		"MONTH": "June",
		"PAGES": "200--209",
		"PUBLISHER": "ACM",
		"TITLE": "A Component Model for Field Devices",
		"URL": "http://scg.unibe.ch/archive/papers/Nier02aPecosModel.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier02aPecosModel.pdf"
	},
	{
		"key": "Nier02b",
		"type": "inproceedings",
		"ABSTRACT": "Despite the existence of a seemingly continuous\n\t\t\t\t  stream of new “silver bullet” technologies and\n\t\t\t\t  methods, software productivity remains universally\n\t\t\t\t  unimpressive. We argue that, as long as industry\n\t\t\t\t  remains focused on short-term goals, and maintains a\n\t\t\t\t  technology-centric view of software development, no\n\t\t\t\t  progress will be made. A clear symptom of this\n\t\t\t\t  problem is the fact that the metaphors we apply to\n\t\t\t\t  software development are largely obsolete. Instead\n\t\t\t\t  of thinking about software as we do about bridges,\n\t\t\t\t  buildings or hardware components, we should\n\t\t\t\t  encourage a view of software as a living and\n\t\t\t\t  evolving entity that is developed and maintained by\n\t\t\t\t  people. We begin with some assertions that are\n\t\t\t\t  intended as food for thought. We continue by\n\t\t\t\t  reviewing what we consider to be some of the key\n\t\t\t\t  difficulties with software development today. We\n\t\t\t\t  conclude with a few recommendations for research\n\t\t\t\t  into software practices that take evolution into\n\t\t\t\t  account.",
		"ADDRESS": "Venice, Italy",
		"ANNOTE": "invited",
		"AUTHOR": "Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings Radical Innovations of Software and Systems Engineering in the Future",
		"KEYWORDS": "scg-pub skip-doi scg-none jb02 snf02 rissef",
		"MONTH": "October",
		"NOTE": "preprint",
		"TITLE": "Software Evolution as the Key to Productivity",
		"URL": "http://scg.unibe.ch/archive/papers/Nier02bEvolution.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier02bEvolution.pdf"
	},
	{
		"key": "Nier03a",
		"type": "techreport",
		"ABSTRACT": "Piccola is small, experimental composition\n\t\t\t\t  language — a language for building applications\n\t\t\t\t  from software components implemented in another,\n\t\t\t\t  host programming language. This document describes\n\t\t\t\t  JPiccola, the implementation of Piccola for the\n\t\t\t\t  Java host language.",
		"ADDRESS": "Universität Bern, Switzerland",
		"AUTHOR": "Oscar Nierstrasz and Franz Achermann and Stefan Kneubühl",
		"CVS": "jpiccola/PiccolaGuide",
		"INSTITUTION": "Institut für Informatik",
		"KEYWORDS": "snf03 scg-pub skip-doi scg-none jb03 piccola",
		"MONTH": "June",
		"NUMBER": "IAM-03-003",
		"TITLE": "A Guide to JPiccola",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Nier03aJPiccolaGuide.pdf",
		"URL2": "http://scg.unibe.ch/research/piccola",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/research/piccola%20http://scg.unibe.ch/archive/papers/Nier03aJPiccolaGuide.pdf"
	},
	{
		"key": "Nier03b",
		"type": "techreport",
		"ABSTRACT": "Real software systems are open and evolving. It is a\n\t\t\t\t  constant challenge in such environments to ensure\n\t\t\t\t  that software components are safely composed in the\n\t\t\t\t  face of changing dependencies and incomplete\n\t\t\t\t  knowledge. To address this problem, we propose a new\n\t\t\t\t  kind of type system which allows us to infer not\n\t\t\t\t  only the type provided by a software component in an\n\t\t\t\t  open system, but also the type it requires of its\n\t\t\t\t  environment, subject to certain constraints. The\n\t\t\t\t  contractual type we infer for components can then be\n\t\t\t\t  statically checked when components are composed. To\n\t\t\t\t  illustrate our approach, we introduce the form\n\t\t\t\t  calculus, a calculus of explicit environments, and\n\t\t\t\t  we present a type system that infers types for form\n\t\t\t\t  expressions.",
		"ADDRESS": "University of Bern, Switzerland",
		"AUTHOR": "Oscar Nierstrasz",
		"INSTITUTION": "Institute of Computer Science",
		"KEYWORDS": "snf03 scg-pub skip-doi piccola scg-none jb03",
		"NUMBER": "IAM-03-004",
		"TITLE": "Contractual Types",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Nier03bcontractualTypes.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier03bcontractualTypes.pdf"
	},
	{
		"key": "Nier03c",
		"type": "inproceedings",
		"ABSTRACT": "Many competing definitions of software components\n\t\t\t\t  have been proposed over the years, but still today\n\t\t\t\t  there is only partial agreement over such basic\n\t\t\t\t  issues as granularity (are components bigger or\n\t\t\t\t  smaller than objects, packages, or application?),\n\t\t\t\t  instantiation (do components exist at run-time or\n\t\t\t\t  only at compile-time?), and state (should we\n\t\t\t\t  distinguish between components and “instances\" of\n\t\t\t\t  components?). We adopt a minimalist view in which\n\t\t\t\t  components can be distinguished by composable\n\t\t\t\t  interfaces. We have identified a number of key\n\t\t\t\t  features and mechanisms for expressing composable\n\t\t\t\t  software, and propose a calculus for modeling\n\t\t\t\t  components, based on the asynchronous pi calculus\n\t\t\t\t  extended with explicit namespaces, or “forms\". This\n\t\t\t\t  calculus serves as a semantic foundation and an\n\t\t\t\t  executable abstract machine for Piccola, an\n\t\t\t\t  experimental composition language. The calculus also\n\t\t\t\t  enables reasoning about compositional styles and\n\t\t\t\t  evaluation strategies for Piccola. We present the\n\t\t\t\t  design rationale for the Piccola calculus, and\n\t\t\t\t  briefly outline some of the results obtained.",
		"ANNOTE": "invited",
		"AUTHOR": "Oscar Nierstrasz and Franz Achermann",
		"BOOKTITLE": "FMCO 2002 Proceedings",
		"CVS": "PiccolaFMCO",
		"DOI": "10.1007/b14033",
		"EDITOR": "F. S. De Boer, M. M. Bonsangue, S. Graf and W-P. de Roever",
		"ISBN": "978-3-540-20303-2",
		"KEYWORDS": "snf04 scg-pub piccola scg-none jb04",
		"PAGES": "339--360",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "A Calculus for Modeling Software Components",
		"URL": "http://scg.unibe.ch/archive/papers/Nier03cPiccolaCalculus.pdf",
		"VOLUME": "2852",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier03cPiccolaCalculus.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/b14033"
	},
	{
		"key": "Nier04a",
		"type": "inproceedings",
		"ABSTRACT": "Despite the existence of a seemingly continuous\n\t\t\t\t  stream of new technologies and methods, software\n\t\t\t\t  productivity remains universally unimpressive. We\n\t\t\t\t  argue that, as long as industry remains focused on\n\t\t\t\t  short-term goals, and maintains a technology-centric\n\t\t\t\t  view of software development, no progress will be\n\t\t\t\t  made. A clear symptom of this problem is the fact\n\t\t\t\t  that the metaphors we apply to software development\n\t\t\t\t  are largely obsolete. Instead of thinking about\n\t\t\t\t  software as we do about bridges, buildings or\n\t\t\t\t  hardware components, we should encourage a view of\n\t\t\t\t  software as a living and evolving entity that is\n\t\t\t\t  developed and maintained by people. We begin\n\t\t\t\t  with some assertions that are intended as food for\n\t\t\t\t  thought. We continue by reviewing what we consider\n\t\t\t\t  to be some of the key difficulties with software\n\t\t\t\t  development today. We conclude with a few\n\t\t\t\t  recommendations for research into software practices\n\t\t\t\t  that take evolution into account.",
		"ANNOTE": "invited",
		"AUTHOR": "Oscar Nierstrasz",
		"BOOKTITLE": "Radical Innovations of Software and Systems Engineering in the Future",
		"CVS": "RadicalInnovation",
		"DOI": "10.1007/b96009",
		"EDITOR": "M. Wirsing, A. Knapp and S. Balsamo",
		"ISBN": "978-3-540-21179-2",
		"KEYWORDS": "scg-pub scg-none jb04 snf04 rissef",
		"PAGES": "274--282",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Software Evolution as the Key to Productivity",
		"URL": "http://scg.unibe.ch/archive/papers/Nier04aEvolution.pdf",
		"VOLUME": "2941",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier04aEvolution.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/b96009"
	},
	{
		"key": "Nier04b",
		"type": "inproceedings",
		"ABSTRACT": "We know that successful software systems are doomed\n\t\t\t\t  to change. But our programming languages and tools\n\t\t\t\t  continue to focus on developing static, unchanging\n\t\t\t\t  models of software. We propose that change should be\n\t\t\t\t  at the center of our software process. To that end,\n\t\t\t\t  we are exploring programming language mechanisms to\n\t\t\t\t  support both fine-grained composition and\n\t\t\t\t  coarse-grained extensibility, and we are developing\n\t\t\t\t  tools and techniques to analyse and facilitate\n\t\t\t\t  change in complex systems. In this talk we review\n\t\t\t\t  problems and limitations with object-oriented and\n\t\t\t\t  component-based development approaches, and we\n\t\t\t\t  explore both technological and methodological ways\n\t\t\t\t  in which change can be better accommodated.",
		"ANNOTE": "invited",
		"AUTHOR": "Oscar Nierstrasz",
		"BOOKTITLE": "International Symposium on Component-Based Software Engineering (CBSE) 2004",
		"CVS": "SCG-CBSE7Abstract",
		"DOI": "10.1007/b97813",
		"EDITOR": "I. Crnkovic and J.A. Stafford and H.W. Schmidt and K. Wallnau",
		"ISBN": "978-3-540-21998-9",
		"KEYWORDS": "scg-pub scg-none jb04 snf04 cbse7",
		"NOTE": "Extended abstract of an invited talk",
		"PAGES": "1--4",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Putting Change at the Center of the Software Process",
		"URL": "http://scg.unibe.ch/archive/papers/Nier04bChange.pdf",
		"VOLUME": "3054",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier04bChange.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/b97813"
	},
	{
		"key": "Nier04c",
		"type": "article",
		"ABSTRACT": "Aging software systems are difficult and expensive\n\t\t\t\t  to maintain. Moose is a language-independent\n\t\t\t\t  environment that supports a wide range of tools to\n\t\t\t\t  visualise, analyse and manipulate complex software\n\t\t\t\t  systems.",
		"ANNOTE": "notrefereed",
		"AUTHOR": "Oscar Nierstrasz and Stéphane Ducasse",
		"CVS": "ERCIM_ASE",
		"JOURNAL": "European Research Consortium for Informatics and Mathematics (ERCIM) News",
		"KEYWORDS": "scg-pub skip-doi scg-none jb04 stefPub recast04 moose-pub",
		"MONTH": "July",
		"PAGES": "24--25",
		"TITLE": "Moose — a Language-Independent Reengineering Environment",
		"URL": "http://www.ercim.org/publication/Ercim_News/enw58/nierstrasz.html",
		"VOLUME": "58",
		"YEAR": "2004",
		"BDSK-URL-1": "http://www.ercim.org/publication/Ercim_News/enw58/nierstrasz.html"
	},
	{
		"key": "Nier04d",
		"type": "inproceedings",
		"ABSTRACT": "In this paper we briefly review various kinds of\n\t\t\t\t  software changes and the issues that arise from\n\t\t\t\t  them. As a consequence, we propose research into\n\t\t\t\t  programming languages with explicit support for\n\t\t\t\t  representing first-class changes, and for\n\t\t\t\t  manipulating and merging multiple viewpoints of\n\t\t\t\t  evolving software systems.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Oscar Nierstrasz and Marcus Denker",
		"BOOKTITLE": "OOPSLA Workshop on Revival of Dynamic Languages",
		"CVS": "RDLchange",
		"KEYWORDS": "snf05 scg-pub skip-doi scg-none jb05",
		"MONTH": "October",
		"TITLE": "Supporting Software Change in the Programming Language",
		"URL": "http://scg.unibe.ch/archive/papers/Nier04dRDLchange.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier04dRDLchange.pdf"
	},
	{
		"key": "Nier05a",
		"type": "incollection",
		"ABSTRACT": "As applications evolve, it becomes harder and harder\n\t\t\t\t  to separate independent concerns. Small changes to a\n\t\t\t\t  software system increasingly affect different parts\n\t\t\t\t  of the source code. AOP and related approaches offer\n\t\t\t\t  various ways to separate concerns into concrete\n\t\t\t\t  software artifacts, but what is the essence\n\t\t\t\t  of this process? We claim that first-class\n\t\t\t\t  namespaces ---which we refer to as forms---\n\t\t\t\t  offer a suitable foundation for separating concerns,\n\t\t\t\t  by offering simple, yet expressive mechanisms for\n\t\t\t\t  defining composable abstractions. We demonstrate how\n\t\t\t\t  forms help a programmer to separate concerns by\n\t\t\t\t  means of practical examples in Piccola, an\n\t\t\t\t  experimental composition language.",
		"AUTHOR": "Oscar Nierstrasz and Franz Achermann",
		"BOOKTITLE": "Aspect-Oriented Software Development",
		"CVS": "PiccolaAOSDbook",
		"EDITOR": "Robert E. Filman and Tzilla Elrad and Siobhán Clarke and Mehmet Aksit",
		"ISBN": "0-321-21976-7",
		"KEYWORDS": "snf04 scg-pub skip-doi scg-none jb05",
		"PAGES": "243--259",
		"PUBLISHER": "Addison-Wesley",
		"TITLE": "Separating Concerns with First-Class Namespaces",
		"URL": "http://scg.unibe.ch/archive/papers/Nier05aNamespaces.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier05aNamespaces.pdf"
	},
	{
		"key": "Nier05b",
		"type": "inproceedings",
		"ABSTRACT": "The programming languages of today are stuck in a\n\t\t\t\t  deep rut that has developed over the past 50 years.\n\t\t\t\t  Although we are faced with new challenges posed by\n\t\t\t\t  enormous advances in hardware and internet\n\t\t\t\t  technology, we continue to struggle with\n\t\t\t\t  old-fashioned languages based on rigid, static,\n\t\t\t\t  closed-world file-based views of programming. We\n\t\t\t\t  argue the need for a new class of dynamic languages\n\t\t\t\t  that support a view of programming as constant\n\t\t\t\t  evolution of living and open software models. Such\n\t\t\t\t  languages would require features such as dynamic\n\t\t\t\t  first-class namespaces, explicit meta-models,\n\t\t\t\t  optional, pluggable type systems, and incremental\n\t\t\t\t  compilation of running software systems.",
		"AERES": "INV",
		"ANNOTE": "invited",
		"AUTHOR": "Oscar Nierstrasz and Alexandre Bergel and Marcus Denker and Stéphane Ducasse and Markus Gaelli and Roel Wuyts",
		"BOOKTITLE": "Proceedings of Software Composition 2005",
		"CVS": "SC05Revival",
		"DOI": "10.1007/11550679_1",
		"EDITOR": "Thomas Gschwind and Uwe Aßmann",
		"INRIA": "hors",
		"ISBN": "3-540-28748-5",
		"KEYWORDS": "snf05 snf-actsc scg-pub scg-none jb06 gaelli",
		"MISC": "gaelli",
		"NOTE": "Invited paper",
		"PAGES": "1--13",
		"PUBLISHER": "LNCS 3628",
		"TITLE": "On the Revival of Dynamic Languages",
		"URL": "http://scg.unibe.ch/archive/papers/Nier05bRevival.pdf",
		"VOLUME": "3628",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier05bRevival.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/11550679_1"
	},
	{
		"key": "Nier05c",
		"type": "inproceedings",
		"ABSTRACT": "Moose is a language-independent environment for\n\t\t\t\t  reverse- and re-engineering complex software\n\t\t\t\t  systems. Moose provides a set of services including\n\t\t\t\t  a common meta-model, metrics evaluation and\n\t\t\t\t  visualization, a model repository, and generic GUI\n\t\t\t\t  support for querying, browsing and grouping. The\n\t\t\t\t  development effort invested in Moose has paid off in\n\t\t\t\t  precisely those research activities that benefit\n\t\t\t\t  from applying a combination of complementary\n\t\t\t\t  techniques. We describe how Moose has evolved over\n\t\t\t\t  the years, we draw a number of lessons learned from\n\t\t\t\t  our experience, and we outline the present and\n\t\t\t\t  future of Moose.",
		"ADDRESS": "New York, NY, USA",
		"AERES": "INV",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "invited",
		"AUTHOR": "Oscar Nierstrasz and Stéphane Ducasse and Tudor Gîrba",
		"BOOKTITLE": "Proceedings of the European Software Engineering Conference (ESEC/FSE'05)",
		"CVS": "MOOSE-ESEC05",
		"DOI": "10.1145/1095430.1081707",
		"INRIA": "hors",
		"ISBN": "1-59593-014-0",
		"KEYWORDS": "hasler07 girba stefPub recast06 scg-pub scg-none jb06 onhindex(81) mooseCincom moose-pub snf-actsc snf-bmcc norex06",
		"MONTH": "September",
		"NOTE": "Invited paper",
		"PAGES": "1--10",
		"PUBLISHER": "ACM Press",
		"TITLE": "The Story of Moose: an Agile Reengineering Environment",
		"URL": "http://scg.unibe.ch/archive/papers/Nier05cStoryOfMoose.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier05cStoryOfMoose.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1095430.1081707"
	},
	{
		"key": "Nier05d",
		"type": "inproceedings",
		"ABSTRACT": "Successful software systems must be prepared to\n\t\t\t\t  evolve or they will die. Although object-oriented\n\t\t\t\t  software systems are built to last, over time they\n\t\t\t\t  degrade as much as any legacy software system. As a\n\t\t\t\t  consequence, one must invest in reengineering\n\t\t\t\t  efforts to keep further development costs down. Even\n\t\t\t\t  though software systems and their business contexts\n\t\t\t\t  may differ in countless ways, the techniques one\n\t\t\t\t  uses to understand, analyze and transform these\n\t\t\t\t  systems tend to be very similar. As a consequence,\n\t\t\t\t  one may identify various reengineering patterns that\n\t\t\t\t  capture best practice in reverse- and re-engineering\n\t\t\t\t  object-oriented legacy systems. We present a brief\n\t\t\t\t  outline of a large collection of these patterns that\n\t\t\t\t  have been mined over several years of experience\n\t\t\t\t  with object-oriented legacy systems, and we indicate\n\t\t\t\t  how some of these patterns can be supported by\n\t\t\t\t  appropriate tools.",
		"AERES": "INV",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "invited",
		"AUTHOR": "Oscar Nierstrasz and Stéphane Ducasse and Serge Demeyer",
		"BOOKTITLE": "Proceedings of Generative Programming and Component Engineering (GPCE 2005)",
		"CVS": "GPCE05ReengPatterns",
		"DOI": "10.1007/11561347_1",
		"EDITOR": "Robert Glück, Michael Lowry",
		"INRIA": "hors",
		"ISBN": "3-540-29138-5",
		"KEYWORDS": "stefPub recast06 scg-pub scg-none jb06",
		"NOTE": "Invited paper",
		"PAGES": "1--9",
		"PUBLISHER": "LNCS 3676",
		"TITLE": "Object-oriented Reengineering Patterns — an Overview",
		"URL": "http://scg.unibe.ch/archive/papers/Nier05dReengineeringPatterns.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier05dReengineeringPatterns.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/11561347_1"
	},
	{
		"key": "Nier05e",
		"type": "techreport",
		"ABSTRACT": "Traits are fine-grained components that can be used\n\t\t\t\t  to compose classes, while avoiding many of the\n\t\t\t\t  problems of multiple inheritance and mixin-based\n\t\t\t\t  approaches. Since most implementations of traits\n\t\t\t\t  have focused on dynamically-typed languages, the\n\t\t\t\t  question naturally arises, how can one best\n\t\t\t\t  introduce traits to statically-typed languages, like\n\t\t\t\t  Java and C#? In this paper we argue that the\n\t\t\t\t  flattening property of traits should be used as a\n\t\t\t\t  guiding principle for any attempt to add traits to\n\t\t\t\t  statically-typed languages. This property\n\t\t\t\t  essentially states that, semantically, traits can be\n\t\t\t\t  compiled away. We demonstrate how this principle\n\t\t\t\t  applies to FTJ, a conservative extension to\n\t\t\t\t  Featherweight Java.",
		"ADDRESS": "Universität Bern, Switzerland",
		"AUTHOR": "Oscar Nierstrasz and Stéphane Ducasse and Nathanael Schärli",
		"CVS": "TraitFlatteningTR",
		"INSTITUTION": "Institut für Informatik",
		"KEYWORDS": "scg-pub skip-doi scg-rotor traits scg-none jb06 snf05 jot stefPub",
		"MONTH": "April",
		"NUMBER": "IAM-05-005",
		"TITLE": "Flattening Traits",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Nier05eFlatteningTraitsTR.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier05eFlatteningTraitsTR.pdf"
	},
	{
		"key": "Nier05f",
		"type": "article",
		"ABSTRACT": "Erfolgreiche Softwaresysteme müssen so konzipiert\n\t\t\t\t  sein, dass sie sich weiterentwickeln können ---\n\t\t\t\t  ansonsten gehen sie ein. Obwohl objektorientierte\n\t\t\t\t  Softwaresysteme auf eine lange Lebensdaür\n\t\t\t\t  ausgerichtet sind, veralten sie über die Jahre\n\t\t\t\t  genauso wie jedes andere Legacy-Softwaresystem. Um\n\t\t\t\t  die weiteren Entwicklungskosten niedrig zu halten,\n\t\t\t\t  müssen daher Investitionen im Bereich\n\t\t\t\t  Re-Engineering getätigt werden. Softwaresysteme\n\t\t\t\t  und der Geschäftskontext, in dem sie eingesetzt\n\t\t\t\t  werden, unterscheiden sich in vielen Punkten ---\n\t\t\t\t  dennoch ähneln sich Techniken, sie zu verstehen,\n\t\t\t\t  zu analysieren und zu transformieren. Folglich\n\t\t\t\t  lassen sich verschiedene Re-Engineering-Muster\n\t\t\t\t  identifizieren, die bewährte Vorgehensweisen beim\n\t\t\t\t  Reverse- und Re-Engineering objektorientierter\n\t\t\t\t  Legacy-Systeme beinhalten. Dieser Artikel stellt\n\t\t\t\t  einen kleinen Ausschnitt aus einer grön Sammlung\n\t\t\t\t  dieser Muster vor, die auf der mehrjährigen\n\t\t\t\t  Erfahrung mit objektorientierten Legacy-Systemen\n\t\t\t\t  basieren. Darüber hinaus werden Hinweise gegeben,\n\t\t\t\t  wie einige dieser Muster durch geeignete Werkzeuge\n\t\t\t\t  unterstützt werden können.",
		"AERES": "INV",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "invited",
		"AUTHOR": "Oscar Nierstrasz and Stéphane Ducasse and Serge Demeyer",
		"INRIA": "hors",
		"JOURNAL": "ObjektSpektrum",
		"KEYWORDS": "stefPub recast06 scg-pub skip-doi scg-none jb06",
		"NOTE": "German translation of “Object-oriented Reengineering Patterns — an Overview” (GPCE 05)",
		"NUMBER": "6",
		"PAGES": "46--51",
		"TITLE": "Objektorientierte Re-Engineering-Muster: ein Überblick",
		"URL": "http://www.sigs-datacom.de/sd/publications/pub_article_show.htm?&AID=1713&TABLE=sd_article http://www.sigs.de/publications/os/2005/06/demeyer_nierstrasz_OS_06_05.pdf http://scg.unibe.ch/archive/papers/Nier05fOORM.pdf",
		"VOLUME": "2005",
		"YEAR": "2005",
		"BDSK-URL-1": "http://www.sigs-datacom.de/sd/publications/pub_article_show.htm?&AID=1713&TABLE=sd_article%20http://www.sigs.de/publications/os/2005/06/demeyer_nierstrasz_OS_06_05.pdf%20http://scg.unibe.ch/archive/papers/Nier05fOORM.pdf"
	},
	{
		"key": "Nier05g",
		"type": "techreport",
		"ABSTRACT": "Traits offer a fine-grained mechanism for composing\n\t\t\t\t  classes in object-oriented languages from reusable\n\t\t\t\t  components, while avoiding the fragility problems\n\t\t\t\t  introduced by multiple inheritance and mixins.\n\t\t\t\t  Although traits were developed in the context of\n\t\t\t\t  dynamically typed languages, they would also offer\n\t\t\t\t  clear benefits for statically typed languages like\n\t\t\t\t  Java and C. This report summarizes the issues\n\t\t\t\t  raised when integrating traits into such languages.\n\t\t\t\t  We examine traits in the context of the statically\n\t\t\t\t  typed languages FeatherweightJava, C and C++.",
		"ADDRESS": "Universität Bern, Switzerland",
		"AUTHOR": "Oscar Nierstrasz and Stéphane Ducasse and Stefan Reichhart and Nathanael Schärli",
		"CVS": "TraitsCSharp",
		"INSTITUTION": "Institut für Informatik",
		"KEYWORDS": "scg-pub skip-doi scg-rotor traits scg-none jb06 snf05 stefPub",
		"MONTH": "December",
		"NUMBER": "IAM-05-006",
		"TITLE": "Adding Traits to (Statically Typed) Languages",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Nier05gTraitsCSharp.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier05gTraitsCSharp.pdf"
	},
	{
		"key": "Nier06a",
		"type": "article",
		"ABSTRACT": "Traits are fine-grained components that can be used\n\t\t\t\t  to compose classes, while avoiding many of the\n\t\t\t\t  problems of multiple inheritance and mixin-based\n\t\t\t\t  approaches. Since most implementations of traits\n\t\t\t\t  have focused on dynamically-typed languages, the\n\t\t\t\t  question naturally arises, how can one best\n\t\t\t\t  introduce traits to statically-typed languages, like\n\t\t\t\t  Java and C#? In this paper we argue that the\n\t\t\t\t  flattening property of traits should be used as a\n\t\t\t\t  guiding principle for any attempt to add traits to\n\t\t\t\t  statically-typed languages. This property\n\t\t\t\t  essentially states that, semantically, traits can be\n\t\t\t\t  compiled away. We demonstrate how this principle\n\t\t\t\t  applies to FTJ, a conservative extension to\n\t\t\t\t  Featherweight Java.",
		"AERES": "ACL",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Oscar Nierstrasz and Stéphane Ducasse and Nathanael Schärli",
		"CACHED": "http://scg.unibe.ch/archive/papers/Nier06aFlatteningTraits.pdf",
		"CVS": "TraitFlatteningJOT",
		"DOI": "10.5381/jot.2006.5.4.a4",
		"INRIA": "hors",
		"JOURNAL": "Journal of Object Technology",
		"KEYWORDS": "scg-pub skip-doi scg-rotor traits scg-none jb06 fb06 snf05 snf06 jot stefPub",
		"MEDIUM": "2",
		"MISC": "May-June",
		"MONTH": "May",
		"NUMBER": "4",
		"PAGES": "129--148",
		"PEERREVIEW": "yes",
		"SELECTIF": "non",
		"TITLE": "Flattening Traits",
		"URL": "http://www.jot.fm/contents/issue_2006_05/article4.html http://www.jot.fm/issues/issue_2006_05/article4.pdf",
		"VOLUME": "5",
		"YEAR": "2006",
		"BDSK-URL-1": "http://www.jot.fm/issues/issue_2006_05/article4%20http://www.jot.fm/issues/issue_2006_05/article4.pdf"
	},
	{
		"key": "Nier06b",
		"type": "inproceedings",
		"ABSTRACT": "Software systems need to continuously change to\n\t\t\t\t  remain useful. Change appears in several forms and\n\t\t\t\t  needs to be accommodated at different levels. We\n\t\t\t\t  propose ChangeBoxes as a mechanism to encapsulate,\n\t\t\t\t  manage, analyze and exploit changes to software\n\t\t\t\t  systems. Our thesis is that only by making change\n\t\t\t\t  explicit and manipulable can we enable the software\n\t\t\t\t  developer to manage software change more effectively\n\t\t\t\t  than is currently possible. Furthermore we argue\n\t\t\t\t  that we need new insights into assessing the impact\n\t\t\t\t  of changes and we need to provide new tools and\n\t\t\t\t  techniques to manage them. We report on the results\n\t\t\t\t  of some initial prototyping efforts, and we outline\n\t\t\t\t  a series of research activities that we have started\n\t\t\t\t  to explore the potential of ChangeBoxes.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Oscar Nierstrasz and Marcus Denker and Tudor Gîrba and Adrian Lienhard",
		"BOOKTITLE": "Proceedings of the Workshop on Revival of Dynamic Languages (co-located with ECOOP'06)",
		"CVS": "RDL06ACTSC",
		"KEYWORDS": "girba snf06 scg-pub skip-doi scg-none jb06 fb06",
		"MEDIUM": "2",
		"MONTH": "July",
		"PEERREVIEW": "yes",
		"TITLE": "Analyzing, Capturing and Taming Software Change",
		"URL": "http://scg.unibe.ch/archive/papers/Nier06bRDL06ACTSC.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier06bRDL06ACTSC.pdf"
	},
	{
		"key": "Nier06c",
		"type": "book",
		"ADDRESS": "Genoa, Italy",
		"DOI": "10.1007/11880240",
		"EDITOR": "Oscar Nierstrasz and Jon Whittle and David Harel and Gianna Reggio",
		"ISBN": "0302-9743",
		"KEYWORDS": "olit models skip-abstract scg-pub snf-none scg-none jb07 fb06",
		"MONTH": "October",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Proceedings MoDELS 2006",
		"URL": "http://www.springeronline.com/3-540-45772-0 http://www.springerlink.com/openurl.asp?genre=issue&issn=0302-9743&volume=4199&issue=preprint",
		"VOLUME": "4199",
		"YEAR": "2006",
		"BDSK-URL-1": "http://www.springeronline.com/3-540-45772-0%20http://www.springerlink.com/openurl.asp?genre=issue&issn=0302-9743&volume=4199&issue=preprint",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/11880240"
	},
	{
		"key": "Nier07a",
		"type": "inproceedings",
		"ABSTRACT": "As software systems evolve, they become more complex\n\t\t\t\t  and harder to understand and maintain. Certain\n\t\t\t\t  reverse engineering techniques attempt to\n\t\t\t\t  reconstruct software models from source code with\n\t\t\t\t  the help of a parser for the source language.\n\t\t\t\t  Unfortunately a great deal of effort may be required\n\t\t\t\t  to build a specialized parser for a legacy\n\t\t\t\t  programming language or dialect. On the other hand,\n\t\t\t\t  (i) we typically do not need a complete parser that\n\t\t\t\t  recognizes all language constructs, and (ii) we have\n\t\t\t\t  a rich supply of (legacy) examples. We present an\n\t\t\t\t  approach to use these facts to rapidly and\n\t\t\t\t  incrementally develop parsers as follows: we specify\n\t\t\t\t  mappings from source code examples to model\n\t\t\t\t  elements; we use the mappings to generate a parser;\n\t\t\t\t  we parse as much code as we can; we use the\n\t\t\t\t  exceptional cases to develop new example mappings;\n\t\t\t\t  and we iterate. Experiments with Java and Ruby, two\n\t\t\t\t  very different languages, suggest that our approach\n\t\t\t\t  can be a very efficient and effective way to rapidly\n\t\t\t\t  construct software models from legacy code.",
		"ACCEPTNUM": "33",
		"ACCEPTTOTAL": "62",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Oscar Nierstrasz and Markus Kobel and Tudor Gîrba and Michele Lanza and Horst Bunke",
		"BOOKTITLE": "Proceedings of Conference on Software Maintenance and Reengineering (CSMR 2007)",
		"DOI": "10.1109/CSMR.2007.23",
		"KEYWORDS": "scg07 hasler07 scg-pub jb07 snf07 norex07 girba moose-pub parsebyexample",
		"MEDIUM": "2",
		"MISC": "acceptance rate: 33/62 = 52",
		"PAGES": "275--286",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Example-Driven Reconstruction of Software Models",
		"URL": "http://scg.unibe.ch/archive/papers/Nier07aExampleDrivenMR.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier07aExampleDrivenMR.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/CSMR.2007.23"
	},
	{
		"key": "Nier08a",
		"type": "techreport",
		"ABSTRACT": "Few real software systems are built completely from\n\t\t\t\t  scratch nowadays. Instead, systems are built\n\t\t\t\t  iteratively and incrementally, while integrating and\n\t\t\t\t  interacting with components from many other systems.\n\t\t\t\t  These systems also last longer than their developers\n\t\t\t\t  might imagine — they are, in effect, eternal.\n\t\t\t\t  Nevertheless the platforms, tools and environments\n\t\t\t\t  we use to develop software are still largely based\n\t\t\t\t  on an outmoded model that presupposes that software\n\t\t\t\t  systems are closed and will not significantly evolve\n\t\t\t\t  after deployment. We claim that in order to enable\n\t\t\t\t  effective and graceful evolution of eternal systems,\n\t\t\t\t  we must make them self-aware. A self-aware eternal\n\t\t\t\t  system supports evolution by: (i) providing\n\t\t\t\t  explicit, first-class models of software artifacts,\n\t\t\t\t  change and history at the level of the platform,\n\t\t\t\t  (ii) continuously analysing static and dynamic\n\t\t\t\t  evolution to track emergent properties, and (iii)\n\t\t\t\t  closing the gap between the domain model and the\n\t\t\t\t  developers' view of the evolving system. We outline\n\t\t\t\t  our vision of self-aware eternal systems and\n\t\t\t\t  identify the research challenges to realizing this\n\t\t\t\t  vision.",
		"ANNOTE": "report notrefereed",
		"AUTHOR": "Oscar Nierstrasz and Marcus Denker and Tudor Gîrba and Adrian Kuhn and Adrian Lienhard and David Röthlisberger",
		"INSTITUTION": "University of Bern, Institute of Applied Mathematics and Computer Sciences",
		"KEYWORDS": "scg-pub scg-none jb08 snf08 skip-doi girba roethlisberger akuhn",
		"NUMBER": "IAM-08-001",
		"TITLE": "Self-aware, Evolving Eternal Systems",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Nier08aSelfAwareEternal.pdf",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier08aSelfAwareEternal.pdf"
	},
	{
		"key": "Nier08b",
		"type": "incollection",
		"ABSTRACT": "Few real software systems are built completely from\n\t\t\t\t  scratch nowadays. Instead, systems are built\n\t\t\t\t  iteratively and incrementally, while integrating and\n\t\t\t\t  interacting with components from many other systems.\n\t\t\t\t  Adaptation, reconfiguration and evolution are\n\t\t\t\t  normal, ongoing processes throughout the lifecycle\n\t\t\t\t  of a software system. Nevertheless the platforms,\n\t\t\t\t  tools and environments we use to develop software\n\t\t\t\t  are still largely based on an outmoded model that\n\t\t\t\t  presupposes that software systems are closed and\n\t\t\t\t  will not significantly evolve after deployment. We\n\t\t\t\t  claim that in order to enable effective and graceful\n\t\t\t\t  evolution of modern software systems, we must make\n\t\t\t\t  these systems more amenable to change by (i)\n\t\t\t\t  providing explicit, first-class models of software\n\t\t\t\t  artifacts, change, and history at the level of the\n\t\t\t\t  platform, (ii) continuously analysing static and\n\t\t\t\t  dynamic evolution to track emergent properties, and\n\t\t\t\t  (iii) closing the gap between the domain model and\n\t\t\t\t  the developers' view of the evolving system. We\n\t\t\t\t  outline our vision of dynamic, evolving software\n\t\t\t\t  systems and identify the research challenges to\n\t\t\t\t  realizing this vision.",
		"AUTHOR": "Oscar Nierstrasz and Marcus Denker and Tudor Gîrba and Adrian Lienhard and David Röthlisberger",
		"BOOKTITLE": "Challenges for Software-Intensive Systems and New Computing Paradigms",
		"DOI": "10.1007/978-3-540-89437-7_3",
		"EDITOR": "Martin Wirsing and Jean-Pierre Banâtre and Matthias Hölzl",
		"ISBN": "978-3-540-89436-0",
		"KEYWORDS": "scg08 scg-pub snf09 jb09 hasler09 girba cop-lit roethlisberger",
		"MEDIUM": "2",
		"PAGES": "64-79",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Change-Enabled Software Systems",
		"URL": "http://scg.unibe.ch/archive/papers/Nier08bChangeEnabledSoftware.pdf",
		"VOLUME": "5380",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier08bChangeEnabledSoftware.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-540-89437-7_3"
	},
	{
		"key": "Nier09a",
		"type": "incollection",
		"ABSTRACT": "Software must be constantly adapted to changing\n\t\t\t\t  requirements. The time scale, abstraction level and\n\t\t\t\t  granularity of adaptations may vary from short-term,\n\t\t\t\t  fine-grained adaptation to long-term, coarse-grained\n\t\t\t\t  evolution. Fine-grained, dynamic and\n\t\t\t\t  context-dependent adaptations can be particularly\n\t\t\t\t  difficult to realize in long-lived, large-scale\n\t\t\t\t  software systems. We argue that, in order to\n\t\t\t\t  effectively and efficiently deploy such changes,\n\t\t\t\t  adaptive applications must be built on an\n\t\t\t\t  infrastructure that is not just model-driven, but is\n\t\t\t\t  both model-centric and context-aware. Specifically,\n\t\t\t\t  this means that high-level, causally-connected\n\t\t\t\t  models of the application and the software\n\t\t\t\t  infrastructure itself should be available at\n\t\t\t\t  run-time, and that changes may need to be scoped to\n\t\t\t\t  the run-time execution context. We first review the\n\t\t\t\t  dimensions of software adaptation and evolution, and\n\t\t\t\t  then we show how model-centric design can address\n\t\t\t\t  the adaptation needs of a variety of applications\n\t\t\t\t  that span these dimensions. We demonstrate through\n\t\t\t\t  concrete examples how model-centric and\n\t\t\t\t  context-aware designs work at the level of\n\t\t\t\t  application interface, programming language and\n\t\t\t\t  runtime. We then propose a research agenda for a\n\t\t\t\t  model-centric development environment that supports\n\t\t\t\t  dynamic software adaptation and evolution.",
		"AUTHOR": "Oscar Nierstrasz and Marcus Denker and Lukas Renggli",
		"BOOKTITLE": "Software Engineering for Self-Adaptive Systems",
		"DOI": "10.1007/978-3-642-02161-9_7",
		"EDITOR": "Betty H.C. Cheng and Rogerio de Lemos and Holger Giese and Paola Inverardi and Jeff Magee",
		"KEYWORDS": "scg09 scg-pub diesel helvetia reflectivity snf09 jb09",
		"MEDIUM": "2",
		"PAGES": "128-145",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Model-Centric, Context-Aware Software Adaptation",
		"URL": "http://scg.unibe.ch/archive/papers/Nier09aModelCentric.pdf",
		"VOLUME": "5525",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier09aModelCentric.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-642-02161-9_7"
	},
	{
		"key": "Nier09b",
		"type": "proceedings",
		"ADDRESS": "New York, NY, USA",
		"EDITOR": "Oscar Nierstrasz",
		"ISBN": "978-1-60558-707-3",
		"KEYWORDS": "scg09 scg-pub snf09 jb10 skip-doi skip-abstract",
		"LOCATION": "Amsterdam, The Netherlands",
		"MEDIUM": "1",
		"ORDER_NO": "594094",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM",
		"TITLE": "CASTA '09: Proceedings of the first international workshop on Context-Aware Software Technology and Applications",
		"URL": "http://portal.acm.org/toc.cfm?id=1595768 http://casta.unibe.ch",
		"YEAR": "2009",
		"BDSK-URL-1": "http://portal.acm.org/toc.cfm?id=1595768%20http://casta.unibe.ch"
	},
	{
		"key": "Nier10a",
		"type": "inproceedings",
		"ANNOTE": "invited",
		"ABSTRACT": "The biggest challenge facing software developers\n\t\t\t\t  today is how to gracefully evolve complex software\n\t\t\t\t  systems in the face of changing requirements. We\n\t\t\t\t  clearly need software systems to be more dynamic,\n\t\t\t\t  compositional and model-centric, but instead we\n\t\t\t\t  continue to build systems that are static, baroque\n\t\t\t\t  and inflexible. How can we better build\n\t\t\t\t  change-enabled systems in the future? To answer this\n\t\t\t\t  question, we propose to look back to one of the most\n\t\t\t\t  successful systems to support change, namely\n\t\t\t\t  Smalltalk. We briefly introduce Smalltalk with a few\n\t\t\t\t  simple examples, and draw some lessons for software\n\t\t\t\t  evolution. Smalltalk's simplicity, its reflective\n\t\t\t\t  design, and its highly dynamic nature all go a long\n\t\t\t\t  way towards enabling change in Smalltalk\n\t\t\t\t  applications. We then illustrate how these lessons\n\t\t\t\t  work in practice by reviewing a number of research\n\t\t\t\t  projects that support software evolution by\n\t\t\t\t  exploiting Smalltalk's design. We conclude by\n\t\t\t\t  summarizing open issues and challenges for\n\t\t\t\t  change-enabled systems of the future.",
		"AUTHOR": "Oscar Nierstrasz and Tudor Gîrba",
		"BOOKTITLE": "SOFSEM 2010",
		"DOI": "10.1007/978-3-642-11266-9_7",
		"EDITOR": "J. van Leeuwen et al.",
		"KEYWORDS": "scg-pub scg10 snf10 jb10 girba",
		"MEDIUM": "2",
		"PAGES": "77--95",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Lessons in Software Evolution Learned by Listening to Smalltalk",
		"URL": "http://scg.unibe.ch/archive/papers/Nier10aSmalltalkLessons.pdf",
		"VOLUME": "5901",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier10aSmalltalkLessons.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-642-11266-9_7"
	},
	{
		"key": "Nier10b",
		"type": "article",
		"AUTHOR": "Oscar Nierstrasz",
		"DOI": "10.5381/jot.2010.9.5.e1",
		"ISSN": "1660-1769",
		"JOURNAL": "Journal of Object Technology",
		"KEYWORDS": "scg-pub snf-none scg10 jb11 skip-abstract lowRoad",
		"MEDIUM": "1",
		"MONTH": "September",
		"NOTE": "(editorial — transcript of ECOOP 2010 banquet speech)",
		"NUMBER": "5",
		"PEERREVIEW": "no",
		"TITLE": "Ten Things I Hate About Object-Oriented Programming",
		"URL": "http://www.jot.fm/contents/issue_2010_09/editorial.html",
		"VOLUME": "9",
		"YEAR": "2010",
		"BDSK-URL-1": "http://www.jot.fm/contents/issue_2010_09/editorial.html",
		"BDSK-URL-2": "http://dx.doi.org/10.5381/jot.2010.9.5.e1"
	},
	{
		"key": "Nier12a",
		"type": "article",
		"ABSTRACT": "During software maintenance, much time is spent reading and assessing existing code.\nUnfortunately most of the tools available for exploring and assessing code, such as browsers, debuggers and\nprofilers, focus on development tasks, and offer little to support program understanding. We present a\nplatform for software and data analysis, called Moose, which enables the rapid development of custom tools\nfor software assessment. We demonstrate how Moose supports agile software assessment through a series of\ndemos, we illustrate some of the custom tools that have been developed, and we draw various lessons learned\nfor future work in this domain.",
		"ACMID": "2180925",
		"ACMPAGE": "http://dl.acm.org/citation.cfm?id=2180925",
		"ADDRESS": "New York, NY, USA",
		"AUTHOR": "Oscar Nierstrasz",
		"DOI": "10.1145/180921.2180925",
		"ISSN": "0163-5948",
		"ISSUE_DATE": "May 2012",
		"JOURNAL": "SIGSOFT Softw. Eng. Notes",
		"KEYWORDS": "scg-pub snf12 scg12 jb12 moose-pub",
		"MEDIUM": "2",
		"MONTH": "May",
		"NUMBER": "3",
		"NUMPAGES": "5",
		"PAGES": "1--5",
		"ANNOTE": "invited",
		"PEERREVIEW": "no",
		"PUBLISHER": "ACM",
		"TITLE": "Agile software assessment with Moose",
		"URL": "http://scg.unibe.ch/archive/papers/Nier12aASA.pdf",
		"VOLUME": "37",
		"YEAR": "2012",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier12aASA.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/180921.2180925"
	},
	{
		"key": "Nier12b",
		"type": "inproceedings",
		"ABSTRACT": "Informed decision making is a critical activity in software development, but it is poorly\n  supported by common development environments, which focus mainly on low-level programming tasks. We posit\n  the need for agile software assessment, which aims to support decision making by enabling rapid and\n  effective construction of software models and custom analyses. Agile software assessment entails\n  gathering and exploiting the broader context of software information related to the system at hand as\n  well as the ecosystem of related projects, and beyond to include “big software data”. Finally, informed\n  decision making entails continuous assessment by monitoring the evolving system and its architecture. We\n  identify several key research challenges in supporting agile software assessment by focusing on\n  customization, context and continuous assessment.",
		"AUTHOR": "Oscar Nierstrasz and Mircea Lungu",
		"BOOKTITLE": "Proceedings of International Conference on Program Comprehension (ICPC 2012)",
		"DOI": "10.1109/ICPC.2012.6240507",
		"ISSN": "1063-6897",
		"KEYWORDS": "scg-pub snf12 snf-asa1 scg12 jb12 moose-pub",
		"MEDIUM": "2",
		"PAGES": "3--10",
		"PEERREVIEW": "no",
		"TITLE": "Agile software assessment",
		"ANNOTE": "invited",
		"URL": "http://scg.unibe.ch/archive/papers/Nier12bASA.pdf",
		"YEAR": "2012",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier12bASA.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICPC.2012.6240507"
	},
	{
		"key": "Nier13a",
		"type": "incollection",
		"AUTHOR": "Oscar Nierstrasz and Alexandre Bergel and Damien Cassou and Stéphane Ducasse and Jannik Laval",
		"BOOKTITLE": "Deep Into Pharo",
		"ISBN": "978-3-9523341-6-4",
		"KEYWORDS": "jb14 snf-none scg-pub scg13 skip-doi skip-abstract",
		"MEDIUM": "2",
		"MONTH": "September",
		"PAGES": "21",
		"PEERREVIEW": "no",
		"PUBLISHER": "Square Bracket Associates",
		"TITLE": "Regular Expressions in Pharo",
		"URL": "http://scg.unibe.ch/archive/papers/Nier13aRegEx.pdf",
		"YEAR": "2013",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier13aRegEx.pdf"
	},
	{
		"key": "Nier13b",
		"type": "incollection",
		"AUTHOR": "Oscar Nierstrasz and Alexandre Bergel and Damien Cassou and Stéphane Ducasse and Jannik Laval",
		"BOOKTITLE": "Deep Into Pharo",
		"ISBN": "978-3-9523341-6-4",
		"KEYWORDS": "jb14 snf-none scg-pub scg13 skip-doi skip-abstract",
		"MEDIUM": "2",
		"MONTH": "September",
		"PAGES": "27",
		"PEERREVIEW": "no",
		"PUBLISHER": "Square Bracket Associates",
		"TITLE": "Versioning Your Code with Monticello",
		"URL": "http://scg.unibe.ch/archive/papers/Nier13bMonticello.pdf",
		"YEAR": "2013",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier13bMonticello.pdf"
	},
	{
		"key": "Nier13c",
		"type": "article",
		"ABSTRACT": "Abstract In order to analyze software systems, it is necessary to\n\t\tmodel them. Static software models are commonly imported by parsing source\n        code and related data. Unfortunately, building custom parsers for most\n        programming languages is a non-trivial endeavour. This poses a major\n        bottleneck for analyzing software systems programmed in languages for\n        which importers do not already exist. Luckily, initial software models do\n        not require detailed parsers, so it is possible to start analysis with a\n        coarse-grained importer, which is then gradually refined. In this paper we\n        propose an approach to \"agile modeling\" that exploits island grammars to\n        extract initial coarse-grained models, parser combinators to enable\n        gradual refinement of model importers, and various heuristics to recognize\n        language structure, keywords and other language artifacts.",
		"AUTHOR": "Oscar Nierstrasz and Jan Kurš",
		"DOI": "10.1016/j.scico.2013.11.011",
		"ISSN": "0167-6423",
		"JOURNAL": "Science of Computer Programming",
		"KEYWORDS": "jb14 snf-asa1 scg-pub scg13 kursjan",
		"ANNOTE": "internationaljournal",
		"MEDIUM": "2",
		"NUMBER": "0",
		"PAGES": "150--156",
		"PEERREVIEW": "yes",
		"TITLE": "Parsing for agile modeling",
		"URL": "http://scg.unibe.ch/archive/papers/Nier13cAgileModeling.pdf",
		"VOLUME": "97, Part 1",
		"YEAR": "2015",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Nier13cAgileModeling.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.scico.2013.11.011"
	},
	{
		"key": "Nier16a",
		"type": "inproceedings",
		"ANNOTE": "invited, internationalconference",
		"ABSTRACT": "Modern software systems are increasingly long-lived. In order to gracefully\n\t\t\tevolve these systems as they address new requirements, developers need\n\t\t\tto navigate effectively between domain concepts and the code that\n\t\t\taddresses those domains. One of the original promises of\n\t\t\tobject-orientation was that the same object-oriented models would be\n\t\t\tused throughout requirements analysis, design and implementation.\n\t\t\tSoftware systems today however are commonly constructed from a\n\t\t\theterogeneous “language soup” of mainstream code and dedicated DSLs\n\t\t\taddressing a variety of application and technical domains. Has\n\t\t\tobject-oriented programming outlived its purpose? In this essay we\n\t\t\targue that we need to rethink the original goals of object-orientation\n\t\t\tand their relevance for modern software development. We propose as a\n\t\t\tdriving maxim, “Programming is Modeling,” and explore what this\n\t\t\timplies for programming languages, tools and environments. In\n\t\t\tparticular, we argue that: (1) source code should serve not only to\n\t\t\tspecify an implementation of a software system, but should encode a\n\t\t\tqueryable and manipulable model of the application and technical\n\t\t\tdomains concerned; (2) IDEs should exploit these domain models to\n\t\t\tenable inexpensive browsing, querying and analysis by developers; and\n\t\t\t(3) barriers between the code base, the running application, and the\n\t\t\tsoftware ecosystem at large need to be broken down, and their\n\t\t\tconnections exploited and monitored to support developers in\n\t\t\tcomprehension and evolution tasks.",
		"AUTHOR": "Oscar Nierstrasz",
		"BOOKTITLE": "FASE 2016",
		"EDITOR": "Perdita Stevens and Andrzej Wasowski",
		"KEYWORDS": "scg-pub snf-none scg16 jb16",
		"DOI": "10.1007/978-3-662-49665-7_1",
		"PAGES": "3--10",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "The Death of Object-Oriented Programming",
		"URL": "http://scg.unibe.ch/archive/papers/Nier16a-death-of-oop.pdf",
		"VOLUME": "9633",
		"YEAR": "2016"
	},
	{
		"key": "Osma14a",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"ABSTRACT": "Detecting bugs as early as possible plays an important role in ensuring software quality before shipping. We argue that mining previous bug fixes can produce good knowledge about why bugs happen and how they are fixed. In this paper, we mine the change history of 717 open source projects to extract bug-fix patterns. We also manually inspect many of the bugs we found to get insights into the contexts and reasons behind those bugs. For instance, we found out that missing null checks and missing initializations are very recurrent and we believe that they can be automatically detected and fixed.",
		"AUTHOR": "Osman, Haidar and Lungu, Mircea and Nierstrasz, Oscar",
		"BOOKTITLE": "Software Maintenance, Reengineering and Reverse Engineering (CSMR-WCRE), 2014 Software Evolution Week - IEEE Conference on",
		"DOI": "10.1109/CSMR-WCRE.2014.6747191",
		"KEYWORDS": "scg14 jb14 scg-pub snf-asa1; Cloning;Computer bugs;Data mining;History;Java;Software;Software engineering scg-bigdata",
		"MONTH": "February",
		"PAGES": "343-347",
		"TITLE": "Mining frequent bug-fix code changes",
		"URL": "http://scg.unibe.ch/archive/papers/Osma14aMiningBugFixChanges.pdf",
		"YEAR": "2014",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Osma14aMiningBugFixChanges.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/CSMR-WCRE.2014.6747191"
	},
	{
		"key": "Osma15a",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Haidar Osman",
		"ABSTRACT": "Null dereferencing is one of the most frequent bugs in Java systems\ncausing programs to crash due to the uncaught NullPointerException.\nDevelopers often fix this bug by introducing a guard (i.e., null check)\non the potentially-null objects before using them.\nIn this paper we investigate the null checks in 717 open-source Java\nsystems to understand when and why developers introduce null checks.\nWe find that 35% of the if-statements are null checks. A deeper investigation\nshows that 71% of the checked-for-null objects are returned\nfrom method calls. This indicates that null checks have a serious impact\non performance and that developers introduce null checks when\nthey use methods that return null.",
		"TITLE": "Null Check Analysis",
		"BOOKTITLE": "Extended Abstracts of the Eighth Seminar on Advanced Techniques and Tools for Software Evolution (SATToSE 2015)",
		"YEAR": "2015",
		"MONTH": "July",
		"LOCATION": "Mons, Belgium",
		"PAGES": "86--88",
		"NUMPAGES": "3",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa1 scg15 jb15 skip-doi",
		"URL": "http://scg.unibe.ch/archive/papers/Osma15a.pdf"
	},
	{
		"key": "Osma16a",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Haidar Osman and Manuel Leuenberger and Mircea Lungu and Oscar Nierstrasz",
		"TITLE": "Tracking Null Checks in Open-Source Java Systems",
		"ABSTRACT": "It is widely acknowledged that null values should be avoided if possible or carefully used when necessary in Java code. The careless use of null has negative effects on maintainability, code readability, and software performance. However, a study on understanding null usage is still missing.\n\t\tIn this paper we analyze null checks in 810 open-source Java systems and manually inspect 100 code samples to understand when and why developers use null. We find that 35% of all conditional statements contain null checks. A deeper investigation reveals many questionable practices with respect to using null. Uninitialized member variables, returning null in methods, and passing null as a method parameter are among the most recurrent reasons for introducing null checks. Developers often return null in methods to signal errors instead of throwing a proper exception. As a result, 71% of the values checked for null are returned from method calls.\n\t\tOur study provides a novel evidence of an overuse of null checks and of the null value itself in Java, and at the same time, reveals actionable recommendations to reduce this null usage.",
		"KEYWORDS": "scg-pub snf-asa2 jb16 scg16",
		"BOOKTITLE": "Proceedings of the 23rd IEEE International Conference on Software Analysis, Evolution, and Reengineering (SANER)",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"YEAR": "2016",
		"DOI": "10.1109/SANER.2016.57",
		"MONTH": "March",
		"URL": "http://scg.unibe.ch/archive/papers/Osma16a.pdf"
	},
	{
		"key": "Osma16b",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Haidar Osman",
		"ABSTRACT": "Bug prediction is a technique used to estimate the most bug-prone entities in software systems. Bug prediction approaches vary in many design options, such as dependent variables, independent variables, and machine learning models. Choosing the right combination of design options to build an effective bug predictor is hard. Previous studies do not consider this complexity and draw conclusions based on fewer-than-necessary experiments.\nWe argue that each software project is unique from the perspective of its development process. Consequently, metrics and AI models perform differently on different projects, in the context of bug prediction.\nWe confirm our hypothesis empirically by running different bug predictors on different systems. We show that no single bug prediction configuration works globally on all projects and, thus, previous bug prediction findings cannot generalize.",
		"TITLE": "Against the Mainstream in Bug Prediction",
		"BOOKTITLE": "Extended Abstracts of the Ninth Seminar on Advanced Techniques and Tools for Software Evolution (SATToSE 2016)",
		"YEAR": "2016",
		"MONTH": "July",
		"LOCATION": "Bergen, Norway",
		"NUMPAGES": "4",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa2 scg16 jb16 skip-doi",
		"URL": "http://scg.unibe.ch/archive/papers/Osma16b.pdf",
		"NOTE": "http://sattose.wdfiles.com/local--files/2016:alltalks/SATTOSE2016paper2.pdf"
	},
	{
		"key": "Osma16c",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Haidar Osman",
		"ABSTRACT": "Bug prediction is a technique used to estimate the most\nbug-prone entities in software systems. Bug prediction\napproaches vary in many design options, such as dependent\nvariables, independent variables, and machine\nlearning models. Choosing the right combination of design\noptions to build an effective bug predictor is hard.\nPrevious studies do not consider this complexity and\ndraw conclusions based on fewer-than-necessary experiments.\nWe argue that each software project is unique from the\nperspective of its development process. Consequently,\nmetrics and machine learning models perform differently\non different projects, in the context of bug prediction.\nWe confirm our hypothesis empirically by running different\nbug predictors on different systems. We show there\nare no universal bug prediction configurations that work\non all projects.",
		"TITLE": "On the Non-Generalizability in Bug Prediction",
		"BOOKTITLE": "Post Proceedings of the Ninth Seminar on Advanced Techniques and Tools for Software Evolution (SATToSE 2016)",
		"YEAR": "2016",
		"LOCATION": "Bergen, Norway",
		"PEERREVIEW": "yes",
		"NUMPAGES": "7",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa2 scg16 jb17 skip-doi",
		"URL": "http://ceur-ws.org/Vol-1791/paper-03.pdf"
	},
	{
		"key": "Osma17a",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Haidar Osman and Mohammad Ghafari and Oscar Nierstrasz",
		"BOOKTITLE": "1st International Workshop on Machine Learning Techniques for Software Quality Evaluation (MaLTeSQuE 2017)",
		"TITLE": "Hyperparameter Optimization to Improve Bug Prediction Accuracy",
		"MONTH": "February",
		"YEAR": "2017",
		"LOCATION": "Klagenfurt, Austria",
		"PEERREVIEW": "yes",
		"NUMPAGES": "6",
		"MEDIUM": "2",
		"PAGES": "33--38",
		"URL": "http://scg.unibe.ch/archive/papers/Osma17a.pdf",
		"DOI": "10.1109/MALTESQUE.2017.7882014",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb17",
		"ABSTRACT": "Bug prediction is a technique that strives to identify\nwhere defects will appear in a software system. Bug prediction\nemploys machine learning to predict defects in software entities\nbased on software metrics. These machine learning models\nusually have adjustable parameters, called hyperparameters, that\nneed to be tuned for the prediction problem at hand. However,\nmost studies in the literature keep the model hyperparameters\nset to the default values provided by the used machine learning\nframeworks.\nIn this paper we investigate whether optimizing the hyperparameters\nof a machine learning model improves its prediction\npower. We study two machine learning algorithms: k-nearest\nneighbours (IBK) and support vector machines (SVM). We\ncarry out experiments on five open source Java systems. Our\nresults show that (i) models differ in their sensitivity to their\nhyperparameters, (ii) tuning hyperparameters gives at least as\naccurate models for SVM and significantly more accurate models\nfor IBK, and (iii) most of the default values are changed during\nthe tuning phase. Based on these findings we recommend tuning\nhyperparameters as a necessary step before using a machine\nlearning model in bug prediction."
	},
	{
		"key": "Osma17b",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Osman, Haidar and Chiş, Andrei and Schaerer, Jakob and Ghafari, Mohammad and Nierstrasz, Oscar",
		"BOOKTITLE": "Proceedings of the 24rd IEEE International Conference on Software Analysis, Evolution, and Reengineering (SANER)",
		"MONTH": "February",
		"PAGES": "422--426",
		"MEDIUM": "2",
		"TITLE": "On the Evolution of Exception Usage in Java Projects",
		"URL": "http://scg.unibe.ch/archive/papers/Osma17b-exception-usage.pdf",
		"DOI": "10.1109/SANER.2017.7884646",
		"YEAR": "2017",
		"PEERREVIEW": "yes",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb17",
		"ABSTRACT": "Programming languages use exceptions to handle\nabnormal situations during the execution of a program. While\nprogramming languages often provide a set of standard exceptions,\ndevelopers can further create custom exceptions to capture\nrelevant data about project- and domain-specific errors. We\nhypothesize that, given their usefulness, custom exceptions are\nused increasingly as software systems mature. To assess this\nclaim, we empirically analyze the evolution of exceptions and\nexception-handling code within four, popular and long-lived Java\nsystems. We observe that indeed the amount of error-handling\ncode, together with the number of custom exceptions and their\nusage in catch handlers and throw statements increase as projects\nevolve. However, we find that the usage of standard exceptions\nincreases more than the usage of custom exceptions in both catch\nhandlers and throw statements. A preliminary manual analysis\nof throw statements reveals that developers encode the domain\ninformation into the standard Java exceptions as custom string\nerror messages instead of relying on custom exception classes."
	},
	{
		"key": "Osma17c",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Haidar Osman and Mohammad Ghafari and Oscar Nierstrasz",
		"BOOKTITLE": "1st International Workshop on Machine Learning Techniques for Software Quality Evaluation (MaLTeSQuE 2017)",
		"TITLE": "Automatic Feature Selection by Regularization to Improve Bug Prediction Accuracy",
		"MONTH": "February",
		"YEAR": "2017",
		"LOCATION": "Klagenfurt, Austria",
		"PEERREVIEW": "yes",
		"NUMPAGES": "6",
		"MEDIUM": "2",
		"PAGES": "27--32",
		"URL": "http://scg.unibe.ch/archive/papers/Osma17c-bugPredictionRegularization.pdf",
		"DOI": "10.1109/MALTESQUE.2017.7882013",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb17",
		"ABSTRACT": "Bug prediction has been a hot research topic for\nthe past two decades, during which different machine learning\nmodels based on a variety of software metrics have been\nproposed. Feature selection is a technique that removes noisy and\nredundant features to improve the accuracy and generalizability\nof a prediction model. Although feature selection is important, it\nadds yet another step to the process of building a bug prediction\nmodel and increases its complexity. Recent advances in machine\nlearning introduce embedded feature selection methods that allow\na prediction model to carry out feature selection automatically\nas part of the training process. The effect of these methods on\nbug prediction is unknown.\nIn this paper we study regularization as an embedded feature\nselection method in bug prediction models. Specifically, we study\nthe impact of three regularization methods (Ridge, Lasso, and\nElasticNet) on linear and Poisson Regression as bug predictors\nfor five open source Java systems. Our results show that the\nthree regularization methods reduce the prediction error of the\nregressors and improve their stability"
	},
	{
		"key": "Osma17d",
		"type": "inproceedings",
		"AUTHOR": "Haidar Osman and Andrei Chiş and Claudio Corrodi and Mohammad Ghafari and Oscar Nierstrasz",
		"TITLE": "Exception Evolution in Long-lived Java Systems",
		"BOOKTITLE": "Proceedings of the 14th International Conference on Mining Software Repositories",
		"ANNOTE": "internationalconference",
		"SERIES": "MSR '17",
		"YEAR": "2017",
		"LOCATION": "Buenos Aires, Argentina",
		"URL": "http://scg.unibe.ch/archive/papers/Osma17d-exception-evolution.pdf",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb17",
		"DOI": "10.1109/MSR.2017.21",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"ABSTRACT": "Exception handling allows developers to deal with abnormal situations that disrupt the execution flow of a program. There are mainly three types of exceptions: standard exceptions provided by the programming language itself, custom exceptions defined by the project developers, and third-party exceptions defined in external libraries. We conjecture that there are multiple factors that affect the use of these exception types. We perform an empirical study on long-lived Java projects to investigate these factors. In particular, we analyze how developers rely on the different types of exceptions in throw statements and exception handlers. We confirm that the domain, the type, and the development phase of a project affect the exception handling patterns. We observe that applications have significantly more error handling code than libraries and they increasingly rely on custom exceptions. Also, projects that belong to different domains have different preferences of exception types. For instance, content management systems rely more on custom exceptions than standard exceptions whereas the opposite is true in parsing frameworks."
	},
	{
		"key": "Osma17f",
		"type": "inproceedings",
		"AUTHOR": "Osman, Haidar and Ghafari, Mohammad and Nierstrasz, Oscar and Lungu, Mircea",
		"TITLE": "An Extensive Analysis of Efficient Bug Prediction Configurations",
		"BOOKTITLE": "Proceedings of the 13th International Conference on Predictive Models and Data Analytics in Software Engineering",
		"ANNOTE": "internationalconference",
		"SERIES": "PROMISE",
		"YEAR": "2017",
		"ISBN": "978-1-4503-5305-2",
		"LOCATION": "Toronto, Canada",
		"PAGES": "107--116",
		"NUMPAGES": "10",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"URL": "http://scg.unibe.ch/archive/papers/Osma17f-EfficientBugPrediction.pdf",
		"DOI": "10.1145/3127005.3127017",
		"ACMID": "3127017",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb18",
		"ABSTRACT": "Background: Bug prediction helps developers steer maintenance activities towards the buggy parts of a software. There are many design aspects to a bug predictor, each of which has several options, i.e. software metrics, machine learning model, and response variable.\nAims: These design decisions should be judiciously made because an improper choice in any of them might lead to wrong, misleading, or even useless results. We argue that bug prediction configurations are intertwined and thus need to be evaluated in their entirety, in contrast to the common practice in the field where each aspect is investigated in isolation.\nMethod: We use a cost-aware evaluation scheme to evaluate 60 different bug prediction configuration combinations on five open source Java projects.\nResults: We find out that the best choices for building a cost-effective bug predictor are change metrics mixed with source code metrics as independent variables, Random Forest as the machine learning model, and the number of bugs as the response variable. Combining these configuration options results in the most efficient bug predictor across all subject systems.\nConclusions: We demonstrate a strong evidence for the interplay among bug prediction configurations and provide concrete guidelines for researchers and practitioners on how to build and evaluate efficient bug predictors."
	},
	{
		"key": "Patk18b",
		"type": "inproceedings",
		"AUTHOR": "Nitish Patkar",
		"TITLE": "Towards Executable Domain Models",
		"ABSTRACT": "Lack of stakeholder commitment to project activities is an important cause of project failure. It leads to poor understanding of the problem domain and ultimately to incorrect domain modeling. We believe that combining Goal Directed Design methodology with Domain Driven Design using the Naked Objects Pattern would help stakeholders to become actively involved in important project activities such as requirements elicitation and rapid prototyping. This paper suggests how these approaches can gracefully be combined to facilitate active stakeholder involvement right from requirements elicitation until rapid prototyping to build a clear product vision, and realize it through an executable domain model.",
		"BOOKTITLE": "Seminar Series on Advanced Techniques & Tools for Software Evolution (SATToSE)",
		"ANNOTE": "internationalworkshop",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"KEYWORDS": "scg-pub skip-doi snf-asa2 scg18 jb18",
		"YEAR": "2018",
		"URL": "http://scg.unibe.ch/archive/papers/Patk18b.pdf"
	},
	{
		"key": "Patk19a",
		"type": "inproceedings",
		"AUTHOR": "Patkar, Nitish and Gadient, Pascal and Ghafari, Mohammad and Nierstrasz, Oscar",
		"BOOKTITLE": "25th International Conference on Requirements Engineering: Foundation for Software Quality (REFSQ)",
		"TITLE": "Towards a Catalogue of Mobile Elicitation Techniques",
		"YEAR": "2019",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"DOI": "10.1007/978-3-030-15538-4_20",
		"ABSTRACT": "Mobile apps are crucial for many businesses. Their reach and impact on the end users and on the business in return demands that requirements are elicited carefully and properly. Traditional requirements elicitation techniques may not be adequate in the mobile apps domain. Researchers have proposed numerous requirements elicitation techniques for the mobile app domain, but unfortunately, the community still lacks a comprehensive overview of available techniques. This paper presents a literature survey of about 60 relevant publications, in which we identify 24 techniques that target mobile apps. We found that only every second strategy was evaluated empirically, and even worse, non-functional requirements were rarely considered. We provide an evaluation scheme that is intended to support readers in efficiently finding opportune elicitation techniques for mobile apps. The found literature characteristics may guide future research and help the community to create more efficient, yet better, apps.",
		"KEYWORDS": "scg-pub snf-asa3 scg19 jb19",
		"URL": "http://scg.unibe.ch/archive/papers/Patk19a.pdf"
	},
	{
		"key": "Patk20a",
		"type": "inproceedings",
		"AUTHOR": "Patkar, Nitish and Ghafari, Mohammad and Nierstrasz, Oscar and Hotomski, Sofija",
		"TITLE": "Caveats in Eliciting Mobile App Requirements",
		"YEAR": "2020",
		"PEERREVIEW": "yes",
		"ABSTRACT": "Factors such as app stores or platform choices heavily affect functional and non-functional mobile app requirements. We surveyed 45 companies and interviewed ten experts to explore how factors that impact mobile app requirements are understood by requirements engineers in the mobile app industry.\nWe observed the lack of knowledge in several areas. For instance, we observed that all practitioners were aware of data privacy concerns, however, they did not know that certain third-party libraries, usage aggregators, or advertising libraries also occasionally leak sensitive user data. Similarly, certain functional requirements may not be implementable in the absence of a third-party library that is either banned from an app store for policy violations or lacks features, for instance, missing desired features in ARKit library for iOS made practitioners turn to Android.\nWe conclude that requirements engineers should have adequate technical experience with mobile app development as well as sufficient knowledge in areas such as privacy, security and law, in order to make informed decisions during requirements elicitation.\n",
		"ISBN": "9781450377317",
		"PUBLISHER": "Association for Computing Machinery",
		"ADDRESS": "New York, NY, USA",
		"URL": "http://scg.unibe.ch/archive/papers/Patk20.pdf",
		"DOI": "10.1145/3383219.3383238",
		"BOOKTITLE": "Proceedings of the Evaluation and Assessment in Software Engineering",
		"PAGES": "180--189",
		"NUMPAGES": "10",
		"KEYWORDS": "scg-pub  snf-asa3 scg20 jb20 snf-imad",
		"LOCATION": "Trondheim, Norway",
		"SERIES": "EASE 2020",
		"MEDIUM": "2"
	},
	{
		"key": "Patk20b",
		"type": "inproceedings",
		"AUTHOR": "Nitish Patkar and Leonel Merino and Oscar Nierstrasz",
		"TITLE": "Towards requirements engineering with immersive augmented reality",
		"PEERREVIEW": "yes",
		"ABSTRACT": "Often, requirements engineering (RE) activities demand project stakeholders to communicate and collaborate with each other towards building a common software product vision. We conjecture that augmented reality (AR) can be a good fit to support such communication and collaboration. In this vision paper, we report on state-of-the-art research at the intersection of AR and RE. We found that requirements elicitation and analysis have been supported by the ability of AR to provision on-the-fly information such as augmented prototypes. We discuss and map the existing challenges in RE to the aspects of AR that can boost the productivity and user experience of existing RE techniques. Finally, we elaborate on various envisioned usage scenarios in which we highlight concrete benefits and challenges of adopting immersive AR to assist project stakeholders in RE activities.\n  ",
		"BOOKTITLE": "Proc.Programming'20 Companion",
		"PUBLISHER": "ACM",
		"PAGES": "55--60",
		"DOI": "10.1145/3397537.3398472",
		"YEAR": "2020",
		"URL": "http://scg.unibe.ch/archive/papers/Patk20b.pdf",
		"KEYWORDS": "scg-pub  snf-asa3 scg20 jb20 snf-imad",
		"MEDIUM": "2"
	},
	{
		"key": "Patk20c",
		"type": "inproceedings",
		"AUTHOR": "Nitish Patkar",
		"TITLE": "Moldable requirements",
		"PEERREVIEW": "yes",
		"ABSTRACT": "Separate tools are employed to carry out\nindividual requirements engineering (RE) activities.\nThe lack of integration among these tools scatters\nthe domain knowledge, making collaboration between\ntechnical and non-technical stakeholders difficult, and\nmanagement of requirements a tedious task. In this\nPh.D. research proposal, we argue that an integrated\ndevelopment environment (IDE) should support various\nRE activities. For that, distinct stakeholders must\nbe able to effortlessly create and manage requirements\nas first-class citizens within an IDE.\nWith \"moldable requirements,\" developers create\ncustom hierarchies of requirements and build tailored\ninterfaces that enable other stakeholders to create\nrequirements and navigate between them. Similarly,\nthey create custom representations of requirements\nand involved domain objects to reflect various levels\nof detail. Such custom and domain-specific representations\nassist non-technical stakeholders in accomplishing\ntheir distinguished RE related tasks. The custom\ninterfaces make the IDE usable for non-technical\nstakeholders and help to preserve requirements in one\nplace, closer to the implementation.",
		"BOOKTITLE": "Benevol'20",
		"YEAR": "2020",
		"URL": "http://scg.unibe.ch/archive/papers/Patk20c.pdf",
		"KEYWORDS": "scg-pub skip-doi snf-asa3 scg20 jb21 snf-imad",
		"MEDIUM": "2"
	},
	{
		"key": "Patk21a",
		"type": "inproceedings",
		"AUTHOR": "Nitish Patkar and Andrei Chis and Nataliia Stulova and Oscar Nierstrasz",
		"TITLE": "Interactive Behavior-driven Development: a Low-code Perspective",
		"PEERREVIEW": "yes",
		"ABSTRACT": "Within behavior-driven development (BDD), different\ntypes of stakeholders collaborate in creating scenarios\nthat specify application behavior. The current workflow for\nBDD expects non-technical stakeholders to use an integrated\ndevelopment environment (IDE) to write textual scenarios in\nthe Gherkin language and verify application behavior using test\npassed/failed reports. Research to date shows that this approach\nleads non-technical stakeholders to perceive BDD as an overhead\nin addition to the testing.\nIn this vision paper, we propose an alternative approach to\nspecify and verify application behavior visually, interactively,\nand collaboratively within an IDE. Instead of writing textual\nscenarios, non-technical stakeholders compose, edit, and save\nscenarios by using tailored graphical interfaces that allow them\nto manipulate involved domain objects. Upon executing such\ninteractively composed scenarios, all stakeholders verify the application\nbehavior by inspecting domain-specific representations\nof run-time domain objects instead of a test run report. Such\na low code approach to BDD has the potential to enable nontechnical\nstakeholders to engage more harmoniously in behavior\nspecification and validation together with technical stakeholders\nwithin an IDE. There are two main contributions of this work:\n(i) we present an analysis of the features of 13 BDD tools, (ii) we\ndescribe a prototype implementation of our approach, and (iii) we\noutline our plan to conduct a large-scale developer survey to\nevaluate our approach to highlight the perceived benefits over\nthe existing approach.",
		"BOOKTITLE": "Proceedings of the 24rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings",
		"PUBLISHER": "ACM",
		"YEAR": "2021",
		"URL": "http://scg.unibe.ch/archive/papers/Patk21a.pdf",
		"KEYWORDS": "scg-pub snf-asa3 scg22 jb22 snf-imad",
		"DOI": "10.1109/MODELS-C53483.2021.00024",
		"MEDIUM": "2"
	},
	{
		"key": "Patk22a",
		"type": "inproceedings",
		"AUTHOR": "Nitish Patkar and Andrei Chis and Nataliia Stulova and Oscar Nierstrasz",
		"TITLE": "First-class artifacts as building blocks for live in-IDE documentation",
		"PEERREVIEW": "yes",
		"ABSTRACT": "A traditional round-trip engineering approach based on model transformations does not scale well to modern agile development environments where numerous artifacts are\nproduced using a range of heterogeneous tools and technologies. To boost artifact connectivity and maintain their consistency, we propose to create and manage software-related artifacts as first-class entities directly in an integrated development environment (IDE).  This approach has two advantages: (i) compared to employing separate tools, creating various artifacts directly within a development platform eliminates the necessity to recover trace links, and (ii) first-class artifacts can be composed into stakeholder-specific live document-artifacts. We detail and exemplify our approach in the Glamorous Toolkit IDE (henceforth,\nGlamorous toolkit), and discuss the results of a semi-structured pilot survey we conducted with practitioners and researchers to evaluate its usefulness in practice.",
		"BOOKTITLE": "2022 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)",
		"ORGANIZATION": "IEEE",
		"YEAR": "2022",
		"URL": "http://scg.unibe.ch/archive/papers/Patk22a.pdf",
		"DOI": "10.1109/SANER53432.2022.00016",
		"KEYWORDS": "scg-pub snf-asa3 scg22 jb22 snf-imad",
		"MEDIUM": "2"
	},
	{
		"key": "Patk22b",
		"type": "inproceedings",
		"AUTHOR": "Adwait Chandorkar and Nitish Patkar and Andrea Di Sorbo and Oscar Nierstrasz",
		"TITLE": "An Exploratory Study on the Usage of Gherkin Features in Open-Source Projects",
		"PEERREVIEW": "yes",
		"ABSTRACT": "With behavior-driven development (BDD), domain experts describe system behavior and desired outcomes through natural language-like sentences, e.g., using the Gherkin language. BDD frameworks partially convert the content of Gherkin specifications into executable test code. Previous studies have reported several issues with the current BDD practice, for example long repetitive Gherkin specifications and slow-running test suites. Data tables and additional features were added to the Gherkin syntax to express compactly test inputs (e.g., provide different combinations of input values and desired outputs to run tests multiple times) and also to improve the readability of Gherkin files (henceforth called spec files). However, there is no empirical evidence about the actual usage of these Gherkin features. To fill this gap, we analyzed the content of 1,572 spec files extracted from 23 open-source projects. For each spec file, we collected a set of metrics modeling the structure and the usage of the different Gherkin features. We found that only a minority of the considered spec files (i.e., 590) used data tables that contain two rows, on average. We also used statistical tests to compare the contents of spec files with and without data tables and found significant differences between the two populations, especially for what concerns the number of lines of code (LoC). On the one hand, our results shed some light on the discrepancies between the recommendations for defining Gherkin specifications and their actual adoption in practice. On the other hand, our findings demonstrate that the adoption of additional features, such as data tables, might only partially help to reduce the length of Gherkin specifications.",
		"BOOKTITLE": "5th Workshop on Validation, Analysis and Evolution of Software Tests (VST 2022, co-located with SANER 2022)",
		"ORGANIZATION": "IEEE",
		"MONTH": "March",
		"YEAR": "2022",
		"URL": "http://scg.unibe.ch/archive/papers/Patk22b.pdf",
		"DOI": "10.1109/SANER53432.2022.00134",
		"KEYWORDS": "scg-pub  snf-asa3 scg22 jb22 snf-imad",
		"ANNOTE": "internationalworkshop",
		"MEDIUM": "2"
	},
	{
		"key": "Peri09a",
		"type": "inproceedings",
		"ABSTRACT": "Enterprise Applications are complex software systems\n\t\t\t\t  that manipulate much persistent data and interact\n\t\t\t\t  with the user through a vast and complex user\n\t\t\t\t  interface. In particular applications written for\n\t\t\t\t  the Java 2 Platform, Enterprise Edition (J2EE) are\n\t\t\t\t  composed using various technologies such as\n\t\t\t\t  Enterprise Java Beans (EJB) or Java Server Pages\n\t\t\t\t  (JSP) that in turn rely on languages other than\n\t\t\t\t  Java, such as XML or SQL. In this heterogeneous\n\t\t\t\t  context applying existing reverse engineering and\n\t\t\t\t  quality assurance techniques developed for\n\t\t\t\t  object-oriented systems is not enough. Because those\n\t\t\t\t  techniques have been created to measure quality or\n\t\t\t\t  provide information about one aspect of J2EE\n\t\t\t\t  applications, they cannot properly measure the\n\t\t\t\t  quality of the entire system. We intend to devise\n\t\t\t\t  techniques and metrics to measure quality in J2EE\n\t\t\t\t  applications considering all their aspects and to\n\t\t\t\t  aid their evolution. Using software visualization we\n\t\t\t\t  also intend to inspect to structure of J2EE\n\t\t\t\t  applications and all other aspects that can be\n\t\t\t\t  investigate through this technique. In order to do\n\t\t\t\t  that we also need to create a unified meta-model\n\t\t\t\t  including all elements composing a J2EE\n\t\t\t\t  application.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Fabrizio Perin",
		"BOOKTITLE": "Proceedings of the PhD Symposium at the Working Conference on Reverse Engineering (WCRE 2009)",
		"DOI": "10.1109/WCRE.2009.45",
		"KEYWORDS": "scg09 scg-pub jb10 hasler09 moose-pub",
		"LOCATION": "Lille, France",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "291-294",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Enabling the evolution of J2EE applications through reverse engineering and quality assurance",
		"URL": "http://scg.unibe.ch/archive/papers/Peri09aEnablingevolutionOfJEAs.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Peri09aEnablingevolutionOfJEAs.pdf"
	},
	{
		"key": "Peri09b",
		"type": "inproceedings",
		"ABSTRACT": "Java Enterprise Applications (JEAs) are complex\n\t\t\t\t  systems composed using various technologies that in\n\t\t\t\t  turn rely on languages other than Java, such as XML\n\t\t\t\t  or SQL. Given the complexity of these applications,\n\t\t\t\t  the need to reverse engineer them in order to\n\t\t\t\t  support further development becomes critical. In\n\t\t\t\t  this paper we show how it is possible to split a\n\t\t\t\t  system into layers and how is possible to interpret\n\t\t\t\t  the distance between application elements in order\n\t\t\t\t  to support the refactoring of JEAs. The purpose of\n\t\t\t\t  this paper is to explore ways to provide suggestions\n\t\t\t\t  about the refactoring operations to perform on the\n\t\t\t\t  code by evaluating the distance between layers and\n\t\t\t\t  elements belonging those layers. We split JEAs into\n\t\t\t\t  layers by considering the kinds and the purposes of\n\t\t\t\t  the elements composing the application. We measure\n\t\t\t\t  distance between elements by using the notion of the\n\t\t\t\t  shortest path in a graph. Also we present how to\n\t\t\t\t  enrich the interpretation of the distance value with\n\t\t\t\t  enterprise pattern detection in order to refine the\n\t\t\t\t  suggestion about modifications to perform on the\n\t\t\t\t  code.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Fabrizio Perin",
		"BOOKTITLE": "Proceedings of FAMOOSr at the Working Conference on Reverse Engineering (WCRE 2009)",
		"KEYWORDS": "scg09 scg-pub jb10 hasler09 moose-pub skip-doi",
		"LOCATION": "Lille, France",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "20-24",
		"PEERREVIEW": "yes",
		"TITLE": "Driving the refactoring of Java Enterprise applications by evaluating the distance between application elements",
		"URL": "http://scg.unibe.ch/archive/papers/Peri09bDistancesBetweenElements.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Peri09bDistancesBetweenElements.pdf"
	},
	{
		"key": "Peri10a",
		"type": "inproceedings",
		"ABSTRACT": "Java Enterprise Applications (JEAs) are large\n\t\t\t\t  systems that integrate multiple technologies and\n\t\t\t\t  programming languages. Transactions in JEAs simplify\n\t\t\t\t  the development of code that deals with failure\n\t\t\t\t  recovery and multi-user coordination by guaranteeing\n\t\t\t\t  atomicity of sets of operations. The heterogeneous\n\t\t\t\t  nature of JEAs, however, can obfuscate conceptual\n\t\t\t\t  errors in the application code, and in particular\n\t\t\t\t  can hide incorrect declarations of transaction\n\t\t\t\t  scope. In this paper we present a technique to\n\t\t\t\t  expose and analyze the application transaction scope\n\t\t\t\t  in JEAs by merging and analyzing information from\n\t\t\t\t  multiple sources. We also present several novel\n\t\t\t\t  visualizations that aid in the analysis of\n\t\t\t\t  transaction scope by highlighting anomalies in the\n\t\t\t\t  specification of transactions and violations of\n\t\t\t\t  architectural constraints. We have validated our\n\t\t\t\t  approach on two versions of a large commercial case\n\t\t\t\t  study.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Fabrizio Perin and Tudor Gîrba and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of International Conference on Software Maintenance 2010",
		"DOI": "10.1109/ICSM.2010.5609572",
		"KEYWORDS": "scg-pub scg10 jb11 hasler10 moose-pub girba",
		"LOCATION": "Timişoara, Romania",
		"MEDIUM": "2",
		"MONTH": "September",
		"PAGES": "1-10",
		"PEERREVIEW": "yes",
		"TITLE": "Recovery and Analysis of Transaction Scope from Scattered Information in Java Enterprise Applications",
		"URL": "http://scg.unibe.ch/archive/papers/Peri10aTransactionRecovery.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Peri10aTransactionRecovery.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.2010.5609572"
	},
	{
		"key": "Peri10b",
		"type": "inproceedings",
		"ABSTRACT": "Reengineering and integrated development plat- forms\n\t\t\t\t  typically do not list search results in a\n\t\t\t\t  particularly useful order. PageRank is the algorithm\n\t\t\t\t  prominently used by the Google internet search\n\t\t\t\t  engine to rank the relative importance of elements\n\t\t\t\t  in a set of hyperlinked documents. To determine the\n\t\t\t\t  relevance of objects, classes, attributes, and\n\t\t\t\t  methods we propose to apply PageRank to software\n\t\t\t\t  artifacts and their relationship (reference,\n\t\t\t\t  inheritance, access, and invocation). This paper\n\t\t\t\t  presents various experiments that demonstrate the\n\t\t\t\t  usefulness of the ranking algorithm in software\n\t\t\t\t  (re)engineering.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Fabrizio Perin and Lukas Renggli and Jorge Ressia",
		"BOOKTITLE": "4th Workshop on FAMIX and Moose in Reengineering (FAMOOSr 2010)",
		"KEYWORDS": "scg-pub scg10 jb11 snf10 hasler10 moose-pub skip-doi",
		"MEDIUM": "1",
		"PEERREVIEW": "yes",
		"TITLE": "Ranking Software Artifacts",
		"URL": "http://scg.unibe.ch/archive/papers/Peri10bRankingSoftware.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Peri10bRankingSoftware.pdf"
	},
	{
		"key": "Peri10c",
		"type": "inproceedings",
		"ABSTRACT": "Java Enterprise Applications (JEAs) are large\n\t\t\t\t  systems that integrate multiple technologies and\n\t\t\t\t  programming languages. With the purpose to support\n\t\t\t\t  the analysis of JEAs we have developed MooseJEE an\n\t\t\t\t  extension of the Moose environment capable to\n\t\t\t\t  model the typical elements of JEAs.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Fabrizio Perin",
		"BOOKTITLE": "Proceedings of the 26th International Conference on Software Maintenance (ICSM 2010) (Tool Demonstration)",
		"DOI": "10.1109/ICSM.2010.5609569",
		"KEYWORDS": "scg-pub scg10 jb11 hasler10 moose-pub",
		"LOCATION": "Timişoara, Romania",
		"MEDIUM": "2",
		"MONTH": "September",
		"PEERREVIEW": "yes",
		"TITLE": "MooseJEE: A Moose Extension to Enable the assessment of JEAs",
		"URL": "http://scg.unibe.ch/archive/papers/Peri10cMooseExtension.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Peri10cMooseExtension.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.2010.5609569"
	},
	{
		"key": "Peri10d",
		"type": "inproceedings",
		"ABSTRACT": "Java Enterprise Applications (JEAs) are complex\n\t\t\t\t  software systems written using multiple\n\t\t\t\t  technologies. Moreover they are usually distributed\n\t\t\t\t  systems and use a database to deal with persistence.\n\t\t\t\t  A particular problem that appears in the design of\n\t\t\t\t  these systems is the lack of a rich business model.\n\t\t\t\t  In this paper we propose a technique to support the\n\t\t\t\t  recovery of such rich business objects starting from\n\t\t\t\t  anemic Data Transfer Objects (DTOs). Exposing the\n\t\t\t\t  code duplications in the application's elements\n\t\t\t\t  using the DTOs we suggest which business logic can\n\t\t\t\t  be moved into the DTOs from the other classes.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Fabrizio Perin and Tudor Gîrba",
		"BOOKTITLE": "4th Workshop on FAMIX and Moose in Reengineering (FAMOOSr 2010)",
		"KEYWORDS": "scg-pub scg10 jb11 hasler10 moose-pub skip-doi girba",
		"LOCATION": "Timişoara, Romania",
		"MEDIUM": "1",
		"MONTH": "September",
		"PEERREVIEW": "yes",
		"TITLE": "Evaluating Code Duplication to Identify Rich Business Objects from Data Transfer Objects",
		"URL": "http://scg.unibe.ch/archive/papers/Peri10dDTOs.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Peri10dDTOs.pdf"
	},
	{
		"key": "Peri10e",
		"type": "inproceedings",
		"ABSTRACT": "Written text is an important component in the\n\t\t\t\t  process of knowledge acquisition and communication.\n\t\t\t\t  Poorly written text fails to deliver clear ideas to\n\t\t\t\t  the reader no matter how revolutionary and\n\t\t\t\t  ground-breaking these ideas are. Providing text with\n\t\t\t\t  good writing style is essential to transfer ideas\n\t\t\t\t  smoothly. While we have sophisticated tools to check\n\t\t\t\t  for stylistic problems in program code, we do not\n\t\t\t\t  apply the same techniques for written text. In this\n\t\t\t\t  paper we present TextLint, a rule-based tool to\n\t\t\t\t  check for common style errors in natural language.\n\t\t\t\t  TextLint provides a structural model of written text\n\t\t\t\t  and an extensible rule-based checking mechanism.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Fabrizio Perin and Lukas Renggli and Jorge Ressia",
		"BOOKTITLE": "Smalltalks 2010",
		"KEYWORDS": "scg11 scg-pub jb11 snf11 textlint petitparser skip-doi",
		"LOCATION": "Concepcion del Uruguay, Entre Rios, Argentina",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"TITLE": "Natural Language Checking with Program Checking Tools",
		"URL": "http://scg.unibe.ch/archive/papers/Peri10eNaturalLanguageChecking.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Peri10eNaturalLanguageChecking.pdf"
	},
	{
		"key": "Peri11a",
		"type": "article",
		"ABSTRACT": "Written text is an important component in the process of\n\t\t\t\t  knowledge acquisition and communication. Poorly written\n\t\t\t\t  text fails to deliver clear ideas to the reader no\n\t\t\t\t  matter how revolutionary and ground-breaking these ideas\n\t\t\t\t  are. Providing text with good writing style is essential\n\t\t\t\t  to transfer ideas smoothly. While we have sophisticated\n\t\t\t\t  tools to check for stylistic problems in program code,\n\t\t\t\t  we do not apply the same techniques for written text. In\n\t\t\t\t  this paper we present TextLint, a rule-based tool to\n\t\t\t\t  check for common style errors in natural language.\n\t\t\t\t  TextLint provides a structural model of written text\n\t\t\t\t  and an extensible rule-based checking mechanism.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Fabrizio Perin and Lukas Renggli and Jorge Ressia",
		"DOI": "10.1016/j.cl.2011.11.002",
		"JOURNAL": "Journal of Computer Languages, Systems and Structures",
		"KEYWORDS": "scg11 scg-pub jb12 snf-none textlint petitparser",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Elsevier",
		"TITLE": "Linguistic Style Checking with Program Checking Tools",
		"URL": "http://scg.unibe.ch/archive/papers/Peri11aNaturalLanguageCheckingWithProgramCheckingTools.pdf",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Peri11aNaturalLanguageCheckingWithProgramCheckingTools.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.cl.2011.11.002"
	},
	{
		"key": "Poni06a",
		"type": "inproceedings",
		"ABSTRACT": "Successful software systems cope with complexity by\n\t\t\t\t  organizing classes into packages. However, a\n\t\t\t\t  particular organization may be neither\n\t\t\t\t  straightforward nor obvious for a given developer.\n\t\t\t\t  As a consequence, classes can be misplaced, leading\n\t\t\t\t  to duplicated code and ripple effects with minor\n\t\t\t\t  changes effecting multiple packages. We claim that\n\t\t\t\t  contextual information is the key to rearchitecture\n\t\t\t\t  a system. Exploiting contextual information, we\n\t\t\t\t  propose a technique to detect misplaced classes by\n\t\t\t\t  analyzing how client packages access the classes of\n\t\t\t\t  a given provider package. We define locality as a\n\t\t\t\t  measure of the degree to which classes reused by\n\t\t\t\t  common clients appear in the same package. We then\n\t\t\t\t  use locality to guide a simulated annealing\n\t\t\t\t  algorithm to obtain optimal placements of classes in\n\t\t\t\t  packages. The result is the identification of\n\t\t\t\t  classes that are candidates for relocation. We apply\n\t\t\t\t  the technique to three applications and validate the\n\t\t\t\t  usefulness of our approach via developer\n\t\t\t\t  interviews.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Laura Ponisio and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 3rd Software Measurement European Forum 2006 (SMEF'06)",
		"CVS": "AlchemistSimulatedAnnealingSMEF06",
		"KEYWORDS": "scg-none jb06 fb06 scg-pub skip-doi oscarPub recast06",
		"MEDIUM": "2",
		"PAGES": "91--103",
		"PEERREVIEW": "yes",
		"TITLE": "Using Context Information to Re-architect a System",
		"URL": "http://scg.unibe.ch/archive/papers/Poni06aSimulatedAnnealing.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Poni06aSimulatedAnnealing.pdf"
	},
	{
		"key": "Poni06b",
		"type": "techreport",
		"ABSTRACT": "Complex systems are decomposed into cohesive\n\t\t\t\t  packages with the goal of limiting the scope of\n\t\t\t\t  changes: if our packages are cohesive, we hope that\n\t\t\t\t  changes will be limited to the packages responsible\n\t\t\t\t  for the features we are changing, or at worst the\n\t\t\t\t  packages that are immediate clients of those\n\t\t\t\t  features. But how should we measure cohesion?\n\t\t\t\t  Traditional cohesion metrics focus on the explicit\n\t\t\t\t  dependencies and interactions between the classes\n\t\t\t\t  within the package under study. A package, however,\n\t\t\t\t  may be conceptually cohesive even though its classes\n\t\t\t\t  exhibit no explicit dependencies. We propose a group\n\t\t\t\t  of contextual metrics that assess the cohesion of a\n\t\t\t\t  package based on the degree to which its classes are\n\t\t\t\t  used together by common clients. We apply these\n\t\t\t\t  metrics to various case studies, and contrast the\n\t\t\t\t  degree of cohesion detected with that of traditional\n\t\t\t\t  cohesion metrics. In particular, we note that\n\t\t\t\t  object-oriented frameworks may appear not to be\n\t\t\t\t  cohesive with traditional metrics, whereas our\n\t\t\t\t  contextual metrics expose the implicit cohesion that\n\t\t\t\t  results from the framework's clients.",
		"ANNOTE": "report notrefereed",
		"AUTHOR": "Laura Ponisio and Oscar Nierstrasz",
		"INSTITUTION": "University of Bern, Institute of Applied Mathematics and Computer Sciences",
		"KEYWORDS": "scg-none jb06 fb06 scg-pub skip-doi recast06 moose-pub",
		"NUMBER": "IAM-06-002",
		"TITLE": "Using Contextual Information to Assess Package Cohesion",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Poni06bAlchemistPackageCohesion.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Poni06bAlchemistPackageCohesion.pdf"
	},
	{
		"key": "Rani18a",
		"type": "inproceedings",
		"AUTHOR": "Pooja Rani",
		"TITLE": "Software Analysis using Natural Language Queries",
		"ABSTRACT": "Understanding a software system consumes a substantial portion of a developer's effort. To support software comprehension and evolution, reverse engineering aims at creating a high-level representation of an existing software system. With state- of-the-art technology, abstract models of software systems are created by reverse engineering tools and analyzed using software analysis tools. Despite the rich functionalities offered by analysis tools, a novice user may find them difficult to use due to an unfamiliar tool environment and query language. In this paper, we propose an approach that allows the developer to formulate a query in a natural language in order to overcome these obstacles.",
		"BOOKTITLE": "Seminar Series on Advanced Techniques & Tools for Software Evolution (SATToSE)",
		"ANNOTE": "internationalworkshop",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"KEYWORDS": "scg-pub skip-doi snf-asa2 scg18 jb18",
		"YEAR": "2018",
		"URL": "http://scg.unibe.ch/archive/papers/Rani18a.pdf"
	},
	{
		"key": "Rani21a",
		"type": "inproceedings",
		"TITLE": "Speculative Analysis for Quality Assessment of Code Comments",
		"AUTHOR": "Rani, Pooja",
		"BOOKTITLE": "2021 IEEE/ACM 43rd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)",
		"ABSTRACT": "Previous studies have shown that high-quality code comments assist developers in program comprehension and maintenance tasks. However, the semi-structured nature of comments, unclear conventions for writing good comments, and the lack of quality assessment tools for all aspects of comments make their evaluation and maintenance a non-trivial problem. To achieve high-quality comments, we need a deeper understanding of code comment characteristics and the practices developers follow. In this thesis, we approach the problem of assessing comment quality from three different perspectives: what developers ask about commenting practices, what they write in comments, and how researchers support them in assessing comment quality.\n\t  Our preliminary findings show that developers embed various kinds of information in class comments across programming languages. Still, they face problems in locating relevant guidelines to write consistent and informative comments, verifying the adherence of their comments to the guidelines, and evaluating the overall state of comment quality. To help developers and researchers in building comment quality assessment tools, we provide: (i) an empirically validated taxonomy of comment convention-related questions from various community forums, (ii) an empirically validated taxonomy of comment information types from various programming languages, (iii) a language-independent approach to automatically identify the information types, and (iv) a comment quality taxonomy prepared from a systematic literature review.",
		"YEAR": "2021",
		"EPRINT": "2102.09605",
		"ARCHIVEPREFIX": "arXiv",
		"PRIMARYCLASS": "cs.SE",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"PAGES": "299-303",
		"DOI": "10.1109/ICSE-Companion52605.2021.00132",
		"KEYWORDS": "comments scg-pub snf-asa3 scg21 jb21",
		"URL": "http://scg.unibe.ch/archive/papers/Rani21a.pdf"
	},
	{
		"key": "Rani21b",
		"type": "article",
		"TITLE": "What do class comments tell us? An investigation of comment evolution and practices in Pharo Smalltalk",
		"AUTHOR": "Rani, Pooja and Panichella, Sebastiano and Leuenberger, Manuel and Ghafari, Mohammad and Nierstrasz, Oscar",
		"ABSTRACT": "Previous studies have characterized code comments in various programming languages, showing how high quality of code comments is crucial to support program comprehension activities, and to improve the effectiveness of maintenance tasks. However, very few studies have focused on understanding developer practices to write comments. None of them has compared such developer practices to the standard comment guidelines to study the extent to which developers follow the guidelines. This paper reports the first empirical study investigating commenting practices in Pharo Smalltalk. First, we analyze class comment evolution over seven Pharo versions. Then, we quantitatively and qualitatively investigate the information types embedded in class comments. Finally, we study the adherence of developer commenting practices to the official class comment template over Pharo versions. The results of this study show that there is a rapid increase in class comments in the initial three Pharo versions, while in subsequent versions developers added comments to both new and old classes, thus maintaining a similar code to comment ratio. We furthermore found three times as many information types in class comments as those suggested by the template. However, the information types suggested by the template tend to be present more often than other types of information. Additionally, we find that a substantial proportion of comments follow the writing style of the template in writing these information types, but they are written and formatted in a non-uniform way. This suggests the need to standardize the commenting guidelines for formatting the text, and to provide headers for the different information types to ensure a consistent style and to identify the information easily. Given the importance of high-quality code comments, we draw numerous implications for developers and researchers to improve the support for comment quality assessment tools.",
		"JOURNAL": "Empirical Software Engineering",
		"ANNOTE": "internationaljournal",
		"VOLUME": "26",
		"NUMBER": "6",
		"PAGES": "1--49",
		"YEAR": "2021",
		"DOI": "10.1007/s10664-021-09981-5",
		"PUBLISHER": "Springer",
		"EPRINT": "2005.11583",
		"ARCHIVEPREFIX": "arXiv",
		"PRIMARYCLASS": "cs.SE",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "comments scg-pub scg21 jb21 snf-asa3 pharo",
		"URL": "http://scg.unibe.ch/archive/papers/Rani21b.pdf"
	},
	{
		"key": "Rani21c",
		"type": "inproceedings",
		"AUTHOR": "Birrer, Mathias and Rani, Pooja and Panichella, Sebastiano and Nierstrasz, Oscar",
		"BOOKTITLE": "2021 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)",
		"TITLE": "Makar: A Framework for Multi-source Studies based on Unstructured Data",
		"ABSTRACT": "To perform various development and maintenance tasks, developers frequently seek information on various sources such as mailing lists, Stack Overflow (SO), and Quora. Researchers analyze these sources to understand developer information needs in these tasks. However, extracting and preprocessing unstructured data from various sources, building and maintaining a reusable dataset is often a time-consuming and iterative process. Additionally, the lack of tools for automating this data analysis process complicates the task to reproduce previous results or datasets.To address these concerns we propose Makar, which provides various data extraction and preprocessing methods to support researchers in conducting reproducible multi-source studies. To evaluate Makar, we conduct a case study that analyzes code comment related discussions from SO, Quora, and mailing lists. Our results show that Makar is helpful for preparing reproducible datasets from multiple sources with little effort, and for identifying the relevant data to answer specific research questions in a shorter time compared to state-of-the-art tools, which is of critical importance for studies based on unstructured data. Tool webpage: https://github.com/maethub/makar",
		"YEAR": "2021",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"PAGES": "577-581",
		"DOI": "10.1109/SANER50967.2021.00069",
		"KEYWORDS": "scg-pub snf-asa3 scg21 jb21",
		"URL": "http://scg.unibe.ch/archive/papers/Rani21c.pdf"
	},
	{
		"key": "Rani21d",
		"type": "article",
		"TITLE": "How to Identify Class Comment Types? A Multi-language Approach for Class Comment Classification",
		"JOURNAL": "Journal of Systems and Software",
		"ANNOTE": "internationaljournal",
		"VOLUME": "181",
		"PAGES": "111047",
		"YEAR": "2021",
		"ISSN": "0164-1212",
		"DOI": "https://doi.org/10.1016/j.jss.2021.111047",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"AUTHOR": "Pooja Rani and Sebastiano Panichella and Manuel Leuenberger and Andrea Di Sorbo and Oscar Nierstrasz",
		"ABSTRACT": "Most software maintenance and evolution tasks require developers to understand the source code of their software systems. Software developers usually inspect class comments to gain knowledge about program behavior, regardless of the programming language they are using. Unfortunately, (i) different programming languages present language-specific code commenting notations and guidelines; and (ii) the source code of software projects often lacks comments that adequately describe the class behavior, which complicates program comprehension and evolution activities. To handle these challenges, this paper investigates the different language-specific class commenting practices of three programming languages: Python, Java, and Smalltalk. In particular, we systematically analyze the similarities and differences of the information types found in class comments of projects developed in these languages. We propose an approach that leverages two techniques -namely Natural Language Processing and Text Analysis -to automatically identify class comment types, i.e., the specific types of semantic information found in class comments. To the best of our knowledge, no previous work has provided a comprehensive taxonomy of class comment types for these three programming languages with the help of a common automated approach. Our results confirm that our approach can classify frequent class comment information types with high accuracy for the Python, Java, and Smalltalk programming languages. We believe this work can help in monitoring and assessing the quality and evolution of code comments in different programming languages, and thus support maintenance and evolution tasks.",
		"EPRINT": "2107.04521",
		"ARCHIVEPREFIX": "arXiv",
		"PRIMARYCLASS": "cs.SE",
		"KEYWORDS": "comments scg-pub scg21 jb21 snf-asa3 pharo, Natural language processing technique, Code comment analysis, Software documentation",
		"URL": "http://scg.unibe.ch/archive/papers/Rani21d.pdf"
	},
	{
		"key": "Rani21e",
		"type": "inproceedings",
		"TITLE": "What Do Developers Discuss about Code Comments?",
		"BOOKTITLE": "2021 IEEE 21st International Working Conference on Source Code Analysis and Manipulation (SCAM)",
		"ABSTRACT": "Code comments are important for program comprehension, development, and maintenance tasks. Given the varying standards for code comments, and their unstructured or semi-structured nature, developers get easily confused (especially novice developers) about which convention(s) to follow, or what tools to use while writing code documentation. Thus, they post related questions on external online sources to seek better commenting practices. In this paper, we analyze code comment discussions on online sources such as Stack Overflow (SO) and Quora to shed some light on the questions developers ask about commenting practices. We apply Latent Dirichlet Allocation (LDA) to identify emerging topics concerning code comments. Then we manually analyze a statistically significant sample set of posts to derive a taxonomy that provides an overview of the developer questions about commenting practices. Our results highlight that on SO nearly 40% of the questions mention how to write or process comments in documentation tools and environments, and nearly 20% of the questions are about potential limitations and possibilities of documentation tools to add automatically and consistently more information in comments. On the other hand, on Quora, developer questions focus more on background information (35% of the questions) or asking opinions (16% of the questions) about code comments. We found that (i) not all aspects of comments are covered in coding style guidelines, e.g., how to add a specific type of information, (ii) developers need support in learning the syntax and format conventions to add various types of information in comments, and (iii) developers are interested in various automated strategies for comments such as detection of bad comments, or verify comment style automatically, but lack tool support to do that.",
		"YEAR": "2021",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"EPRINT": "2108.07648",
		"ARCHIVEPREFIX": "arXiv",
		"PRIMARYCLASS": "cs.SE",
		"AUTHOR": "Pooja Rani and Mathias Birrer and Sebastiano Panichella and Mohammad Ghafari and Oscar Nierstrasz",
		"KEYWORDS": "comments snf-asa3 jb22 scg21 scg-pub",
		"DOI": "10.1109/SCAM52516.2021.00027",
		"URL": "http://scg.unibe.ch/archive/papers/Rani21e.pdf"
	},
	{
		"key": "Rani21f",
		"type": "inproceedings",
		"TITLE": "Do Comments follow Commenting Conventions? A Case Study in Java and Python",
		"BOOKTITLE": "2021 IEEE 21st International Working Conference on Source Code Analysis and Manipulation (SCAM)",
		"ABSTRACT": "Assessing code comment quality is known to be a difficult problem. A number of coding style guidelines have been created with the aim to encourage writing of informative, readable, and consistent comments. However, it is not clear from the research to date which specific aspects of comments the guidelines cover (e.g., syntax, content, structure). Furthermore, the extent to which developers follow these guidelines while writing code comments is unknown.\n \tWe analyze various style guidelines in Java and Python and uncover that the majority of them address more the content aspect of the comments rather than syntax or formatting, but when considering the different types of information developers embed in comments and the concerns they raise on various online platforms about the commenting practices, existing comment conventions are not yet specified clearly enough, nor do they adequately cover important concerns. Our results highlight the mismatch between developer commenting practices and style guidelines, and provide several focal points for the design and improvement of comment quality checking tools.",
		"YEAR": "2021",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"EPRINT": "2108.10766",
		"ARCHIVEPREFIX": "arXiv",
		"PRIMARYCLASS": "cs.SE",
		"AUTHOR": "Pooja Rani and Suada Abukar and Nataliia Stulova and Alexander Bergel and Oscar Nierstrasz",
		"KEYWORDS": "comments snf-asa3 jb22 scg21 scg-pub",
		"DOI": "10.1109/SCAM52516.2021.00028",
		"URL": "http://scg.unibe.ch/archive/papers/Rani21f.pdf"
	},
	{
		"key": "Rani22b",
		"type": "inproceedings",
		"ABSTRACT": "Code comments support developers in\n    understanding and maintaining codebases. Specifically in the Pharo\n    environment, code comments serve as the main form of code documentation\n    and usually convey information ranging from high-level design\n    descriptions to low-level implementation details. Nevertheless, numerous\n    important classes in Pharo still lack comments as developers find writing\n    comments to be a tedious and effort-intensive task. Previous works in\n    Java have recommended generating comments automatically to reduce\n    commenting effort and save developers time. There exist several\n    approaches to achieve this goal. One such popular approach is based on\n    identifying stereotypes, i.e. a generalized set of characteristics\n    supposed to represent an entity (object, class). However, this approach\n    has not been tested for other programming languages. In this paper, we\n    adopt the stereotype-based approach to automatically generate class\n    comments in the Pharo programming environment. Specifically, we generated\n    information about the class type, collaborators and key methods. We\n    surveyed seven developers to evaluate the generated comments for 24\n    classes. The responses suggest that, although more information could be\n    added to the comments, the generated class comments are readable and\n    understandable, and the majority of comments do not contain unnecessary\n    information.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Pooja Rani and Alexandre Bergel and Lino Hess and Timo Kehrer and Oscar Nierstrasz",
		"BOOKTITLE": "IWST'22: Proceedings of International Workshop on Smalltalk Technologies",
		"KEYWORDS": "scg22 scg-pub seg-pub jb22 snf-asa3 MISSING-DOI",
		"PEERREVIEW": "yes",
		"TITLE": "Can We Automatically Generate Class Comments in Pharo?",
		"LOCATION": "Novi Sad, Serbia",
		"URL": "http://scg.unibe.ch/archive/papers/Rani22b.pdf",
		"PDF": "https://ceur-ws.org/Vol-3325/regular4.pdf",
		"YEAR": "2022",
		"MEDIUM": "4"
	},
	{
		"key": "Rani22c",
		"type": "article",
		"TITLE": "A decade of code comment quality assessment: A systematic literature review",
		"JOURNAL": "Journal of Systems and Software",
		"ANNOTE": "internationaljournal",
		"VOLUME": "195",
		"PAGES": "111515",
		"YEAR": "2022",
		"ISSN": "0164-1212",
		"DOI": "https://doi.org/10.1016/j.jss.2022.111515",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"AUTHOR": "Pooja Rani and Arianna Blasi and Nataliia Stulova and Sebastiano Panichella and Alessandra Gorla and Oscar Nierstrasz",
		"ABSTRACT": "Code comments are important artifacts in software systems\n  and play a paramount role in many software engineering (SE) tasks related to maintenance and program\n  comprehension. However, while it is widely accepted that high quality matters in code comments just\n  as it matters in source code, assessing comment quality in practice is still an open problem. First\n  and foremost, there is no unique definition of quality when it comes to evaluating code comments.\n  The few existing studies on this topic rather focus on specific attributes of quality that can be\n  easily quantified and measured. Existing techniques and corresponding tools may also focus on\n  comments bound to a specific programming language, and may only deal with comments with specific\n  scopes and clear goals (e.g., Javadoc comments at the method level, or in-body comments describing\n  TODOs to be addressed). In this paper, we present a Systematic Literature Review (SLR) of the last\n  decade of research in SE to answer the following research questions: (i) What types of comments do\n  researchers focus on when assessing comment quality? (ii) What quality attributes (QAs) do they\n  consider? (iii) Which tools and techniques do they use to assess comment quality?, and (iv) How do\n  they evaluate their studies on comment quality assessment in general? Our evaluation, based on the\n  analysis of 2353 papers and the actual review of 47 relevant ones, shows that (i) most studies and\n  techniques focus on comments in Java code, thus may not be generalizable to other languages, and\n  (ii) the analyzed studies focus on four main QAs of a total of 21 QAs identified in the literature,\n  with a clear predominance of checking consistency between comments and the code. We observe that\n  researchers rely on manual assessment and specific heuristics rather than the automated assessment\n  of the comment quality attributes, with evaluations often involving surveys of students and the\n  authors of the original studies but rarely professional developers.",
		"KEYWORDS": "comments scg-pub scg22 jb22 snf-asa3 pharo, Natural language processing technique, Code comment analysis, Software documentation",
		"URL": "http://scg.unibe.ch/archive/papers/Rani22c.pdf"
	},
	{
		"key": "Rapi98a",
		"type": "inproceedings",
		"ABSTRACT": "Type information is a crucial information to support\n\t\t\t\t  object-oriented reengineering. In a dynamically\n\t\t\t\t  typed language like Smalltalk standard static type\n\t\t\t\t  inference is a complex and heavily computational\n\t\t\t\t  task. In this paper, we report how we use message\n\t\t\t\t  passing control and compiler extension to support\n\t\t\t\t  dynamic inference type in Smalltalk.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Pascal Rapicault and Mireille Blay-Fornarino and Stéphane Ducasse and Anne-Marie Dery",
		"KEYWORDS": "scg-pub skip-doi olit famoos-papunr oobib snf98 scg-none jb98 stefPub",
		"BOOKTITLE": "Proceedings of the ECOOP '98 International Workshop Experiences in Object-Oriented Reengineering, abstract in Object-Oriented Technology (ECOOP '98 Workshop Reader forthcoming LNCS)",
		"PAGES": "76--77",
		"TITLE": "Dynamic Type Inference to Support Object-Oriented Reengineering in Smalltalk",
		"URL": "http://scg.unibe.ch/archive/famoos/Rapi98a/type.pdf",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/famoos/Rapi98a/type.pdf"
	},
	{
		"key": "Rati04a",
		"type": "inproceedings",
		"ABSTRACT": "As systems evolve and their structure decays,\n\t\t\t\t  maintainers need accurate and automatic\n\t\t\t\t  identification of the design problems. Current\n\t\t\t\t  approaches for automatic detection of design\n\t\t\t\t  problems are not accurate enough because they\n\t\t\t\t  analyze only a single version of a system and\n\t\t\t\t  consequently they miss essential information as\n\t\t\t\t  design problems appear and evolve over time. Our\n\t\t\t\t  approach is to use the historical information of the\n\t\t\t\t  suspected flawed structure to increase the accuracy\n\t\t\t\t  of the automatic problem detection. Our means is to\n\t\t\t\t  define measurements which summarize how persistent\n\t\t\t\t  the problem was and how much maintenance effort was\n\t\t\t\t  spent on the suspected structure. We apply our\n\t\t\t\t  approach on a large scale case study and show how it\n\t\t\t\t  improves the accuracy of the detection of God\n\t\t\t\t  Classes and Data Classes, and additionally how it\n\t\t\t\t  adds valuable semantical information about the\n\t\t\t\t  evolution of flawed design structures.",
		"ACCEPTNUM": "33",
		"ACCEPTTOTAL": "62",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Daniel Raţiu and Stéphane Ducasse and Tudor Gîrba and Radu Marinescu",
		"BOOKTITLE": "Proceedings of 8th European Conference on Software Maintenance and Reengineering (CSMR'04)",
		"KEYWORDS": "recast04 scg-pub skip-doi stefPub scg-none jb04 moose-pub girba ratiu evolution",
		"MISC": "acceptance rate: 33/62 = 52",
		"PAGES": "223--232",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "Using History Information to Improve Design Flaws Detection",
		"URL": "http://scg.unibe.ch/archive/papers/Rati04aHistoryImproveFlawsDetection.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Rati04aHistoryImproveFlawsDetection.pdf"
	},
	{
		"key": "Reic05a",
		"type": "techreport",
		"ABSTRACT": "Traits are a well-known simple, but powerful\n\t\t\t\t  compositional model for reuse. Although traits\n\t\t\t\t  already implemented in dynamically typed languages,\n\t\t\t\t  they're not yet practically realized in statically\n\t\t\t\t  typed languages. Typing traits and adapting the\n\t\t\t\t  model to these languages is more complex to achieve.\n\t\t\t\t  We report on our experience and practical research\n\t\t\t\t  implementing traits in C 2.0, concerning\n\t\t\t\t  generics. We show the difficulties and possible\n\t\t\t\t  solutions of typing and parameterizing traits in\n\t\t\t\t  generally, possible enhancements for statically\n\t\t\t\t  typed languages as well as adapting traits to C\n\t\t\t\t  regarding features like overriding and hiding.",
		"AUTHOR": "Stefan Reichhart",
		"INSTITUTION": "University of Bern",
		"KEYWORDS": "scg-ip scg-none jb06 snf06 scg-pub skip-doi scg-rotor traits C",
		"TITLE": "A Prototype of Traits for C",
		"TYPE": "Informatikprojekt",
		"URL": "http://scg.unibe.ch/archive/projects/Reic05a.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/projects/Reic05a.pdf"
	},
	{
		"key": "Reic07a",
		"type": "inproceedings",
		"ABSTRACT": "With the success of agile methodologies more and\n\t\t\t\t  more projects develop large test suites to ensure\n\t\t\t\t  that the system is behaving as expected. Not only do\n\t\t\t\t  tests ensure correctness, but they also offer a live\n\t\t\t\t  documentation for the code. However, as the system\n\t\t\t\t  evolves, the tests need to evolve as well to keep up\n\t\t\t\t  with the system, and as the test suite grows larger,\n\t\t\t\t  the effort invested into maintaining tests is a\n\t\t\t\t  significant activity. In this context, the quality\n\t\t\t\t  of tests becomes an important issue, as developers\n\t\t\t\t  need to assess and understand the tests they have to\n\t\t\t\t  maintain. In this paper we present TestLint, an\n\t\t\t\t  approach together with an experimental tool for\n\t\t\t\t  qualifying tests. We define a set of criteria to\n\t\t\t\t  determine test quality, and we evaluate our approach\n\t\t\t\t  on a large sample of unit tests found in open-source\n\t\t\t\t  projects.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Stefan Reichhart and Tudor Gîrba and Stéphane Ducasse",
		"BOOKTITLE": "Journal of Object Technology, Special Issue. Proceedings of TOOLS Europe 2007",
		"CACHED": "http://scg.unibe.ch/archive/papers/Reic07aTestQualityAssessment.pdf",
		"DOI": "10.5381/jot.2007.6.9.a12",
		"INRIA": "hors",
		"ISSN": "1660-1769",
		"KEYWORDS": "scg07 scg-pub jb08 snf07 skip-doi testlint test smell refactoring girba",
		"MEDIUM": "2",
		"MONTH": "October",
		"NOTE": "Special Issue. Proceedings of TOOLS Europe 2007",
		"PAGES": "231--251",
		"PEERREVIEW": "yes",
		"SELECTIF": "non",
		"TITLE": "Rule-based Assessment of Test Quality",
		"URL": "http://www.jot.fm/contents/issue_2007_10/paper12.html http://www.jot.fm/issues/issue_2007_10/paper12.pdf",
		"VOLUME": "6/9",
		"YEAR": "2007",
		"BDSK-URL-1": "http://www.jot.fm/issues/issue_2007_10/paper12/%20http://www.jot.fm/issues/issue_2007_10/paper12.pdf"
	},
	{
		"key": "Reng07a",
		"type": "inproceedings",
		"ABSTRACT": "Model-driven engineering is a powerful approach to\n\t\t\t\t  build large-scale applications. However, an\n\t\t\t\t  application's metamodel often remains static after\n\t\t\t\t  the development phase and cannot be changed unless a\n\t\t\t\t  new development effort occurs. Yet, end users often\n\t\t\t\t  need to rapidly adapt their applications to new\n\t\t\t\t  business needs. In many cases, the end users would\n\t\t\t\t  know how to make the required adaptations, if only,\n\t\t\t\t  the application would let them do so. In this paper\n\t\t\t\t  we present how we built a runtime-dynamic\n\t\t\t\t  meta-environment by integrating Magritte, a\n\t\t\t\t  self-described metamodel, into Smalltalk's\n\t\t\t\t  reflective language model. Our solution offers the\n\t\t\t\t  best of both worlds: developers can develop their\n\t\t\t\t  applications using the same tools they were used to,\n\t\t\t\t  but at the same time they gain the power of\n\t\t\t\t  meta-programming. We show in particular that our\n\t\t\t\t  approach is adapted to support end user\n\t\t\t\t  customization of applications: the adaptive model of\n\t\t\t\t  Magritte enables to not only describe existing\n\t\t\t\t  classes, but also lets end users build their own\n\t\t\t\t  metamodels on the fly.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Lukas Renggli and Stéphane Ducasse and Adrian Kuhn",
		"BOOKTITLE": "Model Driven Engineering Languages and Systems",
		"DOI": "10.1007/978-3-540-75209-7_8",
		"EDITOR": "Gregor Engels and Bill Opdyke and Douglas C. Schmidt and Frank Weil",
		"INRIA": "hors",
		"ISBN": "978-3-540-75208-0",
		"KEYWORDS": "scg07 scg-pub jb07 snf07 snf-bmcc akuhn fame",
		"MEDIUM": "2",
		"MONTH": "September",
		"PAGES": "106--120",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer",
		"RATEX": "32%",
		"SERIES": "LNCS",
		"TITLE": "Magritte — A Meta-Driven Approach to Empower Developers and End Users",
		"URL": "http://scg.unibe.ch/archive/papers/Reng07aMagritte.pdf",
		"VOLUME": "4735",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Reng07aMagritte.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-540-75209-7_8"
	},
	{
		"key": "Reng07b",
		"type": "inproceedings",
		"ABSTRACT": "Concurrency control in Smalltalk is based on locks\n\t\t\t\t  and is therefore notoriously difficult to use. Even\n\t\t\t\t  though some implementations provide high-level\n\t\t\t\t  constructs, these add complexity and potentially\n\t\t\t\t  hard-to-detect bugs to the application.\n\t\t\t\t  Transactional memory is an attractive mechanism that\n\t\t\t\t  does not have the drawbacks of locks, however the\n\t\t\t\t  underlying implementation is often difficult to\n\t\t\t\t  integrate into an existing language. In this paper\n\t\t\t\t  we show how we have introduced transactional\n\t\t\t\t  semantics in Smalltalk by using the reflective\n\t\t\t\t  facilities of the language. Our approach is based on\n\t\t\t\t  method annotations, incremental parse tree\n\t\t\t\t  transformations and an optimistic commit protocol.\n\t\t\t\t  We report on a practical case study, benchmarks and\n\t\t\t\t  further and on-going work.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Lukas Renggli and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 2007 International Conference on Dynamic Languages (ICDL 2007)",
		"DOI": "10.1145/1352678.1352692",
		"ISBN": "978-1-60558-084-5",
		"KEYWORDS": "scg07 scg-pub jb08 snf08 reflectivity",
		"MEDIUM": "2",
		"PAGES": "207--221",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM Digital Library",
		"TITLE": "Transactional Memory for Smalltalk",
		"URL": "http://scg.unibe.ch/archive/papers/Reng07bTransMem.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Reng07bTransMem.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1352678.1352692"
	},
	{
		"key": "Reng09a",
		"type": "article",
		"ABSTRACT": "Concurrency control is mostly based on locks and is\n\t\t\t\t  therefore notoriously difficult to use. Even though\n\t\t\t\t  some programming languages provide high-level\n\t\t\t\t  constructs, these add complexity and potentially\n\t\t\t\t  hard-to-detect bugs to the application.\n\t\t\t\t  Transactional memory is an attractive mechanism that\n\t\t\t\t  does not have the drawbacks of locks, however the\n\t\t\t\t  underlying implementation is often difficult to\n\t\t\t\t  integrate into an existing language. In this paper\n\t\t\t\t  we show how we have introduced transactional\n\t\t\t\t  semantics into Smalltalk by using the reflective\n\t\t\t\t  facilities of the language. Our approach is based on\n\t\t\t\t  method annotations, incremental parse tree\n\t\t\t\t  transformations and an optimistic commit protocol.\n\t\t\t\t  The implementation does not depend on modifications\n\t\t\t\t  to the virtual machine and therefore can be changed\n\t\t\t\t  at the language level. We report on a practical case\n\t\t\t\t  study, benchmarks and further and on-going work.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Lukas Renggli and Oscar Nierstrasz",
		"DOI": "10.1016/j.cl.2008.06.001",
		"JOURNAL": "Journal of Computer Languages, Systems and Structures",
		"KEYWORDS": "scg09 scg-pub jb09 snf09",
		"MEDIUM": "2",
		"MISC": "was: Reng08a",
		"MONTH": "April",
		"NUMBER": "1",
		"PAGES": "21--30",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Elsevier",
		"TITLE": "Transactional Memory in a Dynamic Language",
		"URL": "http://scg.unibe.ch/archive/papers/Reng08aTransMemory.pdf",
		"VOLUME": "35",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Reng08aTransMemory.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.cl.2008.06.001"
	},
	{
		"key": "Reng09b",
		"type": "inproceedings",
		"ABSTRACT": "Integration of multiple languages into each other\n\t\t\t\t  and into an existing development environment is a\n\t\t\t\t  difficult task. As a consequence, developers often\n\t\t\t\t  end up using only internal DSLs that strictly rely\n\t\t\t\t  on the constraints imposed by the host language.\n\t\t\t\t  Infrastructures do exist to mix languages, but they\n\t\t\t\t  often do it at the price of losing the development\n\t\t\t\t  tools of the host language. Instead of inventing a\n\t\t\t\t  completely new infrastructure, our solution is to\n\t\t\t\t  integrate new languages deeply into the existing\n\t\t\t\t  host environment and reuse the infrastructure\n\t\t\t\t  offered by it. In this paper we show why Smalltalk\n\t\t\t\t  is the best practical choice for such a host\n\t\t\t\t  language.",
		"ADDRESS": "New York, NY, USA",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Lukas Renggli and Tudor Gîrba",
		"BOOKTITLE": "Proceedings of International Workshop on Smalltalk Technologies (IWST 2009)",
		"DOI": "10.1145/1735935.1735954",
		"ISBN": "978-1-60558-899-5",
		"KEYWORDS": "scg10 scg-pub jb10 snf10 helvetia girba",
		"LOCATION": "Brest, France",
		"MEDIUM": "2",
		"PAGES": "107--113",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM",
		"TITLE": "Why Smalltalk Wins the Host Languages Shootout",
		"URL": "http://scg.unibe.ch/archive/papers/Reng09bLanguageShootout.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Reng09bLanguageShootout.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1735935.1735954"
	},
	{
		"key": "Reng09c",
		"type": "inproceedings",
		"ABSTRACT": "As domain-specific modeling begins to attract\n\t\t\t\t  widespread acceptance, pressure is increasing for\n\t\t\t\t  the development of new domain-specific languages.\n\t\t\t\t  Unfortunately these DSLs typically conflict with the\n\t\t\t\t  grammar of the host language, making it difficult to\n\t\t\t\t  compose hybrid code except at the level of strings;\n\t\t\t\t  few mechanisms (if any) exist to control the scope\n\t\t\t\t  of usage of multiple DSLs; and, most seriously,\n\t\t\t\t  existing host language tools are typically unaware\n\t\t\t\t  of the DSL extensions, thus hampering the\n\t\t\t\t  development process. Language Boxes address these\n\t\t\t\t  issues by offering a simple, modular mechanism to\n\t\t\t\t  encapsulate (i) compositional changes to the host\n\t\t\t\t  language, (ii) transformations to address various\n\t\t\t\t  concerns such as compilation and highlighting, and\n\t\t\t\t  (iii) scoping rules to control visibility of\n\t\t\t\t  language extensions. We describe the design and\n\t\t\t\t  implementation of Language Boxes, and show with the\n\t\t\t\t  help of several examples how modular extensions can\n\t\t\t\t  be introduced to a host language and environment.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Lukas Renggli and Marcus Denker and Oscar Nierstrasz",
		"BOOKTITLE": "Software Language Engineering: Second International Conference, SLE 2009, Denver, Colorado, October 5-6, 2009",
		"DOI": "10.1007/978-3-642-12107-4_20",
		"ISBN": "978-3-642-12106-7",
		"KEYWORDS": "scg09 scg-pub snf10 jb10 helvetia",
		"MEDIUM": "2",
		"PAGES": "274--293",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer",
		"RATEX": "29%",
		"SERIES": "LNCS",
		"TITLE": "Language Boxes: Bending the Host Language with Modular Language Changes",
		"URL": "http://scg.unibe.ch/archive/papers/Reng09cLanguageBoxes.pdf",
		"VOLUME": "5969",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Reng09cLanguageBoxes.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-642-12107-4_20"
	},
	{
		"key": "Reng10a",
		"type": "inproceedings",
		"ABSTRACT": "Domain-specific languages (DSLs) are increasingly\n\t\t\t\t  used as embedded languages within general-purpose\n\t\t\t\t  host languages. DSLs provide a compact, dedicated\n\t\t\t\t  syntax for specifying parts of an application\n\t\t\t\t  related to specialized domains. Unfortunately, such\n\t\t\t\t  language extensions typically do not integrate well\n\t\t\t\t  with the development tools of the host language.\n\t\t\t\t  Editors, compilers and debuggers are either unaware\n\t\t\t\t  of the extensions, or must be adapted at a\n\t\t\t\t  non-trivial cost. We present a novel approach to\n\t\t\t\t  embed DSLs into an existing host language by\n\t\t\t\t  leveraging the underlying representation of the host\n\t\t\t\t  language used by these tools. Helvetia is an\n\t\t\t\t  extensible system that intercepts the compilation\n\t\t\t\t  pipeline of the Smalltalk host language to\n\t\t\t\t  seamlessly integrate language extensions. We\n\t\t\t\t  validate our approach by case studies that\n\t\t\t\t  demonstrate three fundamentally different ways to\n\t\t\t\t  extend or adapt the host language syntax and\n\t\t\t\t  semantics.",
		"ADDRESS": "Maribor, Slovenia",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Lukas Renggli and Tudor Gîrba and Oscar Nierstrasz",
		"BOOKTITLE": "ECOOP'10: Proceedings of the 24th European Conference on Object-Oriented Programming",
		"DOI": "10.1007/978-3-642-14107-2_19",
		"EDITOR": "Theo D'Hondt",
		"ISBN": "978-3-642-14106-5",
		"KEYWORDS": "scg-pub scg10 helvetia girba snf10 jb10 damiencbib",
		"MEDIUM": "2",
		"PAGES": "380--404",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"RATEX": "23%",
		"SERIES": "LNCS",
		"TITLE": "Embedding Languages Without Breaking Tools",
		"URL": "http://scg.unibe.ch/archive/papers/Reng10aEmbeddingLanguages.pdf",
		"VOLUME": "6183",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Reng10aEmbeddingLanguages.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-642-14107-2_19"
	},
	{
		"key": "Reng10b",
		"type": "inproceedings",
		"ABSTRACT": "Lint-like program checkers are popular tools that\n\t\t\t\t  ensure code quality by verifying compliance with\n\t\t\t\t  best practices for a particular programming\n\t\t\t\t  language. The proliferation of internal\n\t\t\t\t  domain-specific languages and models, however, poses\n\t\t\t\t  new challenges for such tools. Traditional program\n\t\t\t\t  checkers produce many false positives and fail to\n\t\t\t\t  accurately check constraints, best practices, common\n\t\t\t\t  errors, possible optimizations and portability\n\t\t\t\t  issues particular to domain-specific languages. We\n\t\t\t\t  advocate the use of dedicated rules to check\n\t\t\t\t  domain-specific practices. We demonstrate the\n\t\t\t\t  implementation of domain-specific rules, the\n\t\t\t\t  automatic fixing of violations, and their\n\t\t\t\t  application to two case-studies: (1) Seaside defines\n\t\t\t\t  several internal DSLs through a creative use of the\n\t\t\t\t  syntax of the host language; and (2) Magritte adds\n\t\t\t\t  meta-descriptions to existing code by means of\n\t\t\t\t  special methods. Our empirical validation\n\t\t\t\t  demonstrates that domain-specific program checking\n\t\t\t\t  significantly improves code quality when compared\n\t\t\t\t  with general purpose program checking.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Lukas Renggli and Stéphane Ducasse and Tudor Gîrba and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 48th International Conference on Objects, Models, Components and Patterns (TOOLS'10)",
		"DOI": "10.1007/978-3-642-13953-6_12",
		"EDITOR": "Jan Vitek",
		"ISNB": "978-3-642-13952-9",
		"KEYWORDS": "scg-pub scg10 helvetia girba snf10 jb10 evol11",
		"PAGES": "213--232",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"RATEX": "29%",
		"SERIES": "LNCS",
		"TITLE": "Domain-Specific Program Checking",
		"URL": "http://scg.unibe.ch/archive/papers/Reng10bDomainSpecificProgramChecking.pdf",
		"VOLUME": "6141",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Reng10bDomainSpecificProgramChecking.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-642-13953-6_12"
	},
	{
		"key": "Reng10c",
		"type": "inproceedings",
		"ABSTRACT": "Grammars for programming languages are traditionally\n\t\t\t\t  specified statically. They are hard to compose and\n\t\t\t\t  reuse due to ambiguities that inevitably arise.\n\t\t\t\t  PetitParser combines ideas from scannerless parsing,\n\t\t\t\t  parser combinators, parsing expression grammars and\n\t\t\t\t  packrat parsers to model grammars and parsers as\n\t\t\t\t  objects that can be reconfigured dynamically.\n\t\t\t\t  Through examples and benchmarks we demonstrate that\n\t\t\t\t  dynamic grammars are not only flexible but highly\n\t\t\t\t  practical.",
		"ADDRESS": "Malaga, Spain",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Lukas Renggli and Stéphane Ducasse and Tudor Gîrba and Oscar Nierstrasz",
		"BOOKTITLE": "4th Workshop on Dynamic Languages and Applications (DYLA 2010)",
		"KEYWORDS": "scg-pub scg10 helvetia petitparser girba skip-doi moose-pub snf10 jb10 hasler10 evol11",
		"MEDIUM": "1",
		"MONTH": "June",
		"PEERREVIEW": "yes",
		"TITLE": "Practical Dynamic Grammars for Dynamic Languages",
		"PAGES": "1--4",
		"URL": "http://scg.unibe.ch/archive/papers/Reng10cDynamicGrammars.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Reng10cDynamicGrammars.pdf"
	},
	{
		"key": "Ress09a",
		"type": "inproceedings",
		"ABSTRACT": "In conventional software applications,\n\t\t\t\t  synchronization code is typically interspersed with\n\t\t\t\t  functional code, thereby impacting understandability\n\t\t\t\t  and maintainability of the code base. At the same\n\t\t\t\t  time, the synchronization defined statically in the\n\t\t\t\t  code is not capable of adapting to different runtime\n\t\t\t\t  situations. We propose a new approach to concurrency\n\t\t\t\t  control which strictly separates the functional code\n\t\t\t\t  from the synchronization requirements to be used and\n\t\t\t\t  which adapts objects to be synchronized dynamically\n\t\t\t\t  to their environment. First-class synchronization\n\t\t\t\t  specifications express safety requirements, and a\n\t\t\t\t  dynamic synchronization system dynamically adapts\n\t\t\t\t  objects to different runtime situations. We present\n\t\t\t\t  an overview of a prototype of our approach together\n\t\t\t\t  with several classical concurrency problems, and we\n\t\t\t\t  discuss open issues for further research.",
		"ADDRESS": "New York, NY, USA",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Jorge Ressia and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of International Workshop on Smalltalk Technologies (IWST 2009)",
		"DOI": "10.1145/1735935.1735952",
		"ISBN": "978-1-60558-899-5",
		"KEYWORDS": "scg10 scg-pub jb10 snf10",
		"LOCATION": "Brest, France",
		"MEDIUM": "2",
		"PAGES": "101--106",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM",
		"TITLE": "Dynamic Synchronization — A Synchronization Model through Behavioral Reflection",
		"URL": "http://scg.unibe.ch/archive/papers/Ress09aDynamicSynchronization.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Ress09aDynamicSynchronization.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1735935.1735952"
	},
	{
		"key": "Ress10a",
		"type": "inproceedings",
		"ABSTRACT": "Software must be constantly adapted due to evolving\n\t\t\t\t  domain knowledge and unanticipated requirements\n\t\t\t\t  changes. To adapt a system at run-time we need to\n\t\t\t\t  reflect on its structure and its behavior.\n\t\t\t\t  Object-oriented languages introduced reflection to\n\t\t\t\t  deal with this issue, however, no reflective\n\t\t\t\t  approach up to now has tried to provide a unified\n\t\t\t\t  solution to both structural and behavioral\n\t\t\t\t  reflection. This paper describes Albedo, a unified\n\t\t\t\t  approach to structural and behavioral reflection.\n\t\t\t\t  Albedo is a model of fined-grained unanticipated\n\t\t\t\t  dynamic structural and behavioral adaptation.\n\t\t\t\t  Instead of providing reflective capabilities as an\n\t\t\t\t  external mechanism we integrate them deeply in the\n\t\t\t\t  environment. We show how explicit meta-objects allow\n\t\t\t\t  us to provide a range of reflective features and\n\t\t\t\t  thereby evolve both application models and\n\t\t\t\t  environments at run-time.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Jorge Ressia and Lukas Renggli and Tudor Gîrba and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 5th Workshop on Models@run.time at the ACM/IEEE 13th International Conference on Model Driven Engineering Languages and Systems (MODELS 2010)",
		"KEYWORDS": "snf10 jb11 scg-pub skip-doi girba scg10 bifrost",
		"MEDIUM": "2",
		"MONTH": "October",
		"NOTE": "http://sunsite.informatik.rwth-aachen.de/Publications/CEUR-WS/Vol-641/",
		"PAGES": "37--48",
		"PEERREVIEW": "yes",
		"TITLE": "Run-Time Evolution through Explicit Meta-Objects",
		"URL": "http://scg.unibe.ch/archive/papers/Ress10a-RuntimeEvolution.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Ress10a-RuntimeEvolution.pdf"
	},
	{
		"key": "Ress11a",
		"type": "inproceedings",
		"ABSTRACT": "Reuse in object-oriented languages typically focuses on inheritance.\n\t\t\t\t  Numerous techniques have been developed to provide finer-grained reuse\n\t\t\t\t  of methods, such as flavors, mixins and traits. These techniques,\n\t\t\t\t  however, only deal with reuse at the level of classes. Class-based\n\t\t\t\t  reuse is inherently static. Increasing use of reflection and\n\t\t\t\t  meta-programming techniques in real world applications underline the\n\t\t\t\t  need for more dynamic approaches. New approaches have shifted to\n\t\t\t\t  object-specific reuse. However, these techniques fail to provide a\n\t\t\t\t  complete solution to the composition issues arising during reuse.\n\t\t\t\t  We propose a new approach that deals with reuse at the object level\n\t\t\t\t  and that supports behavioral composition. We introduce a new\n\t\t\t\t  abstraction called a talent which models features that are shared\n\t\t\t\t  between objects of different class hierarchies. Talents provide\n\t\t\t\t  a composition mechanism that is as flexible as that of traits but\n\t\t\t\t  which is dynamic.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Jorge Ressia and Tudor Gîrba and Oscar Nierstrasz and Fabrizio Perin and Lukas Renggli",
		"BOOKTITLE": "Proceedings of International Workshop on Smalltalk Technologies (IWST 2011)",
		"DOI": "10.1145/2166929.2166940",
		"KEYWORDS": "scg11 scg-pub jb11 snf11 bifrost talents girba",
		"MEDIUM": "2",
		"PAGES": "109--118",
		"PEERREVIEW": "yes",
		"TITLE": "Talents: Dynamically Composable Units of Reuse",
		"URL": "http://scg.unibe.ch/archive/papers/Ress11a-Talents.pdf",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Ress11a-Talents.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/2166929.2166940"
	},
	{
		"key": "Ress12a",
		"type": "inproceedings",
		"ABSTRACT": "During the process of developing and maintaining a complex\n\t\t\t\t  software system, developers pose detailed questions about the\n\t\t\t\t  runtime behavior of the system. Source code views offer strictly\n\t\t\t\t  limited insights, so developers often turn to tools like debuggers\n\t\t\t\t  to inspect and interact with the running system. Unfortunately,\n\t\t\t\t  traditional debuggers focus on the runtime stack as the key\n\t\t\t\t  abstraction to support debugging operations, though the questions\n\t\t\t\t  developers pose often have more to do with objects and their\n\t\t\t\t  interactions.\n\t\t\t\t  We propose object-centric debugging as an alternative approach\n\t\t\t\t  to interacting with a running software system. We show how, by\n\t\t\t\t  focusing on objects as the key abstraction, natural debugging\n\t\t\t\t  operations can be defined to answer developer questions related\n\t\t\t\t  to runtime behavior. We present a running prototype of an\n\t\t\t\t  object-centric debugger, and demonstrate, with the help of a series\n\t\t\t\t  of examples, how object-centric debugging offers more effective\n\t\t\t\t  support for many typical developer tasks than a traditional\n\t\t\t\t  stack-oriented debugger.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Ressia, Jorge and Bergel, Alexandre and Nierstrasz, Oscar",
		"BOOKTITLE": "Proceedings of the 34rd international conference on Software engineering",
		"DOI": "10.1109/ICSE.2012.6227167",
		"KEYWORDS": "scg12 scg-pub jb12 snf12 reflection bifrost ocdebugging",
		"LOCATION": "Zurich, Switzerland",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"SERIES": "ICSE '12",
		"TITLE": "Object-Centric Debugging",
		"URL": "http://scg.unibe.ch/archive/papers/Ress12a-ObjectCentricDebugging.pdf",
		"YEAR": "2012",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Ress12a-ObjectCentricDebugging.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSE.2012.6227167"
	},
	{
		"key": "Ress12b",
		"type": "article",
		"ABSTRACT": "Domain-specific languages and models are increasingly used within\n\t\t\t\t  general-purpose host languages. While traditional profiling tools\n\t\t\t\t  perform well on host language code itself, they often fail to provide\n\t\t\t\t  meaningful results if the developers start to build and use abstractions\n\t\t\t\t  on top of the host language. In this paper we motivate the need for\n\t\t\t\t  dedicated profiling tools with three different case studies. Furthermore,\n\t\t\t\t  we present an infrastructure that enables developers to quickly prototype\n\t\t\t\t  new profilers for their domain-specific languages and models.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Jorge Ressia and Alexandre Bergel and Oscar Nierstrasz and Lukas Renggli",
		"DOI": "10.5381/jot.2012.11.1.a5",
		"ISSN": "1660-1769",
		"JOURNAL": "Journal of Object Technology",
		"KEYWORDS": "scg12 scg-pub jb12 snf12 reflection bifrost metaspy",
		"MEDIUM": "2",
		"MONTH": "April",
		"NUMBER": "1",
		"PAGES": "1-21",
		"PEERREVIEW": "yes",
		"TITLE": "Modeling Domain-Specific Profilers",
		"URL": "http://www.jot.fm/issues/issue_2012_04/article5.pdf",
		"VOLUME": "11",
		"YEAR": "2012",
		"BDSK-URL-1": "http://www.jot.fm/issues/issue_2012_04/article5.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.5381/jot.2012.11.1.a5"
	},
	{
		"key": "Ress12c",
		"type": "inproceedings",
		"ABSTRACT": "The way programming languages manage memory has been\n\t\t\t\t  a hot topic for many years. Languages with garbage\n\t\t\t\t  collection (GC) removed the burden of memory management\n\t\t\t\t  from developers. Typically the garbage collection\n\t\t\t\t  infrastructure is a black box that developers have\n\t\t\t\t  no control over. This is particularly striking in\n\t\t\t\t  object-oriented systems, where objects themselves\n\t\t\t\t  have no way to control their life and death. Instead\n\t\t\t\t  an external process (the GC) decides if an object is\n\t\t\t\t  still needed or not. In this paper we propose suicide\n\t\t\t\t  objects, objects that make their own decisions about\n\t\t\t\t  their life and death. With two examples we demonstrate\n\t\t\t\t  how the traditional garbage collector can be replaced,\n\t\t\t\t  and how developers can benefit from an object-centric\n\t\t\t\t  memory management.",
		"ACMID": "2307197",
		"ADDRESS": "New York, NY, USA",
		"ANNOTE": "internationalworkshop",
		"ARTICLENO": "1",
		"AUTHOR": "Jorge Ressia and Fabrizio Perin and Lukas Renggli",
		"BOOKTITLE": "Proceedings of the 6th Workshop on Dynamic Languages and Applications",
		"DOI": "10.1145/2307196.2307197",
		"ISBN": "978-1-4503-1507-4",
		"KEYWORDS": "scg-pub scg12 snf12 jb12 ressia",
		"LOCATION": "Beijing, China",
		"MEDIUM": "1",
		"NUMPAGES": "2",
		"PAGES": "1:1--1:2",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM",
		"SERIES": "DYLA '12",
		"TITLE": "Suicide Objects",
		"URL": "http://scg.unibe.ch/archive/papers/Ress12cSuicideObjects.pdf",
		"YEAR": "2012",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Ress12cSuicideObjects.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/2307196.2307197"
	},
	{
		"key": "Ress12e",
		"type": "article",
		"ABSTRACT": "Reuse in object-oriented languages typically focuses on\n\t\t\t\t  inheritance. Numerous techniques have been developed to\n\t\t\t\t  provide finer-grained reuse of methods, such as flavors,\n\t\t\t\t  mixins, and traits. These techniques, however, only deal\n\t\t\t\t  with reuse at the level of classes. Class-based reuse is\n\t\t\t\t  inherently static. Increasing use of reflection and meta-\n\t\t\t\t  programming techniques in real-world applications underlines\n\t\t\t\t  the need for more dynamic approaches. New approaches have\n\t\t\t\t  shifted to object-specific reuse. However, these techniques\n\t\t\t\t  fail to provide a complete solution to the composition\n\t\t\t\t  issues arising during reuse. We propose a new approach that\n\t\t\t\t  deals with reuse at the object level and that supports\n\t\t\t\t  behavioral and state composition. We introduce a new\n\t\t\t\t  abstraction called a talent that models features that are\n\t\t\t\t  shared between objects of different class hierarchies.\n\t\t\t\t  Talents provide a composition mechanism that is as flexible\n\t\t\t\t  as that of traits but that is dynamic.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Jorge Ressia and Tudor Gîrba and Oscar Nierstrasz and Fabrizio Perin and Lukas Renggli",
		"DOI": "10.1002/spe.2160",
		"ISSN": "1097-024X",
		"JOURNAL": "Software: Practice and Experience",
		"KEYWORDS": "snf12 jb12 scg-pub scg12 bifrost talents reflection traits Mixins object-specific smalltalk girba",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"PUBLISHER": "John Wiley & Sons, Ltd",
		"TITLE": "Talents: an environment for dynamically composing units of reuse",
		"URL": "http://scg.unibe.ch/archive/papers/Ress12eTalentsSPE.pdf",
		"YEAR": "2012",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Ress12eTalentsSPE.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1002/spe.2160"
	},
	{
		"key": "Rich97a",
		"type": "inproceedings",
		"ABSTRACT": "We have identified two levels of restructuring in\n\t\t\t\t  the re-engineering of object-oriented legacy\n\t\t\t\t  systems: high-level restructuring is concerned with\n\t\t\t\t  improving the overall architecture of the system,\n\t\t\t\t  whereas low-level restructuring deals with repairing\n\t\t\t\t  local problems which are symptoms of bad style. We\n\t\t\t\t  propose to characterize these low-level problems as\n\t\t\t\t  patterns of dependencies between classes as an aid\n\t\t\t\t  in detecting and resolving them. In this paper we\n\t\t\t\t  briefly present low-level problems and give two\n\t\t\t\t  examples of how these can be characterized as\n\t\t\t\t  specific dependency patterns.",
		"AUTHOR": "Tamar Richner and Robb Nebbe",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP '97 Workshop Reader)",
		"EDITOR": "Jan Bosch and Stuart Mitchell",
		"KEYWORDS": "olit famoos-papunr scglit oobib scg-pub skip-doi toBeChecked snf97 scg-none jb97",
		"MONTH": "June",
		"PAGES": "266--267",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Analyzing Dependencies to Solve Low-Level Problems",
		"URL": "http://scg.unibe.ch/archive/papers/Rich97aLowLevel.pdf",
		"VOLUME": "1357",
		"YEAR": "1997",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Rich97aLowLevel.pdf"
	},
	{
		"key": "Rich98a",
		"type": "inproceedings",
		"ABSTRACT": "In this paper we argue for the necessity of an\n\t\t\t\t  architectural description of a framework. We then\n\t\t\t\t  analyze why design patterns on their own are\n\t\t\t\t  insufficient for such a description and propose that\n\t\t\t\t  a variety of complementary forms of documentation\n\t\t\t\t  are needed to address the requirements of an\n\t\t\t\t  architectural description. We claim that traditional\n\t\t\t\t  artifacts of domain analysis and object-oriented\n\t\t\t\t  design can better capture the architecture of a\n\t\t\t\t  framework by describing the design solutions in the\n\t\t\t\t  problem context at a higher level of granularity\n\t\t\t\t  than can design patterns.",
		"AUTHOR": "Tamar Richner",
		"BOOKTITLE": "Proceedings of the ECOOP '98 Workshop on Object-Oriented Software Architectures",
		"EDITOR": "Jan Bosch and Helene Bachatene and Görel Hedin and Kai Koskimies",
		"KEYWORDS": "olit famoos-papunr scglit oobib scg-pub skip-doi toBeChecked snf98 scg-none jb98",
		"MONTH": "July",
		"PUBLISHER": "University of Karlskrona",
		"SERIES": "Research Report 13/98",
		"TITLE": "Describing Framework Architectures: more than Design Patterns",
		"URL": "http://scg.unibe.ch/archive/papers/Rich98aFrameworkArch.pdf",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Rich98aFrameworkArch.pdf"
	},
	{
		"key": "Rich98b",
		"type": "inproceedings",
		"ABSTRACT": "Understanding how components in an application\n\t\t\t\t  interact to ensure a certain functionality is an\n\t\t\t\t  essential aspect of understanding a software\n\t\t\t\t  application. To obtain this kind of information an\n\t\t\t\t  analysis of the dynamic behavior of an application\n\t\t\t\t  is more appropriate than a static analysis of the\n\t\t\t\t  code. Understanding dynamic behavior through event\n\t\t\t\t  analysis is a challenge because of the large amount\n\t\t\t\t  of data gathered through program executions. In this\n\t\t\t\t  paper, we show how we define declarative queries\n\t\t\t\t  that allow us to filter the event data collected and\n\t\t\t\t  to define new abstractions which aid in program\n\t\t\t\t  understanding.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Tamar Richner and Stéphane Ducasse and Roel Wuyts",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP '98 Workshop Reader)",
		"EDITOR": "Serge Demeyer and Jan Bosch",
		"KEYWORDS": "olit famoos-papunr scglit oobib scg-pub skip-doi toBeChecked snf98 scg-none jb98 stefPub",
		"MONTH": "July",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Understanding Object-Oriented Programs with Declarative Event Analysis",
		"URL": "http://scg.unibe.ch/archive/papers/Rich98bEvents.pdf",
		"VOLUME": "1543",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Rich98bEvents.pdf"
	},
	{
		"key": "Rich99a",
		"type": "inproceedings",
		"ABSTRACT": "Recovering architectural documentation from code is\n\t\t\t\t  crucial to maintaining and reengineering software\n\t\t\t\t  systems. Reverse engineering and program\n\t\t\t\t  understanding approaches are often limited by the\n\t\t\t\t  fact that (1) they propose a fixed set of predefined\n\t\t\t\t  views and (2) they consider either purely static or\n\t\t\t\t  purely dynamic views of the application. In this\n\t\t\t\t  paper we present an environment supporting the\n\t\t\t\t  generation of tailorable views of object-oriented\n\t\t\t\t  systems from both static and dynamic information.\n\t\t\t\t  Our approach is based on the combination of\n\t\t\t\t  user-defined queries which allow an engineer to\n\t\t\t\t  create high-level abstractions and to produce views\n\t\t\t\t  using these abstractions.",
		"ACCEPTNUM": "49",
		"ACCEPTTOTAL": "100",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Tamar Richner and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of 15th IEEE International Conference on Software Maintenance (ICSM'99)",
		"DOI": "10.1109/ICSM.1999.792487",
		"EDITOR": "Hongji Yang and Lee White",
		"KEYWORDS": "olit famoos-papref scg-pub toBeChecked snf99 scg-none jb99 oorp stefPub",
		"MISC": "acceptance rate: 49/100 = 49",
		"MONTH": "September",
		"PAGES": "13--22",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Recovering High-Level Views of Object-Oriented Applications from Static and Dynamic Information",
		"URL": "http://scg.unibe.ch/archive/papers/Rich99aRecoveringViews.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Rich99aRecoveringViews.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.1999.792487"
	},
	{
		"key": "Rich99b",
		"type": "inproceedings",
		"ABSTRACT": "Tracking the evolution of a software system through\n\t\t\t\t  time gives us valuable information. It suggests\n\t\t\t\t  which parts are likely to remain stable and which\n\t\t\t\t  'problem' aspects are likely to change, and it gives\n\t\t\t\t  us insight into some of the design choices made. In\n\t\t\t\t  this paper we show how recovered views of succesive\n\t\t\t\t  versions of the same software system can be used to\n\t\t\t\t  track evolution. We first briefly describe our\n\t\t\t\t  approach for recovering views of software\n\t\t\t\t  applications. We then compare views of two versions\n\t\t\t\t  of the HotDraw framework. Our objective is to\n\t\t\t\t  illustrate a number of issues concerning\n\t\t\t\t  architectural evolution: what is architectural\n\t\t\t\t  change as opposed to change in general? how can we\n\t\t\t\t  detect architectural drift? how can we evaluate the\n\t\t\t\t  relative quality of different architectural\n\t\t\t\t  solutions? what are guidelines for building\n\t\t\t\t  evolvable software?",
		"AUTHOR": "Tamar Richner",
		"BOOKTITLE": "ECOOP '99 Workshop Reader",
		"KEYWORDS": "olit famoos-papunr scglit oobib scg-pub skip-doi snf99 scg-none jb99",
		"MONTH": "June",
		"NUMBER": "1743",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Using Recovered Views to Track Architectural Evolution",
		"URL": "http://scg.unibe.ch/archive/famoos/Rich99b/ecoop99.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/famoos/Rich99b/ecoop99.pdf"
	},
	{
		"key": "Rich02a",
		"type": "inproceedings",
		"ABSTRACT": "Modeling object-oriented applications using\n\t\t\t\t  collaborations and roles is now well accepted.\n\t\t\t\t  Collaboration-based or role-based designs decompose\n\t\t\t\t  an application into tasks performed by a subset of\n\t\t\t\t  the applications' classes. Collaborations prov ide a\n\t\t\t\t  larger unit of understanding and reuse than classes,\n\t\t\t\t  and are an important aid in the maintenance and\n\t\t\t\t  evolution of the software. This kind of design\n\t\t\t\t  information is lost, however, at the implementation\n\t\t\t\t  level, making it hard to maintain and evolve an e\n\t\t\t\t  xisting software application. The extraction of\n\t\t\t\t  collaborations from code is therefore an important\n\t\t\t\t  issue in design recovery. In this paper we propose\n\t\t\t\t  an iterative approach which uses dynamic information\n\t\t\t\t  to support the recovery and understanding of collabo\n\t\t\t\t  rations. We describe a tool we have developed to\n\t\t\t\t  support our approach and demonstrate its use on a\n\t\t\t\t  case study.",
		"ACCEPTNUM": "61",
		"ACCEPTTOTAL": "127",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Tamar Richner and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of 18th IEEE International Conference on Software Maintenance (ICSM'02)",
		"DOI": "10.1109/ICSM.2002.1167745",
		"KEYWORDS": "scg-pub snf02 scg-none jb02 stefPub",
		"MISC": "acceptance rate: 61/127 = 48",
		"MONTH": "October",
		"PAGES": "34",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "Using Dynamic Information for the Iterative Recovery of Collaborations and Roles",
		"URL": "http://scg.unibe.ch/archive/papers/Rich02aRolesExtractionICSM2002.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Rich02aRolesExtractionICSM2002.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.2002.1167745"
	},
	{
		"key": "Rieg98a",
		"type": "inproceedings",
		"ABSTRACT": "Code duplication is considered as bad practice that\n\t\t\t\t  complicates the maintenance and evolution of\n\t\t\t\t  software. Detecting duplicated code is a difficult\n\t\t\t\t  task because of the large amount of data to be\n\t\t\t\t  checked and the fact that a priori it is unknown\n\t\t\t\t  which code part has been duplicated. In this paper,\n\t\t\t\t  we present a tool called DUPLOC that supports code\n\t\t\t\t  duplication detection in a visual and exploratory or\n\t\t\t\t  an automatic way.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Matthias Rieger and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings ECOOP Workshop on Experiences in Object-Oriented Re-Engineering",
		"EDITOR": "Stéphane Ducasse and Joachim Weisbrod",
		"KEYWORDS": "scg-none jb98 famoos-papunr snf98 scg-pub skip-doi",
		"NUMBER": "6/7/98",
		"PUBLISHER": "Forschungszentrum Informatik Karlsruhe",
		"SERIES": "FZI Report",
		"TITLE": "Visual Detection of Duplicated Code",
		"URL": "http://scg.unibe.ch/archive/papers/Rieg98aEcoopWorkshop.pdf",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Rieg98aEcoopWorkshop.pdf"
	},
	{
		"key": "Rieg98b",
		"type": "inproceedings",
		"ABSTRACT": "Code duplication is considered as bad practice that\n\t\t\t\t  complicates the maintenance and evolution of\n\t\t\t\t  software. Detecting duplicated code is a difficult\n\t\t\t\t  task because of the large amount of data to be\n\t\t\t\t  checked and the fact that a priori it is unknown\n\t\t\t\t  which code part has been duplicated. In this paper,\n\t\t\t\t  we present a tool called DUPLOC that supports code\n\t\t\t\t  duplication detection in a visual and exploratory or\n\t\t\t\t  an automatic way.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Matthias Rieger and Stéphane Ducasse",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP '98 Workshop Reader)",
		"EDITOR": "Serge Demeyer and Jan Bosch",
		"KEYWORDS": "olit famoos-papunr reveng scg-pub skip-doi scg-none jb-none stefPub",
		"MONTH": "July",
		"PAGES": "75--76",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Visual Detection of Duplicated Code",
		"URL": "http://scg.unibe.ch/archive/papers/Rieg98aEcoopWorkshop.pdf",
		"VOLUME": "1543",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Rieg98aEcoopWorkshop.pdf"
	},
	{
		"key": "Rieg99a",
		"type": "inproceedings",
		"ABSTRACT": "Code duplication is an important problem in\n\t\t\t\t  application maintenance. Tools exist that support\n\t\t\t\t  code duplication detection. However, few of them\n\t\t\t\t  propose a solution for the problem, i.e.\n\t\t\t\t  refactorings. We propose an approach that uses the\n\t\t\t\t  information given by code duplication detection to\n\t\t\t\t  guide the refactorings of OO applications.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Matthias Rieger and Stéphane Ducasse and Georges Golomingi",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP '99 Workshop Reader)",
		"KEYWORDS": "olit scg-pub skip-doi scg-none jb-none",
		"NUMBER": "1743",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Tool Support for Refactoring Duplicated OO Code",
		"URL": "http://scg.unibe.ch/archive/papers/Rieg99aToolSuppRefacOOCode.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Rieg99aToolSuppRefacOOCode.pdf"
	},
	{
		"key": "Rieg04a",
		"type": "techreport",
		"ABSTRACT": "Duplicated code can have a severe, negative impact\n\t\t\t\t  on the maintainability of large software systems.\n\t\t\t\t  Techniques for detecting duplicated code exist but\n\t\t\t\t  they rely mostly on parsers, technology that is\n\t\t\t\t  often fragile in the face of different languages and\n\t\t\t\t  dialects. In this paper we show that a lightweight\n\t\t\t\t  approach based on simple string-matching can be\n\t\t\t\t  effectively used to detect a significant amount of\n\t\t\t\t  code duplication. The approach scales well, and can\n\t\t\t\t  be easily adapted to different languages and\n\t\t\t\t  contexts. We validate our approach by applying it to\n\t\t\t\t  a number of industrial and open source case studies,\n\t\t\t\t  involving five different implementation languages\n\t\t\t\t  and ranging from 256KB to 13MB of source code.\n\t\t\t\t  Finally, we compare our approach to a more\n\t\t\t\t  sophisticated one employing parameterized matching,\n\t\t\t\t  and demonstrate that little if anything is gained by\n\t\t\t\t  adopting a more heavyweight approach.",
		"AUTHOR": "Matthias Rieger",
		"INSTITUTION": "University of Bern, Institute of Applied Mathematics and Computer Science",
		"KEYWORDS": "olit scg-pub skip-doi scg-none jb05 clones duploc recast05",
		"NUMBER": "iam-04-002",
		"TITLE": "Experiments on Language Independent Duplication Detection",
		"URL": "http://scg.unibe.ch/archive/papers/Rieg04a-IAM-04-002.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Rieg04a-IAM-04-002.pdf"
	},
	{
		"key": "Rieg04b",
		"type": "inproceedings",
		"ABSTRACT": "Duplication of code is a common phenomenon in the\n\t\t\t\t  development and maintenance of large software\n\t\t\t\t  systems. The detection and removal of duplicated\n\t\t\t\t  code has become a standard activity during the\n\t\t\t\t  refactoring phases of a software life-cycle.\n\t\t\t\t  However, code duplication identification ends to\n\t\t\t\t  produce large amounts of data making the\n\t\t\t\t  understanding of the duplication situation as a\n\t\t\t\t  whole difficult. Reengineers can easily lose sight\n\t\t\t\t  of the forest for the trees. There is a need to\n\t\t\t\t  support a qualitative analysis of the duplicated\n\t\t\t\t  code. In this paper we propose a number of\n\t\t\t\t  visualzations of duplicated source elements that\n\t\t\t\t  support reengineers in answering questions, e.g.,\n\t\t\t\t  which parts of the sysem are connected by copied\n\t\t\t\t  code or which parts of the sysem are copied the\n\t\t\t\t  most.",
		"ACCEPTNUM": "28",
		"ACCEPTTOTAL": "78",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Matthias Rieger and Stéphane Ducasse and Michele Lanza",
		"BOOKTITLE": "Proceedings of 11th Working Conference on Reverse Engineering (WCRE'04)",
		"CVS": "DuplocVizPaper",
		"DOI": "10.1109/WCRE.2004.25",
		"KEYWORDS": "olit scg-pub scg-none jb05 recast05 stefPub clones",
		"LOCATION": "Delft, The Netherlands",
		"MISC": "acceptance rate: 28/78 = 36",
		"MONTH": "November",
		"PAGES": "100--109",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "Insights into System-Wide Code Duplication",
		"URL": "http://scg.unibe.ch/archive/papers/Rieg04bWCRE2004ClonesVisualization.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Rieg04bWCRE2004ClonesVisualization.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2004.25"
	},
	{
		"key": "Robb05b",
		"type": "inproceedings",
		"ABSTRACT": "Understanding classes and methods is a key activity\n\t\t\t\t  in object-oriented programming, since classes\n\t\t\t\t  represent the primary abstractions from which\n\t\t\t\t  applications are built, while methods contain the\n\t\t\t\t  actual program logic. The main problem of this task\n\t\t\t\t  is to quickly grasp the purpose and inner structure\n\t\t\t\t  of a class. To achieve this goal, one must be able\n\t\t\t\t  to overview multiple methods at once. In this paper,\n\t\t\t\t  we present microprints, pixel-based representations\n\t\t\t\t  of methods enriched with semantical information. We\n\t\t\t\t  present three specialized microprints each dealing\n\t\t\t\t  with a specific aspect we want to understand of\n\t\t\t\t  methods: (1) state access, (2) control flow, and (3)\n\t\t\t\t  invocation relationship. We present the microprints\n\t\t\t\t  in conjunction with the class blueprints of the CODE\n\t\t\t\t  CRAWLER visualization tool [12] and also integrated\n\t\t\t\t  into the default code browser of the Smalltalk\n\t\t\t\t  VisualWorks development environment.",
		"AERES": "ACT",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Romain Robbes and Stéphane Ducasse and Michele Lanza",
		"BOOKTITLE": "Proceedings of 13th International Smalltalk Conference (ISC'05)",
		"INRIA": "hors",
		"KEYWORDS": "scg-pub skip-doi stefPub snf05 scg-none jb06 listic",
		"PAGES": "131--157",
		"SELECTIF": "non",
		"TITLE": "Microprints: A Pixel-based Semantically Rich Visualization of Methods",
		"URL": "http://scg.unibe.ch/archive/papers/Robb05b-microprintsESUG.pdf",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Robb05b-microprintsESUG.pdf"
	},
	{
		"key": "Robb11a",
		"type": "inproceedings",
		"ABSTRACT": "When the Application Programming Interface (API) of a framework or library changes, its clients must be adapted. This change propagation — known as a ripple effect — is a problem that has garnered interest: several approaches have been proposed in the literature to react to these changes.\n\t\t\tAlthough studies of ripple effects exist at the single system level, no study has been performed on the actual extend and impact of these API changes in practice on an entire software ecosystem associated with a community of developers. This paper reports on early results of such an empirical study of API changes that led to ripple effects across an entire ecosystem. Our case study subject is the development community gravitating around the Squeak and Pharo software ecosystems: six years of evolution, nearly 3,000 contributors, and close to 2,500 distinct systems.\n\t\t\t",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Romain Robbes and Mircea Lungu",
		"BOOKTITLE": "Proceedings of the 33rd International Conference on Software Engineering (ICSE 2011)",
		"DOI": "10.1145/1985793.1985940",
		"KEYWORDS": "scg-bigdata scg-pub scg11 snf11 jb11 sde-ecosystems ercim11",
		"MEDIUM": "2",
		"MONTH": "May",
		"PAGES": "904-907",
		"PEERREVIEW": "yes",
		"TITLE": "A Study of Ripple Effects in Software Ecosystems (NIER)",
		"URL": "http://scg.unibe.ch/archive/papers/Robb11aRipples.pdf",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Robb11aRipples.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1985793.1985940"
	},
	{
		"key": "Robb12a",
		"type": "inproceedings",
		"ABSTRACT": "When the Application Programming Interface (API) of a framework or library changes, its clients must be adapted. This change propagation — known as a ripple effect — is a problem that has garnered interest: several approaches have been proposed in the literature to react to these changes. Although studies of ripple effects exist at the single system level, no study has been performed on the actual extent and impact of these API changes in practice, on an entire software ecosystem associated with a community of developers. This paper reports on an empirical study of API deprecations that led to ripple effects across an entire ecosystem. Our case study subject is the development community gravitating around the Squeak and Pharo software ecosystems: seven years of evolution, more than 3,000 contributors, and more than 2,600 distinct systems. We analyzed 577 methods and 186 classes that were deprecated, and answer research questions regarding the frequency, magnitude, duration, adaptation, and consistency of the ripple effects triggered by API changes.",
		"AUTHOR": "Romain Robbes and Mircea Lungu and David Roethlisberger",
		"BOOKTITLE": "Proceedings of the 20th International Symposium on the\t\t Foundations of Software Engineering (FSE'12)",
		"DOI": "10.1145/2393596.2393662",
		"KEYWORDS": "scg-pub snf12 sde-ecosystems roethlisberger scg12 jb13",
		"MEDIUM": "2",
		"PAGES": "56:1 - 56:11",
		"PEERREVIEW": "yes",
		"TITLE": "How Do Developers React to API Deprecation? The Case of a Smalltalk Ecosystem",
		"URL": "http://scg.unibe.ch/archive/papers/Rob12aAPIDeprecations.pdf",
		"YEAR": "2012",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Rob12aAPIDeprecations.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/2393596.2393662"
	},
	{
		"key": "Roet07b",
		"type": "inproceedings",
		"ABSTRACT": "Dynamic, unanticipated adaptation of running systems\n\t\t\t\t  is of interest in a variety of situations, ranging\n\t\t\t\t  from functional upgrades to on-the-fly debugging or\n\t\t\t\t  monitoring of critical applications. In this paper\n\t\t\t\t  we study a particular form of computational\n\t\t\t\t  reflection, called unanticipated partial behavioral\n\t\t\t\t  reflection, which is particularly well-suited for\n\t\t\t\t  unanticipated adaptation of real-world systems. Our\n\t\t\t\t  proposal combines the dynamicity of unanticipated\n\t\t\t\t  reflection, i.e., reflection that does not require\n\t\t\t\t  preparation of the code of any sort, and the\n\t\t\t\t  selectivity and efficiency of partial behavioral\n\t\t\t\t  reflection. First, we propose unanticipated partial\n\t\t\t\t  behavioral reflection which enables the developer to\n\t\t\t\t  precisely select the required reifications, to\n\t\t\t\t  flexibly engineer the metalevel and to introduce the\n\t\t\t\t  meta behavior dynamically. Second, we present a\n\t\t\t\t  system supporting unanticipated partial behavioral\n\t\t\t\t  reflection in Squeak Smalltalk, called Geppetto, and\n\t\t\t\t  illustrate its use with a concrete example of a\n\t\t\t\t  Seaside web application. Benchmarks validate the\n\t\t\t\t  applicability of our proposal as an extension to the\n\t\t\t\t  standard reflective abilities of Smalltalk.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "David Röthlisberger and Marcus Denker and Éric Tanter",
		"BOOKTITLE": "Advances in Smalltalk — Proceedings of 14th International Smalltalk Conference (ISC 2006)",
		"DOI": "10.1007/978-3-540-71836-9_3",
		"ISBN": "978-3-540-71835-2",
		"ISSN": "0302-9743",
		"KEYWORDS": "scg07 scg-pub jb07 snf06 roethlisberger reflectivity",
		"MEDIUM": "2",
		"PAGES": "47--65",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer",
		"SERIES": "LNCS",
		"TITLE": "Unanticipated Partial Behavioral Reflection",
		"URL": "http://scg.unibe.ch/archive/papers/Roet07bUPBReflection.pdf",
		"VOLUME": "4406",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet07bUPBReflection.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-540-71836-9_3"
	},
	{
		"key": "Roet07c",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "David Röthlisberger and Orla Greevy and Adrian Lienhard",
		"BOOKTITLE": "Proceedings IEEE International Workshop on Visualizing Software for Understanding (Vissoft 2007) (tool demonstration)",
		"KEYWORDS": "scg07 scg-pub skip-doi skip-abstract snf07 jb07 roethlisberger",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"TITLE": "Feature-centric Environment",
		"URL": "http://scg.unibe.ch/archive/papers/Roet07cFeatureBrowserVissoft.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet07cFeatureBrowserVissoft.pdf"
	},
	{
		"key": "Roet07d",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "David Röthlisberger and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of FAMOOSr 2007 (Ist International Workshop on FAMIX and Moose in Reengineering)",
		"KEYWORDS": "scg07 scg-pub skip-doi skip-abstract snf07 jb07 roethlisberger",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"TITLE": "Combining Development Environments with Reverse Engineering",
		"URL": "http://scg.unibe.ch/archive/papers/Roet07dFamoosrIDEReverseEngineering.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet07dFamoosrIDEReverseEngineering.pdf"
	},
	{
		"key": "Roet07e",
		"type": "inproceedings",
		"ABSTRACT": "Development environments typically present the\n\t\t\t\t  software engineer with a structural perspective of\n\t\t\t\t  an object-oriented system in terms of packages,\n\t\t\t\t  classes and methods. From a structural perspective\n\t\t\t\t  it is difficult to gain an understanding of how\n\t\t\t\t  source entities participate in a system's features\n\t\t\t\t  at runtime. In this paper we evaluate the usefulness\n\t\t\t\t  of offering an alternative feature-centric\n\t\t\t\t  perspective of a software system when performing\n\t\t\t\t  maintenance activities. We present a feature-centric\n\t\t\t\t  environment combining interactive visual\n\t\t\t\t  representations of features with a source code\n\t\t\t\t  browser displaying only the classes and methods\n\t\t\t\t  participating in a feature under investigation. To\n\t\t\t\t  validate the usefulness of our feature-centric view,\n\t\t\t\t  we conducted a controlled empirical experiment where\n\t\t\t\t  we measured and compared the performance of subjects\n\t\t\t\t  when correcting two defects in an unfamiliar\n\t\t\t\t  software system with a traditional development\n\t\t\t\t  environment and with our feature-centric\n\t\t\t\t  environment. We evaluate both quantitative and\n\t\t\t\t  qualitative data to draw conclusions about the\n\t\t\t\t  usefulness of a feature-centric perspective to\n\t\t\t\t  support program comprehension during maintenance\n\t\t\t\t  activities.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "David Röthlisberger and Orla Greevy and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 2007 International Conference on Dynamic Languages (ICDL 2007)",
		"DOI": "10.1145/1352678.1352684",
		"KEYWORDS": "scg07 scg-pub snf07 jb08 roethlisberger snf-bmcc",
		"MEDIUM": "2",
		"PAGES": "79--100",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM Digital Library",
		"TITLE": "Feature Driven Browsing",
		"URL": "http://scg.unibe.ch/archive/papers/Roet07eFeatureBrowser.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet07eFeatureBrowser.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1352678.1352684"
	},
	{
		"key": "Roet08a",
		"type": "article",
		"ABSTRACT": "Dynamic, unanticipated adaptation of running systems\n\t\t\t\t  is of interest in a variety of situations, ranging\n\t\t\t\t  from functional upgrades to on-the-fly debugging or\n\t\t\t\t  monitoring of critical applications. In this paper\n\t\t\t\t  we study a particular form of computational\n\t\t\t\t  reflection, called unanticipated partial behavioral\n\t\t\t\t  reflection, which is particularly well-suited for\n\t\t\t\t  unanticipated adaptation of real-world systems. Our\n\t\t\t\t  proposal combines the dynamicity of unanticipated\n\t\t\t\t  reflection, i.e. reflection that does not require\n\t\t\t\t  preparation of the code of any sort, and the\n\t\t\t\t  selectivity and efficiency of partial behavioral\n\t\t\t\t  reflection. First, we propose unanticipated partial\n\t\t\t\t  behavioral reflection which enables the developer to\n\t\t\t\t  precisely select the required reifications, to\n\t\t\t\t  flexibly engineer the metalevel and to introduce the\n\t\t\t\t  meta behavior dynamically. Second, we present a\n\t\t\t\t  system supporting unanticipated partial behavioral\n\t\t\t\t  reflection in Squeak Smalltalk, called Geppetto, and\n\t\t\t\t  illustrate its use with a concrete example of a web\n\t\t\t\t  application. Benchmarks validate the applicability\n\t\t\t\t  of our proposal as an extension to the standard\n\t\t\t\t  reflective abilities of Smalltalk.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "David Röthlisberger and Marcus Denker and Éric Tanter",
		"DOI": "10.1016/j.cl.2007.05.001",
		"JOURNAL": "Journal of Computer Languages, Systems and Structures",
		"KEYWORDS": "scg08 scg08 scg-pub jb08 snf08 roethlisberger reflectivity",
		"MEDIUM": "2",
		"MONTH": "July",
		"NUMBER": "2-3",
		"PAGES": "46--65",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Elsevier",
		"TITLE": "Unanticipated Partial Behavioral Reflection: Adapting Applications at Runtime",
		"URL": "http://scg.unibe.ch/archive/papers/Roet08aUPBReflectionJournal.pdf",
		"VOLUME": "34",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet08aUPBReflectionJournal.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.cl.2007.05.001"
	},
	{
		"key": "Roet08b",
		"type": "inproceedings",
		"ABSTRACT": "Developers rely on the mechanisms provided by their\n\t\t\t\t  IDE to browse and navigate a large software system.\n\t\t\t\t  These mechanisms are usually based purely on a\n\t\t\t\t  system's static source code. The static perspective,\n\t\t\t\t  however, is not enough to understand an\n\t\t\t\t  object-oriented program's behavior, in particular if\n\t\t\t\t  implemented in a dynamic language. We propose to\n\t\t\t\t  enhance IDEs with a program's runtime information\n\t\t\t\t  (eg. message sends and type information) to support\n\t\t\t\t  program comprehension through precise navigation and\n\t\t\t\t  informative browsing. To precisely specify the type\n\t\t\t\t  and amount of runtime data to gather about a system\n\t\t\t\t  under development, dynamically and on demand, we\n\t\t\t\t  adopt a technique known as partial behavioral\n\t\t\t\t  reflection. We implemented navigation and browsing\n\t\t\t\t  enhancements to an IDE that exploit this runtime\n\t\t\t\t  information in a prototype called Hermion. We\n\t\t\t\t  present preliminary validation of our experimental\n\t\t\t\t  enhanced IDE by asking developers to assess its\n\t\t\t\t  usefulness to understand an unfamiliar software\n\t\t\t\t  system.",
		"ADDRESS": "Los Alamitos, CA, USA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "David Röthlisberger and Orla Greevy and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 16th International Conference on Program Comprehension (ICPC 2008)",
		"DOI": "10.1109/ICPC.2008.32",
		"ISBN": "978-0-7695-3176-2",
		"JOURNAL": "icpc",
		"KEYWORDS": "scg08 scg-pub jb08 snf08 roethlisberger reflectivity",
		"MEDIUM": "2",
		"PAGES": "63--72",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "Exploiting Runtime Information in the IDE",
		"URL": "http://scg.unibe.ch/archive/papers/Roet08bDynamicInfoIDE.pdf",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet08bDynamicInfoIDE.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICPC.2008.32"
	},
	{
		"key": "Roet08c",
		"type": "inproceedings",
		"ABSTRACT": "Code queries focus mainly on the static structure of\n\t\t\t\t  a system. To comprehend the dynamic behavior of a\n\t\t\t\t  system however, a software engineer needs to be able\n\t\t\t\t  to reason about the dynamics of this system, for\n\t\t\t\t  instance by querying a database of dynamic\n\t\t\t\t  information. Such a querying mechanism should be\n\t\t\t\t  directly available in the IDE where the developers\n\t\t\t\t  implements, navigates and reasons about the software\n\t\t\t\t  system. We propose (i) concepts to gather dynamic\n\t\t\t\t  information, (ii) the means to query this\n\t\t\t\t  information, and (iii) tools and techniques to\n\t\t\t\t  integrate querying of dynamic information in the\n\t\t\t\t  IDE, including the presentation of results generated\n\t\t\t\t  by queries.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "David Röthlisberger",
		"BDSK-URL-1": "http://www.cs.vu.nl/icpc2008/qtapc2008.php http://scg.unibe.ch/archive/papers/Roet08c-QTAPC08.pdf",
		"BOOKTITLE": "Proceedings of the 2008 workshop on Query Technologies and Applications for Program Comprehension (QTAPC 2008)",
		"KEYWORDS": "scg08 scg-pub skip-doi jb08 snf08 roethlisberger",
		"MEDIUM": "2",
		"PAGES": "n4",
		"PEERREVIEW": "yes",
		"TITLE": "Querying Runtime Information in the IDE",
		"URL": "http://www.cs.vu.nl/icpc2008/qtapc2008.php http://scg.unibe.ch/archive/papers/Roet08c-QTAPC08.pdf",
		"YEAR": "2008",
		"BDSK-URL-2": "http://www.cs.vu.nl/icpc2008/qtapc2008.php%20http://scg.unibe.ch/archive/papers/Roet08c-QTAPC08.pdf"
	},
	{
		"key": "Roet08g",
		"type": "inproceedings",
		"ABSTRACT": "Moose is a powerful reverse engineering platform,\n\t\t\t\t  but its facilities and means to analyze software are\n\t\t\t\t  separated from the tools developers typically use to\n\t\t\t\t  develop and maintain their software systems:\n\t\t\t\t  development environments such as Eclipse,\n\t\t\t\t  VisualWorks, or Squeak. In practice, this requires\n\t\t\t\t  developers to work with two distinct environments,\n\t\t\t\t  one to actually develop the software, and another\n\t\t\t\t  one (e.g., Moose) to analyze it. We worked on\n\t\t\t\t  several different techniques, using both dynamic and\n\t\t\t\t  static analyzes to provide software analysis\n\t\t\t\t  capabilities to developers directly in the IDE. The\n\t\t\t\t  immediate availability of analysis tools in an IDE\n\t\t\t\t  significantly increases the likelihood that\n\t\t\t\t  developers integrate software analysis in their\n\t\t\t\t  daily work, as we discovered by conducting user\n\t\t\t\t  studies with developers. Finally, we identified\n\t\t\t\t  several important aspect of integrating software\n\t\t\t\t  analysis in IDEs that need to be addressed in the\n\t\t\t\t  future to increase the adoption of these techniques\n\t\t\t\t  by developers.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "David Röthlisberger",
		"BOOKTITLE": "FAMOOSr, 2nd Workshop on FAMIX and Moose in Reengineering",
		"KEYWORDS": "scg08 scg-pub skip-doi snf09 jb09 roethlisberger",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"TITLE": "Embedding Moose Facilities Directly in IDEs",
		"URL": "http://scg.unibe.ch/archive/papers/Roet08gMooseFacilitiesInIDE.pdf",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet08gMooseFacilitiesInIDE.pdf"
	},
	{
		"key": "Roet09a",
		"type": "inproceedings",
		"ABSTRACT": "Mainstream IDEs generally rely on the static\n\t\t\t\t  structure of a software project to support browsing\n\t\t\t\t  and navigation. We propose HeatMaps, a simple but\n\t\t\t\t  highly configurable technique to enrich the way an\n\t\t\t\t  IDE displays the static structure of a software\n\t\t\t\t  system with additional kinds of information. A\n\t\t\t\t  heatmap highlights software artifacts according to\n\t\t\t\t  various metric values, such as bright red or pale\n\t\t\t\t  blue, to indicate their potential degree of\n\t\t\t\t  interest. We present a prototype system that\n\t\t\t\t  implements heatmaps, and we describe an initial\n\t\t\t\t  study that assesses the degree to which different\n\t\t\t\t  heatmaps effectively guide developers in navigating\n\t\t\t\t  software.",
		"ADDRESS": "Los Alamitos, CA, USA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "David Röthlisberger and Oscar Nierstrasz and Stéphane Ducasse and Damien Pollet and Romain Robbes",
		"BOOKTITLE": "Proceedings of the 17th International Conference on Program Comprehension (ICPC 2009)",
		"DOI": "10.1109/ICPC.2008.32",
		"ISBN": "978-0-7695-3176-2",
		"JOURNAL": "icpc",
		"KEYWORDS": "scg09 scg-pub snf09 jb09 roethlisberger",
		"MEDIUM": "2",
		"PAGES": "253--257",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "Supporting Task-oriented Navigation in IDEs with Configurable HeatMaps",
		"URL": "http://scg.unibe.ch/archive/papers/Roet09aHeatMapsICPC2009.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet09aHeatMapsICPC2009.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICPC.2008.32"
	},
	{
		"key": "Roet09b",
		"type": "inproceedings",
		"ABSTRACT": "Mainstream IDEs such as Eclipse support developers\n\t\t\t\t  in managing software projects mainly by offering\n\t\t\t\t  static views of the source code. Such a static\n\t\t\t\t  perspective neglects any information about runtime\n\t\t\t\t  behavior. However, object-oriented programs heavily\n\t\t\t\t  rely on polymorphism and late-binding, which makes\n\t\t\t\t  them difficult to understand just based on their\n\t\t\t\t  static structure. Developers thus resort to\n\t\t\t\t  debuggers or profilers to study the system's\n\t\t\t\t  dynamics. However, the information provided by these\n\t\t\t\t  tools is volatile and hence cannot be exploited to\n\t\t\t\t  ease the navigation of the source space. In this\n\t\t\t\t  paper we present an approach to augment the static\n\t\t\t\t  source perspective with dynamic metrics such as\n\t\t\t\t  precise runtime type information, or memory and\n\t\t\t\t  object allocation statistics. Dynamic metrics can\n\t\t\t\t  leverage the understanding for the behavior and\n\t\t\t\t  structure of a system. We rely on dynamic data\n\t\t\t\t  gathering based on aspects to analyze running Java\n\t\t\t\t  systems. By solving concrete use cases we illustrate\n\t\t\t\t  how dynamic metrics directly available in the IDE\n\t\t\t\t  are useful. We also comprehensively report on the\n\t\t\t\t  efficiency of our approach to gather dynamic\n\t\t\t\t  metrics.",
		"ADDRESS": "Los Alamitos, CA, USA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "David Röthlisberger and Marcel Härry and Alex Villazón and Danilo Ansaloni and Walter Binder and Oscar Nierstrasz and Philippe Moret",
		"BOOKTITLE": "Proceedings of the 25th International Conference on Software Maintenance (ICSM 2009)",
		"DOI": "10.1109/ICSM.2009.5306302",
		"JOURNAL": "icsm",
		"KEYWORDS": "scg09 scg-pub snf09 jb10 senseo roethlisberger haerry",
		"MEDIUM": "2",
		"PAGES": "253--262",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "Augmenting Static Source Views in IDEs with Dynamic Metrics",
		"URL": "http://scg.unibe.ch/archive/papers/Roet09bDynamicInfoEclipse.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet09bDynamicInfoEclipse.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.2009.5306302"
	},
	{
		"key": "Roet09c",
		"type": "inproceedings",
		"ABSTRACT": "Maintaining object-oriented systems that use\n\t\t\t\t  inheritance and polymorphism is difficult, since\n\t\t\t\t  runtime information, such as which methods are\n\t\t\t\t  actually invoked at a call site, is not visible in\n\t\t\t\t  the static source code. We have implemented Senseo,\n\t\t\t\t  an Eclipse plugin enhancing Eclipse's static source\n\t\t\t\t  views with various dynamic metrics, such as runtime\n\t\t\t\t  types, the number of objects created, or the amount\n\t\t\t\t  of memory allocated in particular methods.",
		"ADDRESS": "Los Alamitos, CA, USA",
		"ANNOTE": "internationalconference tooldemo",
		"AUTHOR": "David Röthlisberger and Marcel Härry and Alex Villazón and Danilo Ansaloni and Walter Binder and Oscar Nierstrasz and Philippe Moret",
		"BOOKTITLE": "Proceedings of the 25th International Conference on Software Maintenance (ICSM 2009)",
		"DOI": "10.1109/ICSM.2009.5306314",
		"JOURNAL": "icsm",
		"KEYWORDS": "scg09 scg-pub snf09 jb10 roethlisberger haerry",
		"MEDIUM": "2",
		"NOTE": "Tool demo",
		"PAGES": "383--384",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "Senseo: Enriching Eclipse's Static Source Views with Dynamic Metrics",
		"URL": "http://scg.unibe.ch/archive/papers/Roet09cSenseo.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet09cSenseo.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.2009.5306314"
	},
	{
		"key": "Roet09d",
		"type": "techreport",
		"ABSTRACT": "Mainstream IDEs generally rely on the static\n\t\t\t\t  structure of a software project to support browsing\n\t\t\t\t  and navigation. We propose HeatMaps, a simple but\n\t\t\t\t  highly configurable technique to enrich the way an\n\t\t\t\t  IDE displays the static structure of a software\n\t\t\t\t  system with additional kinds of information. A\n\t\t\t\t  heatmap highlights software artifacts according to\n\t\t\t\t  various metric values, such as bright red or pale\n\t\t\t\t  blue, to indicate their potential degree of\n\t\t\t\t  interest. We present a prototype system that\n\t\t\t\t  implements heatmaps, and we describe an initial\n\t\t\t\t  study that assesses the degree to which different\n\t\t\t\t  heatmaps effectively guide developers in navigating\n\t\t\t\t  software.",
		"ADDRESS": "Universität Bern, Switzerland",
		"AUTHOR": "David Röthlisberger and Oscar Nierstrasz and Stéphane Ducasse and Damien Pollet and Romain Robbes",
		"CLASSIFICATION": "D.2.2 Tools and Techniques; D.2.3 Coding; D.2.6 Programming Environments; D.2.9 Management",
		"GENERAL_TERMS": "Coding, Programming Environments, Program Editors, Integrated Environments",
		"INSTITUTION": "Institut für Informatik",
		"KEYWORDS": "scg-pub snf09 scg-none jb09 skip-doi roethlisberger",
		"MONTH": "July",
		"NUMBER": "IAM-09-005",
		"TITLE": "Supporting Task-oriented Navigation in IDEs with Configurable HeatMaps",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Roet09dHeatMapsTechReport.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet09dHeatMapsTechReport.pdf"
	},
	{
		"key": "Roet09e",
		"type": "inproceedings",
		"ABSTRACT": "The IDE used in most Smalltalk dialects such as\n\t\t\t\t  Pharo, Squeak or Cincom Smalltalk did not evolve\n\t\t\t\t  significantly over the last years, if not to say\n\t\t\t\t  decades. For other languages, for instance Java, the\n\t\t\t\t  available IDEs made tremendous progress as Eclipse\n\t\t\t\t  or NetBeans illustrate. While the Smalltalk IDE\n\t\t\t\t  served as an exemplar for many years, other IDEs\n\t\t\t\t  caught up or even overtook the erstwhile leader in\n\t\t\t\t  terms of feature-richness, usability, or code\n\t\t\t\t  navigation facilities. In this paper we first\n\t\t\t\t  analyze the difficulty of software navigation in the\n\t\t\t\t  Smalltalk IDE and second illustrate with concrete\n\t\t\t\t  examples the features we added to the Smalltalk IDE\n\t\t\t\t  to fill the gap to modern IDEs and to provide novel,\n\t\t\t\t  improved means to navigate source space. We show\n\t\t\t\t  that thanks to the agility and dynamics of\n\t\t\t\t  Smalltalk, we are able to extend and enhance with\n\t\t\t\t  reasonable effort the Smalltalk IDE to better\n\t\t\t\t  support software navigation, program comprehension,\n\t\t\t\t  and software maintenance in general. One such\n\t\t\t\t  support is the integration of dynamic information\n\t\t\t\t  into the static source views we are familiar with.\n\t\t\t\t  Other means include easing the access to static\n\t\t\t\t  information (for instance by better arranging\n\t\t\t\t  important packages) or helping developers\n\t\t\t\t  re-locating artifacts of interest (for example with\n\t\t\t\t  a categorization system such as smart groups).",
		"ADDRESS": "New York, NY, USA",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "David Röthlisberger and Oscar Nierstrasz and Stéphane Ducasse and Alexandre Bergel",
		"BOOKTITLE": "Proceedings of International Workshop on Smalltalk Technologies (IWST 2009)",
		"DOI": "10.1145/1735935.1735945",
		"ISBN": "978-1-60558-899-5",
		"KEYWORDS": "scg09 scg-pub snf10 jb10 roethlisberger",
		"LOCATION": "Brest, France",
		"MEDIUM": "1",
		"PAGES": "58--67",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM",
		"TITLE": "Tackling Software Navigation Issues of the Smalltalk IDE",
		"URL": "http://scg.unibe.ch/archive/papers/Roet09eNavigation.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet09eNavigation.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1735935.1735945"
	},
	{
		"key": "Roet09f",
		"type": "inproceedings",
		"ABSTRACT": "Navigating large software systems is difficult as\n\t\t\t\t  the various artifacts are distributed in a huge\n\t\t\t\t  space, while the relationships between different\n\t\t\t\t  artifacts often remain hidden and obscure. As a\n\t\t\t\t  consequence, developers using a modern interactive\n\t\t\t\t  development environment (IDE) are forced to open\n\t\t\t\t  views on numerous source artifacts to reveal these\n\t\t\t\t  hidden relationships, leading to a crowded workspace\n\t\t\t\t  with many opened windows or tabs. Developers often\n\t\t\t\t  lose the overview in such a cluttered workspace as\n\t\t\t\t  IDEs provide little support to get rid of unused\n\t\t\t\t  windows. AutumnLeaves automatically selects windows\n\t\t\t\t  unlikely for future use to be closed or grayed out\n\t\t\t\t  while important ones are displayed more prominently.\n\t\t\t\t  This reduces the number of windows opened at a time\n\t\t\t\t  and adds structure to the developer's workspace. We\n\t\t\t\t  validate AutumnLeaves with a benchmark evaluation\n\t\t\t\t  using recorded navigation data of various developers\n\t\t\t\t  to determine the prediction quality of the employed\n\t\t\t\t  algorithms.",
		"ADDRESS": "Los Alamitos, CA, USA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "David Röthlisberger and Oscar Nierstrasz and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of the 16th Working Conference on Reverse Engineering (WCRE 2009)",
		"DOI": "10.1109/WCRE.2009.18",
		"JOURNAL": "wcre",
		"KEYWORDS": "scg09 scg-pub snf10 jb10 roethlisberger",
		"LOCATION": "Lille, France",
		"MEDIUM": "2",
		"PAGES": "237--246",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "Autumn Leaves: Curing the Window Plague in IDEs",
		"URL": "http://scg.unibe.ch/archive/papers/Roet09fAutumnLeaves.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet09fAutumnLeaves.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2009.18"
	},
	{
		"key": "Roet09g",
		"type": "inproceedings",
		"ABSTRACT": "Researchers and practitioners are usually eager to\n\t\t\t\t  develop, test and experiment with new ideas and\n\t\t\t\t  techniques to analyze software systems and/or to\n\t\t\t\t  present results of such analyzes, for instance new\n\t\t\t\t  kind of visualizations or analysis tools. However,\n\t\t\t\t  often these novel and certainly promising ideas are\n\t\t\t\t  never properly and seriously empirically evaluated.\n\t\t\t\t  Instead their inventors just resort to anecdotal\n\t\t\t\t  evidence to substantiate their beliefs and claims\n\t\t\t\t  that their ideas and the realizations thereof are\n\t\t\t\t  actually useful in theory and practice. The chief\n\t\t\t\t  reason why proper validation is often neglected is\n\t\t\t\t  that serious evaluation of any newly realized\n\t\t\t\t  technique, tool, or concept in reverse engineering\n\t\t\t\t  is time-consuming, laborious, and often tedious.\n\t\t\t\t  Furthermore, we assume that there is also a lack of\n\t\t\t\t  knowledge or experience concerning empirical\n\t\t\t\t  evaluation in our community. This paper hence\n\t\t\t\t  sketches some ideas and discusses best practices of\n\t\t\t\t  how we can still, with moderate expenses, come up\n\t\t\t\t  with at least some empirical validation of our next\n\t\t\t\t  project in the field of reverse engineering.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "David Röthlisberger",
		"BOOKTITLE": "FAMOOSr, 3rd Workshop on FAMIX and Moose in Reengineering",
		"KEYWORDS": "scg09 scg-pub skip-doi snf10 jb10 roethlisberger",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"TITLE": "Why and How to Substantiate the Good of our Reverse Engineering Tools?",
		"URL": "http://scg.unibe.ch/archive/papers/Roet09gValidation.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet09gValidation.pdf"
	},
	{
		"key": "Roet11a",
		"type": "article",
		"ABSTRACT": "Modern IDEs such as Eclipse offer static views of\n\t\t\t\t  the source code, but such views ignore information\n\t\t\t\t  about the runtime behavior of software systems.\n\t\t\t\t  Since typical object-oriented systems make heavy use\n\t\t\t\t  of polymorphism and dynamic binding, static views\n\t\t\t\t  will miss key information about the runtime\n\t\t\t\t  architecture. In this article we present an approach\n\t\t\t\t  to gather and integrate dynamic information in the\n\t\t\t\t  Eclipse IDE with the goal of better supporting\n\t\t\t\t  typical software maintenance activities. By means of\n\t\t\t\t  a controlled experiment with 30 professional\n\t\t\t\t  developers we show that for typical software\n\t\t\t\t  maintenance tasks integrating dynamic information\n\t\t\t\t  into the Eclipse IDE yields a significant 17.5\n\t\t\t\t  decrease of time spent while significantly\n\t\t\t\t  increasing the correctness of the solutions by\n\t\t\t\t  33.5. We also provide a comprehensive performance\n\t\t\t\t  evaluation of our approach.",
		"ADDRESS": "Piscataway, NJ, USA",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "David Röthlisberger and Marcel Härry and Alex Villazón and Danilo Ansaloni and Walter Binder and Oscar Nierstrasz and Philippe Moret",
		"DOI": "10.1109/TSE.2011.42",
		"JOURNAL": "Transactions on Software Engineering",
		"KEYWORDS": "scg-pub scg11 roethlisberger haerry jb11 snf10 ercim11",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Press",
		"TITLE": "Exploiting Dynamic Information in IDEs Improves Speed and Correctness of Software Maintenance Tasks",
		"URL": "http://scg.unibe.ch/archive/papers/Roet11aSenseoTSE.pdf",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet11aSenseoTSE.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/TSE.2011.42"
	},
	{
		"key": "Roet11b",
		"type": "inproceedings",
		"ABSTRACT": "Navigating large software systems, even when using a\n\t\t\t\t  modern IDE, is difficult, since conceptually related software\n\t\t\t\t  artifacts are distributed in a huge software space.\n\t\t\t\t  For most software maintenance tasks, only a small fraction\n\t\t\t\t  of the entire software space is actually relevant. The IDE,\n\t\t\t\t  however, does not reveal the task relevancy of source artifacts,\n\t\t\t\t  thus developers cannot easily focus on the artifacts required to\n\t\t\t\t  accomplish their tasks.\n\t\t\t\t  SmartGroups help developers to perform software maintenance\n\t\t\t\t  tasks by representing groups of source artifacts that are relevant\n\t\t\t\t  for the current task. Relevancy is determined by analyzing historical\n\t\t\t\t  navigation and modification activities, evolutionary information, and\n\t\t\t\t  runtime information.\n\t\t\t\t  The prediction quality of SmartGroups is validated with a benchmark evaluation\n\t\t\t\t  using recorded development activities and evolutionary information\n\t\t\t\t  from versioning systems.",
		"ADDRESS": "Los Alamitos, CA, USA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "David Röthlisberger and Oscar Nierstrasz and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of the 19th International Conference on Program Comprehension (ICPC 2011)",
		"DOI": "10.1109/ICPC.2011.20",
		"JOURNAL": "icpc",
		"KEYWORDS": "scg-pub scg11 snf11 jb11 roethlisberger ercim11",
		"MEDIUM": "2",
		"PAGES": "246--257",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "SmartGroups: Focusing on Task-Relevant Source Artifacts in IDEs",
		"URL": "http://scg.unibe.ch/archive/papers/Roet11bSmartGroupsICPC2011.pdf",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Roet11bSmartGroupsICPC2011.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICPC.2011.20"
	},
	{
		"key": "Sade02a",
		"type": "article",
		"ABSTRACT": "The concept of interfaces is central to\n\t\t\t\t  object-oriented methodologies and is one of the most\n\t\t\t\t  attractive features of Java and COM. Although\n\t\t\t\t  Smalltalk always had interfaces implicitly, in\n\t\t\t\t  Smalltalk interfaces are not first-class objects: t\n\t\t\t\t  hey cannot be conversed with, referred to, or\n\t\t\t\t  reflected upon. Consequently, Smalltalkers have been\n\t\t\t\t  deprived of such an important and useful tool. Since\n\t\t\t\t  a fundamental feature of Smalltalk is that just\n\t\t\t\t  about everything in the language is an\n\t\t\t\t  implementation feature, explicit, static interfaces\n\t\t\t\t  can be added to Smalltalk using Smalltalk itself\n\t\t\t\t  with ease. However, such an addition would\n\t\t\t\t  short-change the powerful dynamic aspects of\n\t\t\t\t  Smalltalk. In this article we present\n\t\t\t\t  SmallInterfaces; a new ontology of dynamic i\n\t\t\t\t  nterfaces which makes a powerful use of the dynamic\n\t\t\t\t  nature of Smalltalk. SmallInterfaces adds interfaces\n\t\t\t\t  as honorary members to Smalltalk's extensive\n\t\t\t\t  reflection mechanism, in a manner portable across\n\t\t\t\t  the many Smalltalk variants",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Benny Sadeh and Stéphane Ducasse",
		"JOURNAL": "Journal of Object Technology",
		"KEYWORDS": "scg-pub skip-doi scg-none jb02 snf02 stefPub",
		"NUMBER": "1",
		"TITLE": "Adding Dynamic Interfaces to Smalltalk",
		"URL": "http://scg.unibe.ch/archive/papers/Sade02aDynamicInterfaces.pdf",
		"VOLUME": "1",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Sade02aDynamicInterfaces.pdf"
	},
	{
		"key": "Scha01b",
		"type": "inproceedings",
		"ABSTRACT": "Wrapping external components by scripts can be a\n\t\t\t\t  performance bottleneck if inter-language bridging is\n\t\t\t\t  frequent. Piccola is a pure composition language\n\t\t\t\t  that wraps components according to a specific\n\t\t\t\t  composition style. This wrapping must be efficient,\n\t\t\t\t  since even arithmetic operations are done by\n\t\t\t\t  external components. In this paper we present how to\n\t\t\t\t  use partial evaluation to overcome much of the\n\t\t\t\t  overhead associated with the wrapping. It turns out\n\t\t\t\t  that Piccola scripts can be highly optimized since\n\t\t\t\t  form expression exhibit the right kind of\n\t\t\t\t  information to separate side effects from services\n\t\t\t\t  and resolve internal dependencies.",
		"AUTHOR": "Nathanael Schärli and Franz Achermann",
		"BOOKTITLE": "Workshop on Composition Languages, WCL '01",
		"KEYWORDS": "scg-pub skip-doi scg-none jb02 piccola snf01 schaerli",
		"MISC": "schaerli",
		"MONTH": "September",
		"TITLE": "Partial evaluation of inter-language wrappers",
		"URL": "http://scg.unibe.ch/archive/papers/Scha01bLanguageWrappers.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Scha01bLanguageWrappers.pdf"
	},
	{
		"key": "Scha02a",
		"type": "inproceedings",
		"ABSTRACT": "We present a simple, component-based model of\n\t\t\t\t  mixins, called traits, and argue that this simple\n\t\t\t\t  model sidesteps many of the practical problems with\n\t\t\t\t  other approaches to mixins and multiple inheritance.\n\t\t\t\t  With our model, classes are built from a set of\n\t\t\t\t  traits by specifying glue code that connects them\n\t\t\t\t  together and accesses the necessary state. We\n\t\t\t\t  briefly discuss practical experience with an\n\t\t\t\t  implementation of traits for Squeak, and we list a\n\t\t\t\t  number of open questions for discussion.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Nathanael Schärli and Stéphane Ducasse and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the International Workshop on Inheritance",
		"KEYWORDS": "scg-pub skip-doi scg-traits scg-none jb02 snf02 stefPub schaerli",
		"TITLE": "Classes = Traits + States + Glue (Beyond mixins and multiple inheritance)",
		"URL": "http://scg.unibe.ch/archive/papers/Scha02aTraitsPlusGlue2002.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Scha02aTraitsPlusGlue2002.pdf"
	},
	{
		"key": "Scha02b",
		"type": "techreport",
		"ABSTRACT": "Inheritance is the fundamental reuse mechanism in\n\t\t\t\t  object-oriented programming languages; its most\n\t\t\t\t  prominent variants are single inheritance, multiple\n\t\t\t\t  inheritance, and mixin inheritance. In the first\n\t\t\t\t  part of this paper, we identify and illustrate the\n\t\t\t\t  conceptual and practical reusability problems that\n\t\t\t\t  arise with these forms of inheritance. We then\n\t\t\t\t  present a simple compositional model for structuring\n\t\t\t\t  object-oriented programs, which we call traits.\n\t\t\t\t  Traits are essentially groups of methods that serve\n\t\t\t\t  as building blocks for classes and are primitive\n\t\t\t\t  units of code reuse. In this model, classes are\n\t\t\t\t  composed from a set of traits by specifying glue\n\t\t\t\t  code that connects the traits together and accesses\n\t\t\t\t  the necessary state. We demonstrate how traits\n\t\t\t\t  overcome the problems arising with the different\n\t\t\t\t  variants of inheritance, we discuss how traits can\n\t\t\t\t  be implemented effectively, and we summarize our\n\t\t\t\t  experience applying traits to refactor an existing\n\t\t\t\t  class hierarchy.",
		"ADDRESS": "Universität Bern, Switzerland",
		"ANNOTE": "report notrefereed",
		"AUTHOR": "Nathanael Schärli and Stéphane Ducasse and Oscar Nierstrasz and Andrew P. Black",
		"CLASSIFICATION": "D.1.5 Object-oriented Programming; D.3.3 Language Constructs and Features",
		"CVS": "TraitsECOOP",
		"GENERAL_TERMS": "Inheritance, Mixins, Multiple Inheritance, Traits, Reuse, Smalltalk",
		"INSTITUTION": "Institut für Informatik",
		"KEYWORDS": "snf-redundant scg-pub skip-doi scg-none jb02 scg-traits stefPub schaerli",
		"MONTH": "November",
		"NOTE": "Also available as Technical Report CSE-02-014, OGI School of Science & Engineering, Beaverton, Oregon, USA",
		"NUMBER": "IAM-02-005",
		"TITLE": "Traits: Composable Units of Behavior",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Scha02bTraits.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Scha02bTraits.pdf"
	},
	{
		"key": "Scha02c",
		"type": "techreport",
		"ABSTRACT": "Single-inheritance in object-oriented languages can\n\t\t\t\t  lead to duplicated code in rich class libraries\n\t\t\t\t  where feature-sharing cannot be linearized.\n\t\t\t\t  Multiple-inheritance and mixins alleviate this\n\t\t\t\t  problem, but lead to other difficulties in the face\n\t\t\t\t  of evolution. Changes to classes or mixins can break\n\t\t\t\t  code lower in the hierarchy in unexpected ways.\n\t\t\t\t  Traits solve both problems by factoring out shared\n\t\t\t\t  behaviour as sets of methods that do not depend on\n\t\t\t\t  state. Traits have the important property that\n\t\t\t\t  composition is symmetric, so changes do not lead to\n\t\t\t\t  unexpected side effects. We present a formal model\n\t\t\t\t  of traits, and define some basic properties of\n\t\t\t\t  traits and classes.",
		"ADDRESS": "Universität Bern, Switzerland",
		"ANNOTE": "notrefereed",
		"AUTHOR": "Nathanael Schärli and Oscar Nierstrasz and Stéphane Ducasse and Roel Wuyts and Andrew Black",
		"CLASSIFICATION": "D.3.1 Formal Definitions and Theory; D.1.5 Object-oriented Programming; D.3.3 Language Constructs and Features",
		"CVS": "TraitsECOOP",
		"GENERAL_TERMS": "Inheritance, Mixins, Multiple Inheritance, Traits, Reuse, Smalltalk",
		"INSTITUTION": "Institut für Informatik",
		"KEYWORDS": "snf03 scg-pub skip-doi scg-none jb02 scg-traits schaerli",
		"MONTH": "November",
		"NOTE": "Also available as Technical Report CSE-02-013, OGI School of Science & Engineering, Beaverton, Oregon, USA",
		"NUMBER": "IAM-02-006",
		"TITLE": "Traits: The Formal Model",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Scha02cTraitsModel.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Scha02cTraitsModel.pdf"
	},
	{
		"key": "Scha03a",
		"type": "inproceedings",
		"ABSTRACT": "Despite the undisputed prominence of inheritance as\n\t\t\t\t  the fundamental reuse mechanism in object-oriented\n\t\t\t\t  programming languages, the main variants — single\n\t\t\t\t  inheritance, multiple inheritance, and mixin\n\t\t\t\t  inheritance — all suffer from conceptual and\n\t\t\t\t  practical problems. In the first part of this paper,\n\t\t\t\t  we identify and illustrate these problems. We then\n\t\t\t\t  present traits, a simple compositional model for\n\t\t\t\t  structuring object-oriented programs. A trait is\n\t\t\t\t  essentially a group of pure methods that serves as a\n\t\t\t\t  building block for classes and is a primitive unit\n\t\t\t\t  of code reuse. In this model, classes are composed\n\t\t\t\t  from a set of traits by specifying glue code that\n\t\t\t\t  connects the traits together and accesses the\n\t\t\t\t  necessary state. We demonstrate how traits overcome\n\t\t\t\t  the problems arising from the different variants of\n\t\t\t\t  inheritance, we discuss how traits can be\n\t\t\t\t  implemented effectively, and we summarize our\n\t\t\t\t  experience applying traits to refactor an existing\n\t\t\t\t  class hierarchy.",
		"ACCEPTNUM": "18",
		"ACCEPTTOTAL": "88",
		"ADDRESS": "Berlin Heidelberg",
		"ANNOTE": "internationalconference topconference",
		"AUTHOR": "Nathanael Schärli and Stéphane Ducasse and Oscar Nierstrasz and Andrew P. Black",
		"BOOKTITLE": "Proceedings of European Conference on Object-Oriented Programming (ECOOP'03)",
		"CVS": "TraitsECOOP2003",
		"DOI": "10.1007/b11832",
		"ISBN": "978-3-540-40531-3",
		"KEYWORDS": "snf03 scg-pub scg-none jb03 scg-traits stefPub schaerli onhindex(297)",
		"LOCATION": "Darmstadt, Germany",
		"MISC": "acceptance rate: 18/88 = 20",
		"MONTH": "July",
		"PAGES": "248--274",
		"PUBLISHER": "Springer Verlag",
		"SERIES": "LNCS",
		"TITLE": "Traits: Composable Units of Behavior",
		"URL": "http://scg.unibe.ch/archive/papers/Scha03aTraits.pdf",
		"VOLUME": "2743",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Scha03aTraits.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/b11832"
	},
	{
		"key": "Scha03b",
		"type": "techreport",
		"ABSTRACT": "Much of the elegance and power of Smalltalk comes\n\t\t\t\t  from its programming environment and tools. First\n\t\t\t\t  introduced more than 20 years ago, the Smalltalk\n\t\t\t\t  browser enables programmers to “home in” on\n\t\t\t\t  particular methods using a hierarchy of\n\t\t\t\t  manually-defined classifications. By its nature,\n\t\t\t\t  this classification scheme says a lot about the\n\t\t\t\t  desired state of the code, but little about the\n\t\t\t\t  actual state of the code as it is being developed.\n\t\t\t\t  We have extended the Smalltalk browser with\n\t\t\t\t  dynamically computed virtual categories that\n\t\t\t\t  dramatically improve the browser's support for\n\t\t\t\t  incremental programming. We illustrate these\n\t\t\t\t  improvements by example, and describe the algorithms\n\t\t\t\t  used to compute the virtual categories efficiently.",
		"ADDRESS": "Beaverton, Oregon, USA",
		"ANNOTE": "notrefereed",
		"AUTHOR": "Nathanael Schärli and Andrew P. Black",
		"CVS": "TraitsBrowserESUG2003",
		"INSTITUTION": "OGI School of Science & Engineering",
		"KEYWORDS": "snf-redundant scg-pub skip-doi scg-traits scg-none jb03 schaerli",
		"MISC": "schaerli",
		"MONTH": "April",
		"NUMBER": "CSE-03-008",
		"TITLE": "A Browser for Incremental Programming",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Scha03bTraitsBrowser.pdf",
		"YEAR": "2003",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Scha03bTraitsBrowser.pdf"
	},
	{
		"key": "Scha04a",
		"type": "inproceedings",
		"ABSTRACT": "Given the importance of encapsulation to\n\t\t\t\t  object-oriented programming, it is surprising to\n\t\t\t\t  note that mainstream object-oriented languages offer\n\t\t\t\t  only limited and fixed ways of encapsulating\n\t\t\t\t  methods. Typically one may only address two\n\t\t\t\t  categories of clients, users and heirs, and one must\n\t\t\t\t  bind visibility and access rights at an early stage.\n\t\t\t\t  This can lead to inflexible and fragile code as well\n\t\t\t\t  as clumsy workarounds. We propose a simple and\n\t\t\t\t  general solution to this problem in which\n\t\t\t\t  encapsulation policies can be specified separately\n\t\t\t\t  from implementations. As such they become\n\t\t\t\t  first-class composable entities that can be reused\n\t\t\t\t  by different classes. We present a detailed analysis\n\t\t\t\t  of the problem with encapsulation and visibility\n\t\t\t\t  mechanisms in mainstream OO languages, we introduce\n\t\t\t\t  our approach in terms of a simple model, and we\n\t\t\t\t  evaluate how our approach compares with existing\n\t\t\t\t  approaches. We also assess the impact of\n\t\t\t\t  incorporating encapsulation policies into Smalltalk\n\t\t\t\t  and discuss some implementation issues.",
		"ACCEPTNUM": "25",
		"ACCEPTTOTAL": "132",
		"ANNOTE": "internationalconference topconference",
		"AUTHOR": "Nathanael Schärli and Stéphane Ducasse and Oscar Nierstrasz and Roel Wuyts",
		"BOOKTITLE": "Proceedings of European Conference on Object-Oriented Programming (ECOOP'04)",
		"CVS": "EncapsulationPoliciesECOOP2004",
		"DOI": "10.1007/b98195",
		"ISBN": "978-3-540-22159-3",
		"KEYWORDS": "snf04 scg-pub scg-none jb04 scg-traits stefPub schaerli",
		"MISC": "acceptance rate: 25/132 = 19",
		"MONTH": "June",
		"PAGES": "26--50",
		"PUBLISHER": "Springer Verlag",
		"SERIES": "LNCS",
		"TITLE": "Composable Encapsulation Policies",
		"URL": "http://scg.unibe.ch/archive/papers/Scha04aEncapsulationPolicies.pdf",
		"VOLUME": "3086",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Scha04aEncapsulationPolicies.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/b98195"
	},
	{
		"key": "Scha04b",
		"type": "inproceedings",
		"ABSTRACT": "Encapsulation in object-oriented languages has\n\t\t\t\t  traditionally been based on static type systems. As\n\t\t\t\t  a consequence, dynamically-typed languages have only\n\t\t\t\t  limited support for encapsulation. This is\n\t\t\t\t  surprising, considering that encapsulation is one of\n\t\t\t\t  the most fundamental and important concepts behind\n\t\t\t\t  object-oriented programming and that it is essential\n\t\t\t\t  for writing programs that are maintainable and\n\t\t\t\t  reliable, and that remain robust as they evolve. In\n\t\t\t\t  this paper we describe the problems that are caused\n\t\t\t\t  by insufficient encapsulation mechanisms and then\n\t\t\t\t  present object-oriented encapsulation, a simple and\n\t\t\t\t  uniform approach that solves these problems by\n\t\t\t\t  bringing state of the art encapsulation features to\n\t\t\t\t  dynamically typed languages. We provide a detailed\n\t\t\t\t  discussion of our design rationales and compare them\n\t\t\t\t  and their consequences to the encapsulation\n\t\t\t\t  approaches used for statically typed languages. We\n\t\t\t\t  also describe an implementation of object-oriented\n\t\t\t\t  encapsulation in Smalltalk. Benchmarks show that\n\t\t\t\t  extensive use of objectoriented encapsulation\n\t\t\t\t  results in a slowdown of less than 15 per cent.",
		"ACCEPTNUM": "27",
		"ACCEPTTOTAL": "174",
		"ANNOTE": "internationalconference topconference",
		"AUTHOR": "Nathanael Schärli and Andrew P. Black and Stéphane Ducasse",
		"BOOKTITLE": "Proceedings of 18th International Conference on Object-Oriented Programming Systems, Languages and Applications (OOPSLA'04)",
		"CVS": "OOEncapsulationOOPSLA2004",
		"DOI": "10.1145/1028976.1028988",
		"KEYWORDS": "snf05 scg-pub scg-none jb03 scg-traits stefPub schaerli",
		"MISC": "acceptance rate: 27/174 = 16",
		"MONTH": "October",
		"PAGES": "130--149",
		"TITLE": "Object-oriented Encapsulation for Dynamically Typed Languages",
		"URL": "http://scg.unibe.ch/archive/papers/Scha04bOOEncapsulation.pdf",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Scha04bOOEncapsulation.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1028976.1028988"
	},
	{
		"key": "Scha04c",
		"type": "article",
		"ABSTRACT": "Much of the elegance and power of Smalltalk comes\n\t\t\t\t  from its programming environment and tools. First\n\t\t\t\t  introduced more than 20 years ago, the Smalltalk\n\t\t\t\t  browser enables programmers to “home in” on\n\t\t\t\t  particular methods using a hierarchy of\n\t\t\t\t  manually-defined classifications. By its nature,\n\t\t\t\t  this classification scheme says a lot about the\n\t\t\t\t  desired state of the code, but little about the\n\t\t\t\t  actual state of the code as it is being developed.\n\t\t\t\t  We have extended the Smalltalk browser with\n\t\t\t\t  dynamically computed virtual categories that\n\t\t\t\t  dramatically improve the browser's support for\n\t\t\t\t  incremental programming. We illustrate these\n\t\t\t\t  improvements by example, and describe the algorithms\n\t\t\t\t  used to compute the virtual categories efficiently.",
		"AUTHOR": "Nathanael Schärli and Andrew P. Black",
		"CVS": "TraitsBrowserESUG2003",
		"DOI": "10.1016/j.cl.2003.09.004",
		"JOURNAL": "Journal of Computer Languages, Systems and Structures",
		"KEYWORDS": "scg-pub scg-none jb04 scg-traits snf04 schaerli",
		"MISC": "schaerli",
		"NUMBER": "1-2",
		"PAGES": "79--95",
		"PUBLISHER": "Elsevier",
		"TITLE": "A Browser for Incremental Programming",
		"URL": "http://scg.unibe.ch/archive/papers/Scha04cBrowser.pdf",
		"VOLUME": "30",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Scha04cBrowser.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.cl.2003.09.004"
	},
	{
		"key": "Sche13a",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"ABSTRACT": "By analyzing the transactions in Stack Overflow we can get a glimpse of the way in which the different geographical regions in the world contribute to the knowledge market represented by the website. In this paper we aggregate the knowledge transfer from the level of the users to the level of geographical regions and learn that Europe and North America are the principal and virtually equal contributors; Asia comes as a distant third, mainly represented by India; and Oceania contributes less than Asia but more than South America and Africa together.",
		"AUTHOR": "Schenk, Dennis and Lungu, Mircea",
		"BOOKTITLE": "Proceedings of the 5th International Workshop on Social Software Engineering",
		"KEYWORDS": "StackOverflow scg-pub snf-asa1 scg13 lungu skip-doi jb14",
		"MEDIUM": "2",
		"PAGES": "21--24",
		"PEERREVIEW": "yes",
		"TITLE": "Geo-Locating the Knowledge Transfer in StackOverflow",
		"URL": "http://scg.unibe.ch/archive/papers/Sche13a-GeolocatingStackOverflow.pdf",
		"YEAR": "2013",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Sche13a-GeolocatingStackOverflow.pdf"
	},
	{
		"key": "Schn96a",
		"type": "techreport",
		"ABSTRACT": "For the development of present-day applications,\n\t\t\t\t  programming languages supporting high order\n\t\t\t\t  abstractions are needed. These high order\n\t\t\t\t  abstractions are called components. Since most of\n\t\t\t\t  the currently available programming languages and\n\t\t\t\t  systems fail to provide sufficient support for\n\t\t\t\t  specifying and implementing components, we are\n\t\t\t\t  developing a new language suitable for software\n\t\t\t\t  composition. It is not clear how such a language\n\t\t\t\t  will look like, what kind of abstractions it must\n\t\t\t\t  support, and what kind of formal model it will be\n\t\t\t\t  based on. Object-oriented programming languages\n\t\t\t\t  address some of the needs of present-day\n\t\t\t\t  applications, and it is therefore obvious to\n\t\t\t\t  integrate some of their concepts and abstractions in\n\t\t\t\t  the language. As a first step towards such an\n\t\t\t\t  integration, we have to define an object model.\n\t\t\t\t  Since no generally accepted formal object model\n\t\t\t\t  exists, we have chosen the Pi-calculus as a basis\n\t\t\t\t  for modelling. In order to find a suitable object\n\t\t\t\t  model, we have built up an object modelling\n\t\t\t\t  workbench for Pict, an implementation of an\n\t\t\t\t  asynchronous Pi-calculus. In this work, we define a\n\t\t\t\t  first abstract object model, describe several\n\t\t\t\t  implementations of the object model in Pict, and\n\t\t\t\t  discuss interesting features and possible\n\t\t\t\t  extensions.",
		"AUTHOR": "Jean-Guy Schneider and Markus Lumpe",
		"INSTITUTION": "University of Bern, Institute of Computer Science and Applied Mathematics",
		"KEYWORDS": "olit scglit oobib scg-pub skip-doi snf95 scg-none jb96 scg-coord-old",
		"MONTH": "January",
		"NUMBER": "IAM-96-004",
		"TITLE": "Modelling Objects in PICT",
		"URL": "http://scg.unibe.ch/archive/software/OOPICT/pictObjM.pdf http://scg.unibe.ch/archive/software/OOPICT/index.html",
		"YEAR": "1996",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/software/OOPICT/pictObjM.pdf%20http://scg.unibe.ch/archive/software/OOPICT/index.html"
	},
	{
		"key": "Schn97a",
		"type": "inproceedings",
		"ABSTRACT": "The development of concurrent object-based\n\t\t\t\t  programming languages has suffered from the lack of\n\t\t\t\t  any generally accepted formal foundation for\n\t\t\t\t  defining their semantics. Therefore we are seeking\n\t\t\t\t  for a minimal semantic foundation for defining\n\t\t\t\t  features of concurrent object-based languages. Our\n\t\t\t\t  previous work has shown that the Pi-calculus is a\n\t\t\t\t  promising formal foundation for modelling objects,\n\t\t\t\t  and we have defined an object model integrating\n\t\t\t\t  common features of object-oriented programming\n\t\t\t\t  languages. Our goal is to define a black-box\n\t\t\t\t  framework for modelling objects. As a first\n\t\t\t\t  extension of our Pi-calculus based object model, we\n\t\t\t\t  present in this work the integration of abstractions\n\t\t\t\t  for synchronizing concurrent objects. Our results\n\t\t\t\t  show that objects are most easily synchronized when\n\t\t\t\t  synchronization policies are reified as first class\n\t\t\t\t  entities (i.e. metaobjects) and that McHale's\n\t\t\t\t  concept of “generic synchronization policies”\n\t\t\t\t  forms a promising base for the definition of\n\t\t\t\t  higher-level, reusable synchronization\n\t\t\t\t  abstractions.",
		"ADDRESS": "Roscoff",
		"AUTHOR": "Jean-Guy Schneider and Markus Lumpe",
		"BOOKTITLE": "Proceedings of Langages et Modèles à Objets '97",
		"EDITOR": "Roland Ducournau and Serge Garlatti",
		"ISBN": "2-86601-650-5",
		"KEYWORDS": "scg-pub skip-doi pict pi olit lmo97 snf96 scg-none jb97 scg-coord-98",
		"MONTH": "October",
		"PAGES": "61--76",
		"PUBLISHER": "Hermes",
		"TITLE": "Synchronizing Concurrent Objects in the Pi-Calculus",
		"URL": "http://scg.unibe.ch/archive/papers/Schn97aSyncConcObjPi.pdf",
		"YEAR": "1997",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Schn97aSyncConcObjPi.pdf"
	},
	{
		"key": "Schn99b",
		"type": "incollection",
		"ABSTRACT": "Experience has shown us that object-oriented\n\t\t\t\t  technology alone is not enough to guarantee that the\n\t\t\t\t  systems we develop will be flexible and adaptable.\n\t\t\t\t  Even “well-designed” object-oriented software may\n\t\t\t\t  be difficult to understand and adapt to new\n\t\t\t\t  requirements. We propose a conceptual framework that\n\t\t\t\t  will help yield more flexible object-oriented\n\t\t\t\t  systems by encouraging explicit separation of\n\t\t\t\t  computational and compositional elements. We\n\t\t\t\t  distinguish between components that adhere to an\n\t\t\t\t  architectural style, scripts that specify\n\t\t\t\t  compositions, and glue that may be needed to adapt\n\t\t\t\t  components' interfaces and contracts. We also\n\t\t\t\t  discuss a prototype of an experimental composition\n\t\t\t\t  language called Piccola that attempts to combine\n\t\t\t\t  proven ideas from scripting languages, coordination\n\t\t\t\t  models and languages, glue techniques, and\n\t\t\t\t  architectural specification.",
		"AUTHOR": "Jean-Guy Schneider and Oscar Nierstrasz",
		"BOOKTITLE": "Software Architectures — Advances and Applications",
		"EDITOR": "Leonor Barroca and Jon Hall and Patrick Hall",
		"ISBN": "1-85233-636-6",
		"KEYWORDS": "scg-pub skip-doi scripting glue architectures sa cose snf98 csg99 omnrep scg-coord-99 piccola scg-none jb99 onhindex(108)",
		"PAGES": "13--25",
		"PUBLISHER": "Springer-Verlag",
		"TITLE": "Components, Scripts and Glue",
		"URL": "http://scg.unibe.ch/archive/papers/Schn99bComptsScriptsAndGlue.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Schn99bComptsScriptsAndGlue.pdf"
	},
	{
		"key": "Schn00a",
		"type": "inproceedings",
		"ABSTRACT": "The development of flexible and reusable concurrent\n\t\t\t\t  object-oriented programming abstractions has\n\t\t\t\t  suffered from the inherent problem that reusability\n\t\t\t\t  and extensibility is limited due to\n\t\t\t\t  position-dependent parameters. To tackle this\n\t\t\t\t  problem, we propose the Form-calculus, an inherently\n\t\t\t\t  polymorphic variant of the Pi-calculus, where\n\t\t\t\t  polyadic tuple communication is replaced by monadic\n\t\t\t\t  communication of extensible records. This approach\n\t\t\t\t  facilitates the specification of flexible,\n\t\t\t\t  concurrent, object-oriented programming\n\t\t\t\t  abstractions. Based on our previous work in this\n\t\t\t\t  field, we present a Form-calculus based meta-level\n\t\t\t\t  approach for concurrent, object-based programming\n\t\t\t\t  which adapts a compositional view of programming.\n\t\t\t\t  This approach enables the definition of various\n\t\t\t\t  semantic models supporting different kinds of\n\t\t\t\t  inheritance and method dispatch strategies, and\n\t\t\t\t  clarifies concepts which are typically merged in\n\t\t\t\t  existing object-oriented programming languages.",
		"ADDRESS": "Mont Saint-Hilaire, Québec",
		"AUTHOR": "Schneider, Jean-Guy and Lumpe, Markus",
		"BOOKTITLE": "Proceedings of Langages et Modèles à Objets '00",
		"EDITOR": "Dony, Christophe and Sahraoui, Houari A.",
		"ISBN": "ISBN 2-7462-0093-7",
		"KEYWORDS": "scg-pub skip-doi olit concurrency pi models snf99 lmo00 scg-none jb01",
		"LOCATION": "Privat",
		"MONTH": "January",
		"PAGES": "149--165",
		"PUBLISHER": "Hermes",
		"TITLE": "A Metamodel for Concurrent, Object-based Programming",
		"URL": "http://scg.unibe.ch/archive/papers/Schn00aMetamodelForOBCP.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Schn00aMetamodelForOBCP.pdf"
	},
	{
		"key": "Schn01b",
		"type": "incollection",
		"ABSTRACT": "In this chapter, it is not our goal to focus on\n\t\t\t\t  basic coordination models and abstractions of\n\t\t\t\t  scripting languages alone. We would like to view\n\t\t\t\t  coordination from a different perspective, set the\n\t\t\t\t  relation to other approaches which aim at separating\n\t\t\t\t  independent concerns into deployable entities, in\n\t\t\t\t  particular to component-based software development,\n\t\t\t\t  and discuss the influence of scripting on building\n\t\t\t\t  applications as assemblies of these entities.\n\t\t\t\t  Furthermore, we would like to stress the fact that\n\t\t\t\t  scripting languages do not only allow us to\n\t\t\t\t  coordinate distributed agents, but also to implement\n\t\t\t\t  the agents themselves as scripts.",
		"AUTHOR": "Jean-Guy Schneider and Markus Lumpe and Oscar Nierstrasz",
		"BOOKTITLE": "Coordination of Internet Agents",
		"EDITOR": "Andrea Omicini and Franco Zambonelli and Matthias Klusch and Robert Tolksdorf",
		"ISBN": "3-540-41613-7",
		"KEYWORDS": "scg-pub skip-doi scripting glue architectures scg-none jb01 snf02",
		"PAGES": "153--175",
		"PUBLISHER": "Springer-Verlag",
		"TITLE": "Agent Coordination via Scripting Languages",
		"URL": "http://scg.unibe.ch/archive/papers/Schn01bAgentCoordination.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Schn01bAgentCoordination.pdf"
	},
	{
		"key": "Schn16a",
		"type": "inproceedings",
		"AUTHOR": "Teseo Schneider and Yuriy Tymchuk and Ronie Salgado and Alexandre Bergel",
		"TITLE": "CuboidMatrix: Exploring Dynamic Structural Connections in Software Components using Space-Time Cube",
		"BOOKTITLE": "VISSOFT'16: Proceedings of the 4th IEEE Working Conference on Software Visualization",
		"ABSTRACT": "Static and dynamic evolution of software systems may be described in terms of connection additions and removals in a graph.\nDue to the inherent complexity of software, navigating through such a dynamic network is a non-trivial task and extracting relevant information typically involves sophisticated queries.\nWe explore the notion of space-time cube, a well-known 3D representation of an evolving dynamic graph, to support a set of software engineering activities. CuboidMatrix is a visualization tool that offers simple and expressive navigation operations. We have evaluated our tool against two software comprehension activities, namely (i) assessing interaction of classes during a software execution and (ii) exploring the cause of breaking Lint-like quality rules over a large number of software revisions.",
		"ANNOTE": "internationalconference",
		"PUBLISHER": "IEEE",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa2 scg16 jb16 tymchuk",
		"YEAR": "2016",
		"URL": "http://scg.unibe.ch/archive/papers/Schn16a.pdf",
		"DOI": "10.1109/VISSOFT.2016.17",
		"PAGES": "116--125"
	},
	{
		"key": "Schu12a",
		"type": "incollection",
		"ABSTRACT": "Nowadays, a slew of clone detection approaches exists, producing a lot of clone data. These data have to be analyzed manually or automatically. It is not trivial to derive conclusions or even actions from the analyzed data. In particular, we argue that it is often unclear how to present the clone information to the user. As a result, we present our idea of task-oriented clone presentation based on use cases. Hence, we propose five use cases that have to be addressed and suggest clone presentation techniques that we consider to be appropriate.",
		"AUTHOR": "Sandro Schulze and Niko Schwarz",
		"BOOKTITLE": "Software Clone Management Towards Industrial Application (Dagstuhl Seminar 12071)",
		"EDITOR": "Rainer Koschke and Ira D. Baxter and Michael Conradt and James R. Cordy",
		"ISSN": "2192-5283",
		"JOURNAL": "Dagstuhl Reports",
		"KEYWORDS": "skip-doi scg-bigdata scg-pub snf12 jb12 scg12",
		"MEDIUM": "2",
		"MONTH": "June",
		"PAGES": "35--38",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik",
		"TITLE": "How to Make the Hidden Visible — Code Clone Presentation Revisited",
		"URL": "http://scg.unibe.ch/archive/papers/Schu12a-clone-representation.pdf",
		"VOLUME": "2",
		"YEAR": "2012",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Schu12a-clone-representation.pdf"
	},
	{
		"key": "Schw10b",
		"type": "inproceedings",
		"ABSTRACT": "Code duplication is common in current\n\t\t\t\t  programming-practice: programmers search for\n\t\t\t\t  snippets of code, incorporate them into their\n\t\t\t\t  projects and then modify them to their needs. In\n\t\t\t\t  today's practice, no automated scheme is in place to\n\t\t\t\t  inform both parties of any distant changes of the\n\t\t\t\t  code. As code snippets continues to evolve both on\n\t\t\t\t  the side of the user and on the side of the author,\n\t\t\t\t  both may wish to benefit from remote bug fixes or\n\t\t\t\t  refinements — authors may be interested in the\n\t\t\t\t  actual usage of their code snippets, and researchers\n\t\t\t\t  could gather information on clone usage. We propose\n\t\t\t\t  maintaining a link between software clones across\n\t\t\t\t  repositories and outline how the links can be\n\t\t\t\t  created and maintained.",
		"ADDRESS": "New York, NY, USA",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Niko Schwarz and Erwann Wernli and Adrian Kuhn",
		"BOOKTITLE": "IWSC '10: Proceedings of the 4th International Workshop on Software Clones",
		"DATE-ADDED": "2010-04-26 16:10:08 +0200",
		"DATE-MODIFIED": "2010-04-26 16:12:27 +0200",
		"DOI": "10.1145/1808901.1808915",
		"ISBN": "978-1-60558-980-0",
		"KEYWORDS": "scg-pub scg10 snf10 jb10 nes, software clones, software evolution, software repositories, forking, position paper",
		"LOCATION": "Cape Town, South Africa",
		"MEDIUM": "1",
		"MONTH": "April",
		"PAGES": "81--82",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM",
		"TITLE": "Hot Clones, Maintaining a Link Between Software Clones Across Repositories",
		"URL": "http://scg.unibe.ch/archive/papers/Schw10b-hot-clones.pdf",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Schw10b-hot-clones.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1808901.1808915"
	},
	{
		"key": "Schw11a",
		"type": "inproceedings",
		"ABSTRACT": "Unit testing is often made more difficult by the heavy use of classes as namespaces and the\n\t\tproliferation of class methods to encapsulate configuration code. We have analyzed the use of 120\n\t\tclass methods from 96 projects by categorizing them according to their responsibilities. We find\n\t\tthat most class methods support a hodgepodge of mixed responsibilities, held together only by\n\t\ttheir common need to be globally visible. Tight coupling between instances and their classes\n\t\tbreaks encapsulation, and, together with the global visibility of class methods, complicates\n\t\ttesting. By making dependency injection a feature of the programming language, we can get rid of\n\t\tclass methods altogether. We employ the following semantic changes: (1) Replace every occurrence\n\t\tof a global with an access to an instance variable; (2) Let that instance variable be\n\t\tautomatically injected into the object when it is instantiated. We present Seuss, a prototype that\n\t\timplements this change of semantics in Smalltalk. We show how Seuss eliminates the need to use\n\t\tclass methods for non-reflective purposes, reduces the need for many design patterns, such as\n\t\tAbstract Factory, and simplifies configuration code, particularly for unit tests. ",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Niko Schwarz and Mircea Lungu and Oscar Nierstrasz",
		"BOOKTITLE": "Objects, Components, Models and Patterns, Proceedings of TOOLS Europe 2011",
		"DOI": "10.1007/978-3-642-21952-8_20",
		"KEYWORDS": "scg1 scg-pub scg11 jb11 snf11 ercim11",
		"MEDIUM": "2",
		"PAGES": "276--289",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Seuss: Cleaning up Class Responsibilities with Language-based Dependency Injection",
		"URL": "http://scg.unibe.ch/archive/papers/Schw11aSeuss.pdf",
		"VOLUME": "33",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Schw11aSeuss.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/978-3-642-21952-8_20"
	},
	{
		"key": "Schw11b",
		"type": "inproceedings",
		"ABSTRACT": "Developers override  toString() and  printOn: methods to allow objects to display themselves.\nThis is done to track object state while debugging.\nAlthough very popular, the technique breaks down when displaying complex, multi-dimensional objects.\nWe propose an approach in which objects have two-dimensional visualizations at various levels of granularity. This makes it easier to compose visualizations from object parts, and enables “semantic zooming” of object visualizations while debugging.\nWe have carried out an empirical study to understand how printOn: methods are used in practice, and we are developing DoodleDebug, a framework to support visualizable objects.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Niko Schwarz",
		"BOOKTITLE": "Proceedings of the TOOLS 2011, 5th Workshop on Dynamic Languages and Applications (DYLA'11).",
		"KEYWORDS": "scg11 scg-pub nes snf11 jb11 skip-doi",
		"MEDIUM": "4",
		"PEERREVIEW": "yes",
		"TITLE": "DoodleDebug, Objects Should Sketch Themselves For Code Understanding",
		"URL": "http://scg.unibe.ch/archive/papers/Schw11bDoodleDebug.pdf",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Schw11bDoodleDebug.pdf"
	},
	{
		"key": "Schw12a",
		"type": "inproceedings",
		"ABSTRACT": "Detecting code duplication in large code bases, or even across project boundaries, is problematic due to the massive amount of data involved. Large-scale clone detection also opens new challenges beyond asking for the provenance of a single clone fragment, such as assessing the prevalence of code clones on the entire code base, and their evolution.   We propose a set of lightweight techniques that may scale up to very large amounts of source code in the presence of multiple versions. The common idea behind these techniques is to use bad hashing to get a quick answer. We report on a case study, the Squeaksource ecosystem, which features thousands of software projects, with more than 40 million versions of methods, across more than seven years of evolution. We provide estimates for the prevalence of type-1, type-2, and type-3 clones in Squeaksource.",
		"ADDRESS": "Piscataway, NJ, USA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Schwarz, Niko and Lungu, Mircea and Robbes, Romain",
		"BOOKTITLE": "Proceedings of the 2012 International Conference on Software Engineering",
		"ISBN": "978-1-4673-1067-3",
		"KEYWORDS": "scg-bigdata scg-pub snf12 jb12 scg12",
		"LOCATION": "Zurich, Switzerland",
		"MEDIUM": "2",
		"PAGES": "1289--1292",
		"PEERREVIEW": "yes",
		"PRIORITY": "2",
		"PUBLISHER": "IEEE Press",
		"SERIES": "ICSE 2012",
		"TITLE": "On how often code is cloned across repositories",
		"URL": "http://scg.unibe.ch/archive/papers/Schw12a-scalable-clones.pdf",
		"DOI": "10.1109/ICSE.2012.6227097",
		"YEAR": "2012",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Schw12a-scalable-clones.pdf"
	},
	{
		"key": "Schw12b",
		"type": "article",
		"ABSTRACT": "Unit testing is often made more difficult by the heavy use of classes as namespaces and the proliferation of static methods to encapsulate configuration code. We have analyzed the use of 120 static methods from 96 projects by categorizing them according to their responsibilities. We find that most static methods support a hodgepodge of mixed responsibilities, held together only by their common need to be globally visible. Tight coupling between instances and their classes breaks encapsulation, and, together with the global visibility of static methods, complicates testing. By making dependency injection a feature of the programming language, we can get rid of static methods altogether. We employ the following semantic changes: (1) Replace every occurrence of a global with an access to an instance variable; (2) Let that instance variable be automatically injected into the object when it is instantiated. We present Seuss, a prototype that implements this change of semantics in Smalltalk. We show how Seuss eliminates the need to use class methods for non-reflective purposes, reduces the need for creational design patterns such as Abstract Factory and simplifies configuration code, particularly for unit tests. We present benchmarks showing that Seuss introduces a 34 % additional memory cost, and runs at 53 % speed, without any optimizations.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Niko Schwarz and Mircea Lungu and Oscar Nierstrasz",
		"DOI": "10.5381/jot.2012.11.1.a3",
		"JOURNAL": "Journal of Object Technology",
		"KEYWORDS": "scg-pub jb12 snf12 scg12",
		"MEDIUM": "1",
		"NUMBER": "1",
		"PEERREVIEW": "yes",
		"TITLE": "Seuss: Decoupling responsibilities from static methods for fine-grained configurability",
		"URL": "http://www.jot.fm/issues/issue_2012_04/article3.pdf",
		"VOLUME": "11",
		"YEAR": "2012",
		"BDSK-URL-1": "http://www.jot.fm/issues/issue_2012_04/article3.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.5381/jot.2012.11.1.a3"
	},
	{
		"key": "Schw12c",
		"type": "inproceedings",
		"ABSTRACT": "Code duplication is common in current programming-practice: programmers search for snippets of code, incorporate them into their projects and then modify them to their needs. In today's practice, no automated scheme is in place to inform both parties of any distant changes of the code. As code snippets continue to evolve both on the side of the user and on the side of the author, both may wish to benefit from remote bug fixes or refinements -S authors may be interested in the actual usage of their code snippets, and researchers could gather information on clone usage. We propose to maintain a link between software clones across repositories and outline how the links can be created and maintained.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Schwarz, Niko",
		"BOOKTITLE": "2012 34th International Conference on Software Engineering (ICSE)",
		"DOI": "10.1109/ICSE.2012.6227221",
		"ISBN": "978-1-4673-1067-3",
		"KEYWORDS": "scg-bigdata scg-pub jb12 snf12 scg12",
		"LOCATION": "Zurich, Switzerland",
		"MEDIUM": "2",
		"MONTH": "June",
		"PAGES": "1628--1629",
		"PEERREVIEW": "yes",
		"POSTED-AT": "2012-07-28 15:07:10",
		"PRIORITY": "2",
		"PUBLISHER": "IEEE",
		"TITLE": "Hot clones: Combining search-driven development, clone management, and code provenance",
		"URL": "http://scg.unibe.ch/archive/papers/Schw12c-clones-provenance.pdf",
		"YEAR": "2012",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Schw12c-clones-provenance.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSE.2012.6227221"
	},
	{
		"key": "Schw12d",
		"type": "inproceedings",
		"ABSTRACT": "Code duplication is common in current programming-practice: programmers search for snippets of code, incorporate them into their projects and then modify them to their needs. In today's practice, no automated scheme is in place to inform both parties of any distant changes of the code. As code snippets continue to evolve both on the side of the user and on the side of the author, both may wish to benefit from remote bug fixes or refinements - authors may be interested in the actual usage of their code snippets, and researchers could gather information on clone usage. We propose to maintain a link between software clones across repositories and outline how the links can be created and maintained.",
		"ADDRESS": "Los Alamitos, CA, USA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Schwarz, Niko",
		"BOOKTITLE": "2012 16th European Conference on Software Maintenance and Reengineering",
		"DOI": "10.1109/CSMR.2012.67",
		"ISBN": "978-0-7695-4666-7",
		"ISSN": "1534-5351",
		"JOURNAL": "Software Maintenance and Reengineering, European Conference on",
		"KEYWORDS": "scg-bigdata scg-pub jb12 snf12 scg12",
		"LOCATION": "Szeged, Hungary",
		"MEDIUM": "2",
		"MONTH": "March",
		"PAGES": "513--515",
		"PEERREVIEW": "yes",
		"POSTED-AT": "2012-07-28 15:09:11",
		"PRIORITY": "2",
		"PUBLISHER": "IEEE",
		"TITLE": "Hot Clones: A Shotgun Marriage of Search-Driven Development and Clone Management",
		"URL": "http://dx.doi.org/10.1109/CSMR.2012.67",
		"VOLUME": "0",
		"YEAR": "2012",
		"BDSK-URL-1": "http://dx.doi.org/10.1109/CSMR.2012.67"
	},
	{
		"key": "Senf18a",
		"type": "inproceedings",
		"AUTHOR": "Senft, Björn and Fischer, Holger and Oberthür, Simon and Patkar, Nitish",
		"BOOKTITLE": "International Conference of Design, User Experience, and Usability",
		"TITLE": "Assist Users to Straightaway Suggest and Describe Experienced Problems",
		"YEAR": "2018",
		"ANNOTE": "internationalconference",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"DOI": "10.1007/978-3-319-91797-9_52",
		"ABSTRACT": "Requirements elicitation plays a vital role in building effective software. Incorrect or incomplete requirements lead to erroneous software and costs a huge amount of rework. Rework costs in terms of money and efforts are usually higher than the early detection of potential flaws in the requirements. This happens because most of the techniques employed to extract requirements fail to understand end user goals. Understanding your users and their goals is important to build a capable, viable and desirable product or software system. This paper attempts to suggest and evaluate an alternative approach to understand your potential users and their goals so that correct and complete requirements can be formulated resulting in a successful software. We introduce the concept of a tool-guided elicitation process, classify elicitation techniques in term of their suitability in such a tool-guided process, and present an initial study of the usability und usefulness of our prototype called Vision Backlog.",
		"KEYWORDS": "scg-pub skip-pdf scg-none snf-none jb-none",
		"ORGANIZATION": "Springer",
		"PAGES": "758--770"
	},
	{
		"key": "Spas14a",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"ABSTRACT": "Software developers are often unsure of the exact name of the method\n\tthey need to use to invoke the desired behavior in a given context. This results\n\tin a process of searching for the correct method name in documentation, which can\n\tbe lengthy and distracting to the developer.\n\tWe can decrease the method search time by enhancing the documentation of a class\n\twith the most frequently used methods. Usage frequency data for methods is gathered\n\tby analyzing other projects from the same ecosystem - written in the same language\n\tand sharing dependencies.\n\tWe implemented a proof of concept of the approach for Pharo Smalltalk and Java. In\n\tPharo Smalltalk, methods are commonly searched for using a code browser tool called\n\t\"Nautilus\", and in Java using a web browser displaying HTML based documentation -\n\tJavadoc. We developed plugins for both browsers and gathered method usage data from\n\topen source projects, in order to increase developer productivity by reducing method\n\tsearch time.\n\tA small initial evaluation has been conducted showing promising results in improving\n\tdeveloper productivity.",
		"AUTHOR": "Spasojević, Boris and Lungu, Mircea and Nierstrasz, Oscar",
		"TITLE": "Towards Faster Method Search Through Static Ecosystem Analysis",
		"BOOKTITLE": "Proceedings of the 2014 European Conference on Software Architecture Workshops",
		"KEYWORDS": "scg-pub snf-asa1 scg14 jb14 internationalworkshop scg-bigdata Spasojevic",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"SERIES": "ECSAW '14",
		"YEAR": "2014",
		"ISBN": "978-1-4503-2778-7",
		"LOCATION": "Vienna, Austria",
		"PAGES": "11:1--11:6",
		"ARTICLENO": "11",
		"NUMPAGES": "6",
		"ACMID": "2642814",
		"ADDRESS": "New York, NY, USA",
		"MONTH": "August",
		"PUBLISHER": "ACM",
		"DOI": "10.1145/2642803.2642814",
		"URL": "http://scg.unibe.ch/archive/papers/Spas14aFasterMethodLookup.pdf"
	},
	{
		"key": "Spas14b",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"ABSTRACT": "Software developers are often unsure of the exact name of the API method they need to use to invoke the desired behavior. Most state-of-the-art documentation browsers present API artefacts in alphabetical order. Albeit easy to implement, alphabetical order does not help much: if the developer knew the name of the required method, he could have just searched for it in the first place. In a context where multiple projects use the same API, and their source code is available, we can improve the API presentation by organizing the elements in the order in which they are more likely to be used by the developer. Usage frequency data for methods is gathered by analyzing other projects from the same ecosystem and this data is used then to improve tools. We present a preliminary study on the potential of this approach to improve the API presentation by reducing the time it takes to find the method that implements a given feature. We also briefly present our experience with two proof-of-concept tools implemented for Smalltalk and Java.",
		"AUTHOR": "Spasojević, Boris and Lungu, Mircea and Nierstrasz, Oscar",
		"BOOKTITLE": "2014 IEEE International Conference on Software Maintenance and Evolution (ERA Track)",
		"DOI": "10.1109/ICSME.2014.84",
		"KEYWORDS": "scg14 jb15; scg-pub snf-asa1; scg-bigdata Spasojevic",
		"MEDIUM": "2",
		"MONTH": "September",
		"PAGES": "511-515",
		"TITLE": "Overthrowing the Tyranny of Alphabetical Ordering in Documentation Systems",
		"URL": "http://scg.unibe.ch/archive/papers/Spas14b.pdf",
		"YEAR": "2014",
		"PEERREVIEW": "yes"
	},
	{
		"key": "Spas14c",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"ABSTRACT": "Dynamically typed languages lack information about the types of variables in the source code. Developers care about this information as it supports program comprehension. Ba- sic type inference techniques are helpful, but may yield many false positives or negatives. We propose to mine information from the software ecosys- tem on how frequently given types are inferred unambigu- ously to improve the quality of type inference for a single system. This paper presents an approach to augment existing type inference techniques by supplementing the informa- tion available in the source code of a project with data from other projects written in the same language. For all available projects, we track how often messages are sent to instance variables throughout the source code. Predictions for the type of a variable are made based on the messages sent to it. The evaluation of a proof-of-concept prototype shows that this approach works well for types that are sufficiently popular, like those from the standard librarie, and tends to create false positives for unpopular or domain specific types. The false positives are, in most cases, fairly easily identifiable. Also, the evaluation data shows a substantial increase in the number of correctly inferred types when compared to the non-augmented type inference.",
		"ADDRESS": "New York, NY, USA",
		"AUTHOR": "Spasojević, Boris and Lungu, Mircea and Nierstrasz, Oscar",
		"BOOKTITLE": "Proceedings of the 2014 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software",
		"SERIES": "Onward! '14",
		"ISBN": "978-1-4503-3210-1",
		"DOI": "10.1145/2661136.2661141",
		"KEYWORDS": "scg14 jb15; scg-pub snf-asa1; scg-bigdata; Ecosystem Mining; Type Inference Spasojevic",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"LOCATION": "Portland, Oregon, USA",
		"ACMID": "2661141",
		"PAGES": "133--142",
		"NUMPAGES": "10",
		"PUBLISHER": "ACM",
		"TITLE": "Mining the Ecosystem to Improve Type Inference For Dynamically Typed Languages",
		"URL": "http://scg.unibe.ch/archive/papers/Spas14c.pdf",
		"YEAR": "2014"
	},
	{
		"key": "Spas16a",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Spasojević, Boris and Lungu, Mircea and Nierstrasz, Oscar",
		"TITLE": "A Case Study on Type Hints in Method Argument Names in Pharo Smalltalk Projects",
		"ABSTRACT": "A common practice when writing Smalltalk source code is to name method arguments in a way that hints at their expected type (i.e., aString, anInteger, aDictionary). This practice makes code more readable, but the prevalence of this practice is unknown, thus its reliability is questionable. Tools such as the auto complete feature in the Pharo Smalltalk code editor rely on these hints to improve the developer experience. The default algorithm used in Pharo to extract type information from these hints succeeds in extracting a type in slightly over 36% of method arguments taken from 114 Pharo projects. In this paper we present the results of analyzing the failing method argument names, and provide several simple heuristics that can increase the rate of success to slightly over 50%. We also present a case study on the relation between type hints and run-time types of method arguments that shows that type hints, in a great majority of cases, reflect run-time types.",
		"BOOKTITLE": "Proceedings of the 23rd IEEE International Conference on Software Analysis, Evolution, and Reengineering (SANER)",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"VOLUME": "1",
		"PAGES": "283-292",
		"YEAR": "2016",
		"MONTH": "March",
		"KEYWORDS": "scg-pub snf-asa1 scg16 jb16 Spasojevic",
		"DOI": "10.1109/SANER.2016.41",
		"URL": "http://scg.unibe.ch/archive/papers/Spas16a.pdf"
	},
	{
		"key": "Spas16b",
		"type": "inproceedings",
		"ABSTRACT": "In this paper we propose the idea of constructing an Object Repository — a repository of code snippets that, when executed, produce an instance of some class. Such a repository may be useful for several software engineering tasks like augmenting software documentation, testing object inspectors, improving program comprehension etc.\n\tWe mine code snippets from existing software systems via brute force execution of code segments obtained through converting AST nodes of methods to source code. The gathered snippets are known to be executable, and this is a novelty which is not possible with existing approaches.\n\tWe show that applying the proposed approach to 141 open source Pharo projects results in an Object Repository that can instantiate almost 80 of the available classes in these projects.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Boris Spasojević and Mohammad Ghafari and Oscar Nierstrasz",
		"TITLE": "The Object Repository, Pulling Objects out of the Ecosystem",
		"BOOKTITLE": "Proceedings of the 11th Edition of the International Workshop on Smalltalk Technologies",
		"SERIES": "IWST'16",
		"YEAR": "2016",
		"ISBN": "978-1-4503-4524-8",
		"LOCATION": "Prague, Czech Republic",
		"PAGES": "7:1--7:10",
		"ARTICLENO": "7",
		"NUMPAGES": "10",
		"URL": "http://scg.unibe.ch/archive/papers/Spas16b.pdf",
		"DOI": "10.1145/2991041.2991048",
		"ACMID": "2991048",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA",
		"KEYWORDS": "scg16 scg-pub jb16 snf-asa2 spasojevic, Ecosystem Analysis, Ecosystem Mining, Object Repository",
		"PEERREVIEW": "yes"
	},
	{
		"key": "Spas16c",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Boris Spasojević",
		"ABSTRACT": "Integrating ecosystem data into developer tools can be very beneficial but is usually complicated. By automating the routine parts of this task we can reduce the amount of work needed to develop these tools. We have developed a framework that allows developers to quickly develop new tools that use ecosystem data. This framework automates the execution of user-defined analyses on ecosystem projects, allowing the developer to focus only on what ecosystem data is needed for her tool and how to present it.",
		"TITLE": "Building Ecosystem-Aware Tools Using the Ecosystem Monitoring Framework",
		"PUBLISHER": "CEUR",
		"BOOKTITLE": "Post-proceedings of the 9th Seminar on Advanced Techniques and Tools for Software Evolution (SATToSE 2016)",
		"VOLUME": "1791",
		"YEAR": "2016",
		"MONTH": "July",
		"LOCATION": "Bergen, Norway",
		"NUMPAGES": "8",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa2 scg16 jb16 skip-doi spasojevic",
		"PDF": "http://ceur-ws.org/Vol-1791/paper-02.pdf",
		"URL": "http://scg.unibe.ch/archive/papers/Spas16c.pdf"
	},
	{
		"key": "Step09b",
		"type": "inproceedings",
		"ABSTRACT": "We present Maispion, a tool for analysing software\n\t\t\t\t  developer communities. The tool, developed in\n\t\t\t\t  Smalltalk, mines mailing list and version\n\t\t\t\t  repositories, and provides visualizations to provide\n\t\t\t\t  insights into the ecosystem of open source software\n\t\t\t\t  (OSS) development. We show how Maispion can analyze\n\t\t\t\t  the history of medium to large OSS communities, by\n\t\t\t\t  applying our tool to three well-known open source\n\t\t\t\t  projects: Moose, Drupal and Python.",
		"ADDRESS": "New York, NY, USA",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "François Stephany and Tom Mens and Tudor Gîrba",
		"BOOKTITLE": "Proceedings of International Workshop on Smalltalk Technologies (IWST 2009)",
		"DOI": "10.1145/1735935.1735944",
		"ISBN": "978-1-60558-899-5",
		"KEYWORDS": "jb10 hasler09 moose-pub scg10 scg-pub inprint girba evol11",
		"LOCATION": "Brest, France",
		"MEDIUM": "2",
		"PAGES": "50--57",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM",
		"TITLE": "Maispion: A Tool for Analysing and Visualizing Open Source Software Developer Communities",
		"URL": "http://scg.unibe.ch/archive/papers/Step09bMaispion.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Step09bMaispion.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1735935.1735944"
	},
	{
		"key": "Stul20b",
		"type": "inproceedings",
		"TITLE": "Towards Detecting Inconsistent Comments in Java Source Code Automatically",
		"AUTHOR": "Stulova, Nataliia and Blasi, Arianna and Gorla, Alessandra and Nierstrasz, Oscar",
		"ABSTRACT": "A number of tools are available to software developers to check consistency\n\t\tof source code during software evolution. However, none of these tools\n\t\tchecks for consistency of the documentation accompanying the code. As a\n\t\tresult, code and documentation often diverge, hindering program\n\t\tcomprehension. This leads to errors in how developers use source code,\n\t\tespecially in the case of APIs of reusable libraries. We propose a\n\t\ttechnique and a tool, upDoc, to automatically detect code-comment\n\t\tinconsistency during code evolution. Our technique builds a map between the\n\t\tcode and its documentation, ensuring that changes in the code match the\n\t\tchanges in respective documentation parts. We conduct a preliminary\n\t\tevaluation using inconsistency examples from an existing dataset of Java\n\t\topen source projects, showing that upDoc can successfully detect them. We\n\t\tpresent a roadmap for the further development of the technique and its\n\t\tevaluation.",
		"BOOKTITLE": "2020 IEEE 20th International Working Conference on Source Code Analysis and Manipulation (SCAM)",
		"PAGES": "65--69",
		"YEAR": "2020",
		"KEYWORDS": "scg-pub snf-asa3 scg20 jb21",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"DOI": "10.1109/SCAM51674.2020.00012",
		"URL": "http://scg.unibe.ch/archive/papers/Stul20b-InconsistentComments.pdf",
		"ORGANIZATION": "IEEE"
	},
	{
		"key": "Syre15a",
		"type": "inproceedings",
		"ABSTRACT": "Program comprehension requires developers to reason about many kinds of highly interconnected software entities. Dealing with this reality prompts developers to continuously intertwine searching and navigation. Nevertheless, most integrated development environments (IDEs) address searching by means of many disconnected search tools, making it difficult for developers to reuse search results produced by one search tool as input for another search tool. This forces developers to spend considerable time manually linking disconnected search results. To address this issue we propose Spotter, a model for expressing and combining search tools in a unified way. The current implementation shows that Spotter can unify a wide range of search tools. More information about Spotter can be found at scg.unibe.ch/research/moldablespotter",
		"AUTHOR": "Aliaksei Syrel and Andrei Chiş and Tudor Gîrba and Juraj Kubelka and Oscar Nierstrasz and Stefan Reichhart",
		"TITLE": "Spotter: towards a unified search interface in IDEs",
		"BOOKTITLE": "Proceedings of the Companion Publication of the 2015 ACM SIGPLAN Conference on Systems, Programming, and Applications: Software for Humanity",
		"SERIES": "SPLASH Companion 2015",
		"YEAR": "2015",
		"LOCATION": "Pittsburgh, PA, USA",
		"PAGES": "54--55",
		"NUMPAGES": "2",
		"URL": "http://scg.unibe.ch/archive/papers/Syre15a-SpotterPosterAbstract.pdf",
		"DOI": "10.1145/2814189.2817269",
		"ISBN": "978-1-4503-3722-9",
		"ACMID": "2817269",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA",
		"KEYWORDS": "snf-asa1, scg-pub scg15 jb16, Andrei Chis, Tudor Girba, girba feenk-pub",
		"PEERREVIEW": "yes",
		"MEDIUM": "2"
	},
	{
		"key": "Tant06a",
		"type": "inproceedings",
		"ABSTRACT": "Context-aware applications behave differently\n\t\t\t\t  depending on the context in which they are running.\n\t\t\t\t  Since context-specific behavior tends to crosscut\n\t\t\t\t  base programs, it can advantageously be implemented\n\t\t\t\t  as aspects. This leads to the notion of\n\t\t\t\t  context-aware aspects, e.g., aspects whose behavior\n\t\t\t\t  depends on context. This paper analyzes the issue of\n\t\t\t\t  appropriate support from the aspect language to both\n\t\t\t\t  restrict the scope of aspects according to the\n\t\t\t\t  context and allow aspect definitions to access\n\t\t\t\t  information associated to the context. We propose an\n\t\t\t\t  open framework for context-aware aspects that allows\n\t\t\t\t  for the definition of first-class contexts and\n\t\t\t\t  supports the definition of context awareness\n\t\t\t\t  constructs for aspects, including the ability to\n\t\t\t\t  refer to past contexts, and to provide domain- and\n\t\t\t\t  application-specific constructs.",
		"ADDRESS": "Vienna, Austria",
		"AERES": "ACT",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Éric Tanter and Kris Gybels and Marcus Denker and Alexandre Bergel",
		"BOOKTITLE": "Proceedings of the 5th International Symposium on Software Composition (SC 2006)",
		"DOI": "10.1007/11821946_15",
		"INRIA": "hors",
		"ISBN": "978-3-540-37657-6",
		"KEYWORDS": "scg-pub scg-none jb06 fb06 snf06",
		"MEDIUM": "2",
		"MONTH": "March",
		"PAGES": "227--242",
		"PEERREVIEW": "yes",
		"SELECTIF": "non",
		"SERIES": "LNCS",
		"TITLE": "Context-Aware Aspects",
		"URL": "http://scg.unibe.ch/archive/papers/Tant06aContextAspectsSC2006.pdf",
		"VOLUME": "4089",
		"YEAR": "2006",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Tant06aContextAspectsSC2006.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/11821946_15"
	},
	{
		"key": "Teru15a",
		"type": "article",
		"YEAR": "2015",
		"ABSTRACT": "Scoping behavioral variations to dynamic extents is useful\n\t\tto support non-functional concerns that otherwise result in\n\t\tcross-cutting code. Unfortunately, such forms of scoping are difficult\n\t\tto obtain with traditional reflection or aspects. We propose delegation\n\t\tproxies, a dynamic proxy model that supports behavioral intercession\n\t\tthrough the interception of various interpretation operations.\n\t\tDelegation proxies permit different behavioral variations to be easily\n\t\tcomposed together. We show how delegation proxies enable behavioral\n\t\tvariations that can propagate to dynamic extents. We demonstrate our\n\t\tapproach with examples of behavioral variations scoped to dynamic\n\t\textents that help simplify code related to safety, reliability, and\n\t\tmonitoring.",
		"ISBN": "978-3-662-46733-6",
		"JOURNAL": "Transactions on Aspect-Oriented Software Development XII",
		"VOLUME": "8989",
		"SERIES": "Lecture Notes in Computer Science",
		"EDITOR": "Chiba, Shigeru and Tanter, Éric and Ernst, Erik and Hirschfeld, Robert",
		"DOI": "10.1007/978-3-662-46734-3_2",
		"TITLE": "Propagation of Behavioral Variations with Delegation Proxies",
		"PUBLISHER": "Springer Berlin Heidelberg",
		"KEYWORDS": "scg-pub snf-asa1 scg15 jb15",
		"AUTHOR": "Teruel, Camille and Wernli, Erwann and Ducasse, Stéphane and Nierstrasz, Oscar",
		"PAGES": "63-95",
		"ANNOTE": "internationaljournal",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"URL": "http://scg.unibe.ch/archive/papers/Teru15a-delegation-proxies.pdf"
	},
	{
		"key": "Tich97b",
		"type": "inproceedings",
		"ABSTRACT": "In this workshop proposal we present a prototype\n\t\t\t\t  approach to help the extraction of architectural\n\t\t\t\t  information in the re-engineering process. Commonly,\n\t\t\t\t  the re-engineering life-cycle has been defined as a\n\t\t\t\t  succession of the following tasks: analysis of\n\t\t\t\t  requirements, model capture (understanding the\n\t\t\t\t  system), problem detection, problem analysis,\n\t\t\t\t  reorganization and change propagation. We have\n\t\t\t\t  evaluated the benefit of a prototyping approach with\n\t\t\t\t  a focus on model capture. Although prototyping is a\n\t\t\t\t  known approach to evaluate the application\n\t\t\t\t  feasibility, costs, comparison and validation of\n\t\t\t\t  choices, we focus in this paper on the aspects of\n\t\t\t\t  prototyping that are helpful for re-engineering.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Sander Tichelaar and Stéphane Ducasse and Theo-Dirk Meijler",
		"BOOKTITLE": "Proceedings of the ESEC/FSE Workshop on Object-Oriented Re-engineering",
		"EDITOR": "Serge Demeyer and Harald Gall",
		"KEYWORDS": "olit famoos-papunr tich-papunr scglit oobib scg-pub skip-doi snf97 scg-none jb97 stePub",
		"MONTH": "September",
		"NOTE": "Technical Report TUV-1841-97-10",
		"PUBLISHER": "Technical University of Vienna, Information Systems Institute, Distributed Systems Group",
		"TITLE": "Architectural Extraction In Reverse Engineering by Prototyping: An experiment",
		"URL": "http://scg.unibe.ch/archive/papers/Tich97bArchExtraction.pdf",
		"YEAR": "1997",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Tich97bArchExtraction.pdf"
	},
	{
		"key": "Tich98m",
		"type": "inproceedings",
		"ABSTRACT": "Tools support is recognised as a key issue in the\n\t\t\t\t  reengineering of large scale object-oriented\n\t\t\t\t  systems. However, due to the heterogeneity in\n\t\t\t\t  today's object-oriented programming languages, it is\n\t\t\t\t  hard to reuse reengineering tools across legacy\n\t\t\t\t  systems. This paper proposes a language independent\n\t\t\t\t  exchange model, so that tools may perform their\n\t\t\t\t  tasks independent of the underlying programming\n\t\t\t\t  language. Beside supporting reusability between\n\t\t\t\t  tools, we expect that this exchange model will\n\t\t\t\t  enhance the interoperability between tools for\n\t\t\t\t  metrics, visualization, reorganisation and other\n\t\t\t\t  reengineering activities.",
		"AUTHOR": "Sander Tichelaar and Serge Demeyer",
		"BOOKTITLE": "Object-Oriented Technology (ECOOP '98 Workshop Reader)",
		"EDITOR": "Serge Demeyer and Jan Bosch",
		"KEYWORDS": "olit scg-pub skip-doi famoos-papunr sergedem-papunr tich-papunr snf98 scg-none jb98",
		"MONTH": "July",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "An Exchange Model for Reengineering Tools",
		"URL": "http://scg.unibe.ch/archive/famoos/Tich98m/ecoop98exchmod.pdf",
		"VOLUME": "1543",
		"YEAR": "1998",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/famoos/Tich98m/ecoop98exchmod.pdf"
	},
	{
		"key": "Tich99m",
		"type": "inproceedings",
		"ABSTRACT": "Nowadays development environments are required to be\n\t\t\t\t  open: users want to be able to work with a\n\t\t\t\t  combination of their preferred commercial and\n\t\t\t\t  home-grown tools. TakeFive has opened up SNiFF+ with\n\t\t\t\t  a so-called \"Symbol Table API\"; Rational has opened\n\t\t\t\t  up the UML tool Rose via the so-called \"Rose\n\t\t\t\t  Extensibility Interface (REI)\". On the other hand,\n\t\t\t\t  efforts are underway to define standards for\n\t\t\t\t  exchanging information between case-tools; CDIF\n\t\t\t\t  being a notable example. This paper reports on our\n\t\t\t\t  experience to generate UML diagrams in Rational Rose\n\t\t\t\t  from the symbol table in SNiFF+ using a standard\n\t\t\t\t  CDIF exchange format.",
		"AUTHOR": "Sander Tichelaar and Serge Demeyer",
		"BOOKTITLE": "SNiFF+ User's Conference",
		"KEYWORDS": "olit scg-pub skip-doi famoos-papunr sergedem-papunr tich-papunr snf99 scg-none jb99",
		"MONTH": "January",
		"NOTE": "Also in the \"Proceedings of the ESEC/FSE '99 Workshop on Object-Oriented Re-engineering (WOOR '99)\" — Technical Report of the Technical University of Vienna (TUV-1841-99-13)",
		"TITLE": "SNiFF+ Talks to Rational Rose — Interoperability using a Common Exchange Model",
		"URL": "http://scg.unibe.ch/archive/papers/Tich99mSniffToRationalRose.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Tich99mSniffToRationalRose.pdf"
	},
	{
		"key": "Tich99z",
		"type": "techreport",
		"ABSTRACT": "This document describes the language plug-in to the\n\t\t\t\t  FAMIX 2.0 model for the Java programming language.\n\t\t\t\t  It handles interpretation issues concerning Java\n\t\t\t\t  in FAMIX and the extension of the FAMIX model for\n\t\t\t\t  Jav specific features.",
		"AUTHOR": "Sander Tichelaar",
		"INSTITUTION": "University of Bern",
		"KEYWORDS": "scg-pub skip-doi scg-none jb-none olit famoos-techrep tich-techrep snf99 moose-pub",
		"MONTH": "September",
		"TITLE": "FAMIX Java language plug-in 1.0",
		"URL": "http://scg.unibe.ch/archive/famoos/FAMIX/Plugins/JavaPlugin1.0.html http://scg.unibe.ch/archive/famoos/FAMIX/Plugins/JavaPlugin1.0.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/famoos/FAMIX/Plugins/JavaPlugin1.0.html%20http://scg.unibe.ch/archive/famoos/FAMIX/Plugins/JavaPlugin1.0.pdf"
	},
	{
		"key": "Tich00a",
		"type": "inproceedings",
		"ABSTRACT": "The distributed nature of a typical web application\n\t\t\t\t  combined with the rapid evolution of underlying\n\t\t\t\t  platforms demands for a plug-in component\n\t\t\t\t  architecture. Nevertheless, code for controlling\n\t\t\t\t  distributed activities is usually spread over\n\t\t\t\t  multiple subsystems, which makes it hard to\n\t\t\t\t  dynamically reconfigure coordination services. This\n\t\t\t\t  paper investigates coordination components as a way\n\t\t\t\t  to encapsulate the coordination of a distributed\n\t\t\t\t  system into a separate, pluggable entity. In an\n\t\t\t\t  object-oriented context we introduce two design\n\t\t\t\t  guidelines (namely, \"turn contracts into objects\"\n\t\t\t\t  and \"turn configuration into a factory object\") that\n\t\t\t\t  help developers to separate coordination from\n\t\t\t\t  computation and to develop reusable and flexible\n\t\t\t\t  solutions for coordination in distributed systems.",
		"AUTHOR": "Sander Tichelaar and Juan Carlos Cruz and Serge Demeyer",
		"BOOKTITLE": "Proceedings ACM SAC 2000",
		"DOI": "10.1145/335603.335758",
		"EDITOR": "Janice Carroll and Ernesto Damiani and Hisham Haddad and Dave Oppenheim",
		"KEYWORDS": "coordination components scg-pub tich-papref sergedem-papref scg-coord-00 snf00 scg-none jb00",
		"MONTH": "March",
		"PAGES": "270--277",
		"PUBLISHER": "ACM",
		"TITLE": "Design Guidelines for Coordination Components",
		"URL": "http://scg.unibe.ch/archive/papers/Tich00aDesignGuidelines.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Tich00aDesignGuidelines.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/335603.335758"
	},
	{
		"key": "Tich00b",
		"type": "inproceedings",
		"ABSTRACT": "Refactoring — transforming code while preserving\n\t\t\t\t  behaviour — is currently considered a key approach\n\t\t\t\t  for improving object-oriented software systems.\n\t\t\t\t  Unfortunately, all of the current refactoring tools\n\t\t\t\t  depend on language-dependent refactoring engines,\n\t\t\t\t  which prevents a smooth integration with mainstream\n\t\t\t\t  development environments. In this paper we\n\t\t\t\t  investigate the similarities between refactorings\n\t\t\t\t  for Smalltalk and Java, derive a\n\t\t\t\t  language-independent meta-model and show that it is\n\t\t\t\t  feasible to build a language-independent refactoring\n\t\t\t\t  engine on top of this meta-model. Our feasibility\n\t\t\t\t  study is validated by means of a tool prototype\n\t\t\t\t  which uses the same engine to refactor both\n\t\t\t\t  Smalltalk and Java code. Using our approach we\n\t\t\t\t  minimize the language-dependent part of refactoring\n\t\t\t\t  tools, providing a standard way for programmers and\n\t\t\t\t  tools to perform refactorings no matter what\n\t\t\t\t  language they work in.",
		"ACCEPTNUM": "22",
		"ACCEPTTOTAL": "51",
		"ADDRESS": "Los Alamitos, CA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Sander Tichelaar and Stéphane Ducasse and Serge Demeyer and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of International Symposium on Principles of Software Evolution (ISPSE '00)",
		"DOI": "10.1109/ISPSE.2000.913233",
		"KEYWORDS": "reengineering refactoring FAMIX repositories mooseCincom tich-papref scg-pub scg-none jb00 snf01 stefPub onhindex(92) moose-pub",
		"MISC": "acceptance rate: 22/51 = 43",
		"MONTH": "November",
		"PAGES": "157--167",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "A Meta-model for Language-Independent Refactoring",
		"URL": "http://scg.unibe.ch/archive/papers/Tich00bRefactoringMetamodel.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Tich00bRefactoringMetamodel.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ISPSE.2000.913233"
	},
	{
		"key": "Tich00m",
		"type": "inproceedings",
		"ABSTRACT": "In the FAMOOS project we have developed a set of\n\t\t\t\t  tools for reengineering object-oriented legacy\n\t\t\t\t  systems. These tools are based on the FAMIX meta\n\t\t\t\t  model and exchange information using CDIF, an\n\t\t\t\t  industry standard exchange format. For several\n\t\t\t\t  reasons XMI, an emerging standard for information\n\t\t\t\t  exchange, has appealed to us to be used as our\n\t\t\t\t  interchange format. In this paper we discuss why XMI\n\t\t\t\t  is interesting for us and what, to our current\n\t\t\t\t  experience, are the advantages and disadvantages of\n\t\t\t\t  XMI over CDIF.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Sander Tichelaar and Stéphane Ducasse and Serge Demeyer",
		"BOOKTITLE": "Proceedings of the ICSE 2000 Workshop on Standard Exchange Format (WoSEF 2000)",
		"KEYWORDS": "components scg-pub skip-doi tich-papunr sergedem-papunr snf00 scg-none jb00 stefPub moose-pub",
		"MONTH": "June",
		"TITLE": "FAMIX: Exchange Experiences with CDIF and XMI",
		"URL": "http://scg.unibe.ch/archive/papers/Tich00mFamixCdifXmi.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Tich00mFamixCdifXmi.pdf"
	},
	{
		"key": "Tich00n",
		"type": "inproceedings",
		"ABSTRACT": "Recently exchange formats have gained lots of\n\t\t\t\t  attention. Multiple tools need to interact and/or\n\t\t\t\t  work on the same software system. Especially there\n\t\t\t\t  is a need to reuse parser technology. Within the\n\t\t\t\t  FAMOOS project we have developed a model for\n\t\t\t\t  representing object-oriented software systems at the\n\t\t\t\t  program entity level. The model has been designed\n\t\t\t\t  for language independence, extensibility and\n\t\t\t\t  information exchange. For the actual exchange of\n\t\t\t\t  data we are currently moving to use XMI, a standard\n\t\t\t\t  for model-based information exchange.",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Sander Tichelaar and Stéphane Ducasse and Serge Demeyer",
		"BOOKTITLE": "Proceedings WCRE 2000 Workshop on Exchange Formats",
		"DOI": "10.1109/WCRE.2000.891485",
		"KEYWORDS": "components scg-pub tich-papunr sergedem-papunr snf00 scg-none jb00 stefPub moose-pub",
		"MONTH": "November",
		"PAGES": "296--296",
		"PUBLISHER": "IEEE Computer Society Press",
		"TITLE": "FAMIX and XMI",
		"URL": "http://scg.unibe.ch/archive/papers/Tich00nFamixWCRE2000.pdf",
		"YEAR": "2000",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Tich00nFamixWCRE2000.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2000.891485"
	},
	{
		"key": "Tymc16a",
		"type": "inproceedings",
		"AUTHOR": "Yuriy Tymchuk and Leonel Merino and Mohammad Ghafari and Oscar Nierstrasz",
		"TITLE": "Walls, Pillars and Beams: A 3D Decomposition of Quality Anomalies",
		"BOOKTITLE": "VISSOFT'16: Proceedings of the 4th IEEE Working Conference on Software Visualization",
		"ABSTRACT": "Quality rules are used to capture important implementation and design decisions embedded in a software system's architecture. They can automatically analyze software and assign quality grades to its components.\nTo provide a meaningful evaluation of quality, rules have to stay up-to-date with the continuously evolving system that they describe. However one would encounter unexpected anomalies during a historical overview because the notion of quality is always changing, while the qualitative evolution analysis requires it to remain constant.\nTo understand the anomalies in a quality history of a real-world software system we use an immersive visualization that lays out the quality fluctuations in three dimensions based on two co-evolving properties: quality rules and source code. This helps us to identify and separate the impact caused by the changes of each property, and allows us to detect significant mistakes that happened during the development process.",
		"ANNOTE": "internationalconference",
		"PUBLISHER": "IEEE",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"KEYWORDS": "scg-pub snf-asa2 scg16 jb16 tymchuk",
		"YEAR": "2016",
		"URL": "http://scg.unibe.ch/archive/papers/Tymc16a.pdf",
		"DOI": "10.1109/VISSOFT.2016.9",
		"PAGES": "126--135"
	},
	{
		"key": "Tymc16b",
		"type": "inproceedings",
		"ABSTRACT": "Static analysis tools can aid in software quality assessment, but are rarely used by software developers.\nPoor usage of quality analysis tools not only means missed opportunities for the quality of software systems, but also results in little feedback, which in turn slows the improvements of the quality rules themselves.\nWe introduced a set of intrusive quality plugins and integrated them into the Pharo IDE. This not only triggered a feedback loop that led to improvements of the existing rules, but also encouraged removal of some rules and integration of new ones.\nOur analysis of changes to the rules suggests that precise rules capturing a domain-specific logic are more valuable than general ones.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Yuriy Tymchuk and Mohammad Ghafari and Oscar Nierstrasz",
		"BOOKTITLE": "IWST '16: Proceedings of International Workshop on Smalltalk Technologies",
		"KEYWORDS": "scg16 scg-pub jb16 snf-asa2 tymchuk",
		"PEERREVIEW": "yes",
		"DOI": "10.1145/2991041.2991046",
		"TITLE": "When QualityAssistant Meets Pharo: Enforced Code Critiques Motivate More Valuable Rules",
		"URL": "http://scg.unibe.ch/archive/papers/Tymc16b.pdf",
		"YEAR": "2016",
		"PAGES": "5:1--5:6",
		"MEDIUM": "4"
	},
	{
		"key": "Tymc17a",
		"type": "misc",
		"AUTHOR": "Yuriy Tymchuk",
		"TITLE": "Renraku v0.15.2",
		"MONTH": "May",
		"YEAR": "2017",
		"MEDIUM": "1",
		"PEERREVIEW": "no",
		"DOI": "10.5281/zenodo.800676",
		"URL": "https://doi.org/10.5281/zenodo.800676",
		"KEYWORDS": "scg17 scg-pub jb17 snf-none",
		"ABSTRACT": "Renraku is an extensible static analysis model designed to connect analyzers and tools conveniently. It defines how algorithms should provide external properties of source code, and how tools should consume these properties. Not only the unique model lifts the complexity burden from static analysis engineering but opens entirely new horizons unseen by the others."
	},
	{
		"key": "Tymc17b",
		"type": "misc",
		"AUTHOR": "Yuriy Tymchuk",
		"TITLE": "QualityAssistant v3.3.1",
		"MONTH": "June",
		"YEAR": "2017",
		"MEDIUM": "1",
		"KEYWORDS": "scg17 scg-pub jb17 snf-none",
		"PEERREVIEW": "no",
		"DOI": "10.5281/zenodo.809410",
		"URL": "https://doi.org/10.5281/zenodo.809410",
		"ABSTRACT": "QualityAssistant is a live quality feedback plugin based on SmallLint, which reports code quality violations to software developers as they work with the code."
	},
	{
		"key": "Tymc17c",
		"type": "inproceedings",
		"ANNOTE": "internationalworkshop",
		"ABSTRACT": "Static analysis tools may produce false positive results, which negatively impact the overall usability of these tools.\nHowever, even a correct static analysis report is sometimes classified as a false positive if a developer does not understand it or does not agree with it.\nLately developers' classification of false positives is treated on a par with the actual static analysis performance which may distort the knowledge about the real state of static analysis. In this paper we discuss various use cases where a false positive report is not false and the issue is caused by another aspects of static analysis.\nWe provide an in-depth explanation of the issue for each use case followed by recommendations on how to solve it, and thus exemplify the importance of careful false positive classification.",
		"AUTHOR": "Tymchuk, Yuriy",
		"BOOKTITLE": "SATToSE'17: Pre-Proceedings of the 10th International Seminar Series on Advanced Techniques & Tools for Software Evolution",
		"PEERREVIEW": "yes",
		"MEDIUM": "1",
		"KEYWORDS": "scg-pub snf-asa2 scg17 jb17 skip-doi tymchuk",
		"MONTH": "June",
		"LOCATION": "Madrid, Spain",
		"TITLE": "The False False Positives of Static Analysis",
		"YEAR": "2017",
		"URL": "http://scg.unibe.ch/archive/papers/Tymc17c.pdf",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Tymc17c.pdf"
	},
	{
		"key": "Tymc17d",
		"type": "inproceedings",
		"ABSTRACT": "Most of the static analyzers are monolithic applications that define their own ways to analyze source code and present the results.\nTherefore aggregating multiple static analyzers into a single tool or integrating a new analyzer into existing tools requires a significant amount of effort.\nOver the last few years, we cultivated Renraku — a static analysis model that acts as a mediator between the static analyzers and the tools that present the reports.\nWhen used by both analysis and tool developers, the single quality model can reduce the cost to both introduce a new type of analysis to existing tools or create a tool that relies on existing analyzers.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Yuriy Tymchuk and Mohammad Ghafari and Oscar Nierstrasz",
		"BOOKTITLE": "IWST'17: Proceedings of International Workshop on Smalltalk Technologies",
		"KEYWORDS": "scg17 scg-pub jb17 snf-asa2 tymchuk",
		"PEERREVIEW": "yes",
		"TITLE": "Renraku — the One Static Analysis Model to Rule Them All",
		"LOCATION": "Maribor, Slovenia",
		"URL": "http://scg.unibe.ch/archive/papers/Tymc17d.pdf",
		"DOI": "10.1145/3139903.3139919",
		"YEAR": "2017",
		"MEDIUM": "4"
	},
	{
		"key": "Tymc17e",
		"type": "misc",
		"AUTHOR": "Tymchuk, Yuriy",
		"TITLE": "QualityAssistant Interactions",
		"MONTH": "August",
		"YEAR": "2017",
		"DOI": "10.5281/zenodo.846690",
		"MEDIUM": "1",
		"KEYWORDS": "scg17 scg-pub jb17 snf-none",
		"PEERREVIEW": "no",
		"URL": "https://doi.org/10.5281/zenodo.846690",
		"ABSTRACT": "The dataset contains recordings of developers interacting with the QualityAssistant static analysis plugin in Pharo IDE (version 5 and 6). We recorded 7786 development sessions from 547 developers in a time span of 322 days. In a regular programming session, the developer launches the Pharo IDE and uses the code editor to display code. The Pharo IDE allows the developer to work on a single method or class definition at a time. QualityAssistant then evaluates the browsed code; if the tool finds quality violations, it displays them in the code editor. The developer eventually edits the code, i.e., performing code transformations either manually or using automated tools. After the developer compiles the code, QualityAssistant re-evaluates it and thus more or fewer violations may be displayed to the developer."
	},
	{
		"key": "Tymc18a",
		"type": "inproceedings",
		"AUTHOR": "Yuriy Tymchuk and Mohammad Ghafari and Oscar Nierstrasz",
		"ABSTRACT": "Although software developers are usually reluctant to\n\t\tuse static analysis to detect issues in their source\n\t\tcode, our automatic just-in-time (JIT) static analysis\n\t\tassistant was integrated into an Integrated\n\t\tDevelopment Environment, and was evaluated positively\n\t\tby its users. We conducted interviews to understand\n\t\tthe impact of the tool on experienced developers, and\n\t\thow it performs in comparison with other static\n\t\tanalyzers. We learned that the availability of our\n\t\ttool as a default IDE feature and its automatic\n\t\texecution are the main reasons for its adoption.\n\t\tMoreover, the fact that immediate feedback is provided\n\t\tdirectly in the related development context is\n\t\tessential to keeping developers satis ed, although in\n\t\tcertain cases feedback delivered later was deemed more\n\t\tuseful. We also discovered that static analyzers can\n\t\tplay an educational role, especially in combination\n\t\twith domain-specific rules.",
		"LOCATION": "Gothenburg, Sweden",
		"KEYWORDS": "scg-pub snf-asa2 scg18 jb18",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"BOOKTITLE": "26th IEEE International Conference on Program Comprehension (ICPC 2018)",
		"ANNOTE": "internationalconference",
		"URL": "http://scg.unibe.ch/archive/papers/Tymc18a.pdf",
		"DOI": "10.1145/3196321.3196327",
		"TITLE": "JIT Feedback — what Experienced Developers like about Static Analysis",
		"PAGES": "64--73",
		"YEAR": "2018"
	},
	{
		"key": "Varo95a",
		"type": "techreport",
		"ABSTRACT": "This report presents the implementation of the\n\t\t\t\t  \"Generic Synchronization Policies\" (abbreviated as\n\t\t\t\t  GSP) using the language Pict. The main goal of this\n\t\t\t\t  work was to see how well suited Pict is for\n\t\t\t\t  implementing higher level abstractions. The\n\t\t\t\t  remainder of this report is structured as follows:\n\t\t\t\t  Section 2 briefly introduces the GSP concept. Pict\n\t\t\t\t  and its object model are presented in section 3. The\n\t\t\t\t  implementation of GSP is the heart of section 4.\n\t\t\t\t  Finally, Section 5 mention future possible works.",
		"AUTHOR": "Patrick Varone",
		"INSTITUTION": "University of Bern, Institute of Computer Science and Applied Mathematics",
		"KEYWORDS": "olit scg-pub skip-doi toBeChecked snf95 scg-none jb95",
		"MONTH": "February",
		"NUMBER": "IAM-96-005",
		"TITLE": "Implementation of `Generic Synchronization Policies' in Pict",
		"TYPE": "Technical Report",
		"URL": "http://scg.unibe.ch/archive/papers/Varo95aGSPinPict.pdf",
		"YEAR": "1996",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Varo95aGSPinPict.pdf"
	},
	{
		"key": "Vasa07b",
		"type": "inproceedings",
		"ABSTRACT": "Real software systems change and become more complex\n\t\t\t\t  over time. But which parts change and which parts\n\t\t\t\t  remain stable? Common wisdom, for example, states\n\t\t\t\t  that in a well-designed object-oriented system, the\n\t\t\t\t  more popular a class is, the less likely it is to\n\t\t\t\t  change from one version to the next, since changes\n\t\t\t\t  to this class are likely to impact its clients. We\n\t\t\t\t  have studied consecutive releases of several public\n\t\t\t\t  domain, object-oriented software systems and\n\t\t\t\t  analyzed a number of measures indicative of size,\n\t\t\t\t  popularity, and complexity of classes and\n\t\t\t\t  interfaces. As it turns out, the distributions of\n\t\t\t\t  these measures are remarkably stable as an\n\t\t\t\t  application evolves. The distribution of class size\n\t\t\t\t  and complexity retains its shape over time.\n\t\t\t\t  Relatively little code is modified over time.\n\t\t\t\t  Classes that tend to be modified, however, are also\n\t\t\t\t  the more popular ones, that is, those with greater\n\t\t\t\t  Fan-In. In general, the more \"complex\" a class or\n\t\t\t\t  interface becomes, the more likely it is to change\n\t\t\t\t  from one version to the next.",
		"ADDRESS": "Los Alamitos CA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Rajesh Vasa and Jean-Guy Schneider and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of 23rd IEEE International Conference on Software Maintenance (ICSM '07)",
		"CITY": "Paris, France",
		"DOI": "10.1109/ICSM.2007.4362613",
		"KEYWORDS": "scg07 scg-pub jb08 snf08",
		"MEDIUM": "2",
		"PAGES": "4--13",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "The Inevitable Stability of Software Change",
		"URL": "http://scg.unibe.ch/archive/papers/Vasa07bInevitableChange.pdf",
		"YEAR": "2007",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Vasa07bInevitableChange.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.2007.4362613"
	},
	{
		"key": "Vasa08a",
		"type": "inproceedings",
		"ABSTRACT": "Software systems evolve over time incrementally and\n\t\t\t\t  sections of code are modified. But, how much does\n\t\t\t\t  code really change? Lehman's laws suggest that\n\t\t\t\t  software must be continuously adapted to be useful.\n\t\t\t\t  We have studied the evolution of several public\n\t\t\t\t  domain object-oriented software systems and analyzed\n\t\t\t\t  the rate as well as the amount of change that\n\t\t\t\t  individual classes undergo as they evolve. Our\n\t\t\t\t  observations suggest that although classes are\n\t\t\t\t  modified, the majority of changes are minor and only\n\t\t\t\t  a small proportion of classes undergo significant\n\t\t\t\t  modification.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Rajesh Vasa and Jean-Guy Schneider and Oscar Nierstrasz and Clint Woodward",
		"BOOKTITLE": "Proceedings of 3d International ERCIM Symposium on Software Evolution (Software Evolution 2007)",
		"EDITOR": "Tom Mens and Maja D'Hondt and Kim Mens",
		"ISSN": "1863-2122",
		"KEYWORDS": "scg07 scg-pub skip-doi jb08 snf08",
		"MEDIUM": "2",
		"PEERREVIEW": "yes",
		"PUBLISHER": "Electronic Communications of the EASST",
		"TITLE": "On the Resilience of Classes to Change",
		"URL": "http://scg.unibe.ch/archive/papers/Vasa08aResilienceToChange.pdf",
		"URL2": "http://eceasst.cs.tu-berlin.de/index.php/eceasst/article/view/121",
		"VOLUME": "8",
		"YEAR": "2008",
		"BDSK-URL-1": "http://eceasst.cs.tu-berlin.de/index.php/eceasst/article/view/121%20http://scg.unibe.ch/archive/papers/Vasa08aResilienceToChange.pdf"
	},
	{
		"key": "Vasa09a",
		"type": "inproceedings",
		"ABSTRACT": "Software metrics offer us the promise of distilling\n\t\t\t\t  useful information from vast amounts of software in\n\t\t\t\t  order to track development progress, to gain\n\t\t\t\t  insights into the nature of the software, and to\n\t\t\t\t  identify potential problems. Unfortunately, however,\n\t\t\t\t  many software metrics exhibit highly skewed,\n\t\t\t\t  non-Gaussian distributions. As a consequence, usual\n\t\t\t\t  ways of interpreting these metrics — for example,\n\t\t\t\t  in terms of \"average\" values — can be highly\n\t\t\t\t  misleading. Many metrics, it turns out, are\n\t\t\t\t  distributed like wealth — with high concentrations\n\t\t\t\t  of values in selected locations. We propose to\n\t\t\t\t  analyze software metrics using the Gini coefficient,\n\t\t\t\t  a higher-order statistic widely used in economics to\n\t\t\t\t  study the distribution of wealth. Our approach\n\t\t\t\t  allows us not only to observe changes in software\n\t\t\t\t  systems efficiently, but also to assess project\n\t\t\t\t  risks and monitor the development process itself. We\n\t\t\t\t  apply the Gini coefficient to numerous metrics over\n\t\t\t\t  a range of software projects, and we show that many\n\t\t\t\t  metrics not only display remarkably high Gini\n\t\t\t\t  values, but that these values are remarkably\n\t\t\t\t  consistent as a project evolves over time.",
		"ADDRESS": "Los Alamitos, CA, USA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Rajesh Vasa and Markus Lumpe and Philip Branch and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 25th International Conference on Software Maintenance (ICSM 2009)",
		"DOI": "10.1109/ICSM.2009.5306322",
		"JOURNAL": "icsm",
		"KEYWORDS": "scg09 scg-pub snf09 jb10",
		"MEDIUM": "2",
		"PAGES": "179--188",
		"PEERREVIEW": "yes",
		"PUBLISHER": "IEEE Computer Society",
		"TITLE": "Comparative Analysis of Evolving Software Systems Using the Gini Coefficient",
		"URL": "http://scg.unibe.ch/archive/papers/Vasa09aGiniICSM.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Vasa09aGiniICSM.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICSM.2009.5306322"
	},
	{
		"key": "Verb08a",
		"type": "inproceedings",
		"ABSTRACT": "Industrial software systems are large and complex,\n\t\t\t\t  both in terms of the software entities and their\n\t\t\t\t  relationships. Consequently, understanding how a\n\t\t\t\t  software system works requires the ability to pose\n\t\t\t\t  queries over the design-level entities of the\n\t\t\t\t  system. Traditionally, this task has been supported\n\t\t\t\t  by simple tools (e.g., grep) combined with the\n\t\t\t\t  programmer's intuition and experience. Recently,\n\t\t\t\t  however, specialized code query technologies have\n\t\t\t\t  matured to the point where they can be used in\n\t\t\t\t  industrial situations, providing more intelligent,\n\t\t\t\t  timely, and efficient responses to developer\n\t\t\t\t  queries. This working session aims to explore the\n\t\t\t\t  state of the art in code query technologies, and\n\t\t\t\t  discover new ways in which these technologies may be\n\t\t\t\t  useful in program comprehension. The session brings\n\t\t\t\t  together researchers and practitioners. We survey\n\t\t\t\t  existing techniques and applications, trying to\n\t\t\t\t  understand the strengths and weaknesses of the\n\t\t\t\t  various approaches, and sketch out new frontiers\n\t\t\t\t  that hold promise.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Mathieu Verbaere and Michael W. Godfrey and Tudor Gîrba",
		"BOOKTITLE": "Proceedings of International Conference on Program Comprehension (ICPC 2008)",
		"DOI": "10.1109/ICPC.2008.27",
		"KEYWORDS": "scg08 scg-pub snf-none moose-pub girba jb08 hasler08",
		"MEDIUM": "2",
		"PAGES": "285--288",
		"PEERREVIEW": "yes",
		"TITLE": "Query Technologies and Applications for Program Comprehension",
		"URL": "http://scg.unibe.ch/archive/papers/Verb08aQTAPC2008.pdf",
		"YEAR": "2008",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Verb08aQTAPC2008.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/ICPC.2008.27"
	},
	{
		"key": "Verc18a",
		"type": "inproceedings",
		"AUTHOR": "Vercammen, Sten and Ghafari, Mohammad and Demeyer, Serge and Borg, Markus",
		"TITLE": "Goal-oriented Mutation Testing with Focal Methods",
		"BOOKTITLE": "Proceedings of the 9th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation",
		"SERIES": "A-TEST 2018",
		"YEAR": "2018",
		"ISBN": "978-1-4503-6053-1",
		"LOCATION": "Lake Buena Vista, FL, USA",
		"PAGES": "23--30",
		"NUMPAGES": "8",
		"URL": "https://arxiv.org/abs/1807.10953",
		"DOI": "10.1145/3278186.3278190",
		"ACMID": "3278190",
		"PUBLISHER": "ACM",
		"ADDRESS": "New York, NY, USA",
		"KEYWORDS": "scg-pub snf-asa2 scg18 jb19",
		"ABSTRACT": "Mutation testing is the state-of-the-art technique for assessing the fault-detection capacity of a test suite. Unfortunately, mutation testing consumes enormous computing resources because it runs the whole test suite for each and every injected mutant. In this paper we explore fine-grained traceability links at method level (named focal methods), to reduce the execution time of mutation testing and to verify the quality of the test cases for each individual method, instead of the usually verified overall test suite quality. Validation of our approach on the open source Apache Ant project shows a speed-up of 573.5x for the mutants located in focal methods with a quality score of 80%."
	},
	{
		"key": "Verw09a",
		"type": "inproceedings",
		"ABSTRACT": "Code executed in a fully reflective system switches\n\t\t\t\t  back and forth between application and interpreter\n\t\t\t\t  code. These two states can be seen as contexts in\n\t\t\t\t  which an expression is evaluated. Current language\n\t\t\t\t  implementations obtain reflective capabilities by\n\t\t\t\t  exposing objects to the interpreter. However, in\n\t\t\t\t  doing so these systems break the encapsulation of\n\t\t\t\t  the application objects. In this paper we propose\n\t\t\t\t  safe reflection through polymorphism, i.e. by\n\t\t\t\t  unifying the interface and ensuring the\n\t\t\t\t  encapsulation of objects from both the interpreter\n\t\t\t\t  and application context. We demonstrate a\n\t\t\t\t  homogeneous system that defines the execution\n\t\t\t\t  semantics in terms of itself, thus enforcing that\n\t\t\t\t  encapsulation is not broken.",
		"ADDRESS": "New York, NY, USA",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Toon Verwaest and Lukas Renggli",
		"BOOKTITLE": "CASTA '09: Proceedings of the first international workshop on Context-aware software technology and applications",
		"DOI": "10.1145/1595768.1595776",
		"ISBN": "978-1-60558-707-3",
		"KEYWORDS": "scg09 scg-pub tverwaes snf09 jb10 schemetalk pinocchio",
		"LOCATION": "Amsterdam, The Netherlands",
		"MEDIUM": "1",
		"PAGES": "21--24",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM",
		"TITLE": "Safe Reflection Through Polymorphism",
		"URL": "http://scg.unibe.ch/archive/papers/Verw09aSafeReflectionThroughPolymorphism.pdf",
		"YEAR": "2009",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Verw09aSafeReflectionThroughPolymorphism.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1595768.1595776"
	},
	{
		"key": "Verw10a",
		"type": "inproceedings",
		"ABSTRACT": "To support development tools like debuggers, runtime\n\t\t\t\t  systems need to provide a meta-programming interface\n\t\t\t\t  to alter their semantics and access internal data.\n\t\t\t\t  Reflective capabilities are typically fixed by the\n\t\t\t\t  Virtual Machine (VM). Unanticipated reflective\n\t\t\t\t  features must either be simulated by complex program\n\t\t\t\t  transformations, or they require the development of\n\t\t\t\t  a specially tailored VM. We propose a novel approach\n\t\t\t\t  to behavioral reflection that eliminates the barrier\n\t\t\t\t  between applications and the VM by manipulating an\n\t\t\t\t  explicit tower of first-class interpreters.\n\t\t\t\t  Pinocchio is a proof-of-concept implementation of\n\t\t\t\t  our approach which enables radical changes to the\n\t\t\t\t  interpretation of programs by explicitly\n\t\t\t\t  instantiating subclasses of the base interpreter. We\n\t\t\t\t  illustrate the design of Pinocchio through\n\t\t\t\t  non-trivial examples that extend runtime semantics\n\t\t\t\t  to support debugging, parallel debugging, and\n\t\t\t\t  back-in-time object-flow debugging. Although\n\t\t\t\t  performance is not yet addressed, we also discuss\n\t\t\t\t  numerous opportunities for optimization, which we\n\t\t\t\t  believe will lead to a practical approach to\n\t\t\t\t  behavioral reflection.",
		"ADDRESS": "New York, NY, USA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Toon Verwaest and Camillo Bruni and David Gurtner and Adrian Lienhard and Oscar Nierstrasz",
		"BOOKTITLE": "OOPSLA Onward! '10",
		"DOI": "10.1145/1869459.1869522",
		"ISBN": "978-1-4503-0203-6",
		"ISSN": "0362-1340",
		"ISSUE": "10",
		"ISSUE_DATE": "October 2010",
		"JOURNAL": "SIGPLAN Not.",
		"KEYWORDS": "scg10 scg-pub tverwaes snf10 jb11 pinocchio",
		"LOCATION": "Reno/Tahoe, NV, USA",
		"MEDIUM": "0",
		"NUMPAGES": "16",
		"PAGES": "774--789",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM",
		"TITLE": "Pinocchio: Bringing Reflection to Life with First-Class Interpreters",
		"URL": "http://scg.unibe.ch/archive/papers/Verw10aPinocchio.pdf",
		"VOLUME": "45",
		"YEAR": "2010",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Verw10aPinocchio.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/1869459.1869522"
	},
	{
		"key": "Verw11a",
		"type": "inproceedings",
		"ABSTRACT": "Dynamic updates in object-oriented\nlanguages require high-level changes to be translated\n to low-level changes. For example, removing an unused\ninstance variable from a class may shift the\nindices of other instance variables. The shift needs\nto be translated to a change of the bytecodes accessing\nthese instance variables. Current languages do not\n offer a bridge between the two levels of abstraction.\n We outline such a model, and demonstrate its usefulness\n by discussing a prototype implementation in Pharo\nSmalltalk. In addition to simplifying the implementation\n of dynamic updates, our model enables easy experiments\n in modifying the language semantics.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Toon Verwaest and Niko Schwarz and Erwann Wernli",
		"BOOKTITLE": "Proceedings of the TOOLS 2011 8th Workshop on Reflection, AOP and Meta-Data for Software Evolution (RAM-SE'11)",
		"KEYWORDS": "scg11 scg-pub tverwaes nes snf11 jb11 skip-doi",
		"MEDIUM": "1",
		"PEERREVIEW": "yes",
		"TITLE": "Runtime Class Updates using Modification Models",
		"URL": "http://scg.unibe.ch/archive/papers/Verw11aRuntimeUpdates.pdf",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Verw11aRuntimeUpdates.pdf"
	},
	{
		"key": "Verw11b",
		"type": "inproceedings",
		"ABSTRACT": "Programming idioms, design patterns and application libraries often introduce\ncumbersome and repetitive boilerplate code to a software system. Language\nextensions and external DSLs (domain specific languages) are sometimes\nintroduced to reduce the need for boilerplate code, but they also complicate\nthe system by introducing the need for language dialects and inter-language\nmediation.\nTo address this, we propose to extend the structural reflective model of the\nlanguage with object layouts, layout scopes and slots.\nBased on the new reflective language model we can 1) provide behavioral hooks\nto object layouts that are triggered when the fields of an object are accessed\nand 2) simplify the implementation of state-related language extensions such as\nstateful traits. By doing this we show how many idiomatic use cases that\nnormally require boilerplate code can be more effectively supported.\nWe present an implementation in Smalltalk, and illustrate its usage through a\nseries of extended examples.",
		"ADDRESS": "New York, NY, USA",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Toon Verwaest and Camillo Bruni and Mircea Lungu and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of the 2011 ACM international conference on Object oriented programming systems languages and applications",
		"DOI": "10.1145/2048066.2048138",
		"ISBN": "978-1-4503-0940-0",
		"KEYWORDS": "scg11 scg-pub tverwaes snf11 jb11",
		"LOCATION": "Portland, Oregon, USA",
		"MEDIUM": "0",
		"PAGES": "959--972",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM",
		"SERIES": "OOPSLA '11",
		"TITLE": "Flexible object layouts: enabling lightweight language extensions by intercepting slot access",
		"URL": "http://scg.unibe.ch/archive/papers/Verw11bFlexibleObjectLayouts.pdf",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Verw11bFlexibleObjectLayouts.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/2048066.2048138"
	},
	{
		"key": "Vran12b",
		"type": "inproceedings",
		"ABSTRACT": "After decades of development in programming languages and programming\n\t\tenvironments, Smalltalk is still one of few environments that provide advanced\n\t\tfeatures and is still widely used in the industry. However, as Java became prevalent,\n\t\tthe ability to call Java code from Smalltalk and vice versa becomes important.\n\t\tTraditional approaches to integrate the Java and Smalltalk languages are through\n\t\tlow-level communication between separate Java and Smalltalk virtual machines.\n\t\tWe are not aware of any attempt to execute and integrate the Java language\n\t\tdirectly in the Smalltalk environment. A direct integration allows for very tight and\n\t\talmost seamless integration of the languages and their objects within a single\n\t\tenvironment. Yet integration and language interoperability impose challenging\n\t\tissues related to method naming conventions, method overloading, exception handling\n\t\tand thread-locking mechanisms.  In this paper we describe ways to overcome these\n\t\tchallenges and to integrate Java into the Smalltalk environment.  Using techniques\n\t\tdescribed in this paper, the programmer can call Java code from Smalltalk using\n\t\tstandard Smalltalk idioms while the semantics of each language remains preserved.\n\t\tWe present STX:LIBJAVA - an implementation of Java virtual machine within\n\t\tSmalltalk/X - as a validation of our approach",
		"AUTHOR": "Jan Vrany and Jan Kurš and Marcel Hlopko and Claus Gittinger",
		"BOOKTITLE": "Proceedings of the 4rd International Workshop on Smalltalk Technologies (IWST'12)",
		"ISBN": "978-1-4503-1897-6",
		"KEYWORDS": "scg-pub snf-none scg12 jb13, Language Interoperability, Smalltalk, Java, kursjan",
		"MEDIUM": "1",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM",
		"TITLE": "On the Integration of Smalltalk and Java",
		"URL": "http://scg.unibe.ch/archive/papers/Vran12a.pdf",
		"DOI": "10.1016/j.scico.2013.10.011",
		"YEAR": "2012",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Vran12a.pdf"
	},
	{
		"key": "Wern11a",
		"type": "inproceedings",
		"ABSTRACT": "Applications that need to be updated but cannot be easily restarted must be updated at run-time. We\n\t\tevaluate the reflective facilities of Smalltalk with respect to dynamic soft- ware and the\n\t\tstate-of-the-art in this field. We conclude that while fine for debugging, the existing reflective\n\t\tfacilities are not appropriate for dynamically updating production systems under constant load. We\n\t\tpropose to enable dynamic updates by introducing first-class contexts as a mechanism to allow multiple\n\t\tversions of objects to coexist. Object states can be dynamically migrated from one context to another,\n\t\tand can be kept in sync with the help of bidirectional transformations. We demonstrate our approach with\n\t\tActiveContext, an extension of Smalltalk with first-class contexts. ActiveContext eliminates the need for\n\t\ta system to be quiescent for it to be updated. ActiveContext is realized in Pinocchio, an experimental\n\t\tSmalltalk implementation that fully reifies the VM to enable radical extensions. We illustrate dynamic\n\t\tupdates in ActiveContext with a typical use case, present initial benchmarks, and discuss future\n\t\tperformance improvements.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Erwann Wernli and David Gurtner and Oscar Nierstrasz",
		"BOOKTITLE": "Proceedings of International Workshop on Smalltalk Technologies (IWST 2011)",
		"KEYWORDS": "scg11 scg-pub jb11 snf11 skip-doi",
		"MEDIUM": "1",
		"NOTE": "http://esug.org/data/ESUG2011/IWST/Proceedings.pdf",
		"PAGES": "21-31",
		"PEERREVIEW": "yes",
		"TITLE": "Using First-class Contexts to realize Dynamic Software Updates",
		"URL": "http://scg.unibe.ch/archive/papers/Wern11a-ActiveContext.pdf",
		"YEAR": "2011",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wern11a-ActiveContext.pdf"
	},
	{
		"key": "Wern12a",
		"type": "inproceedings",
		"ABSTRACT": "Highly available software systems occasionally need to be updated while avoiding downtime.\nDynamic software updates reduce downtime, but still require the system to reach a quiescent state in which a global update can be performed.\nThis can be difficult for multi-threaded systems.\nWe present a novel approach to dynamic updates using first-class contexts, called Theseus.\nFirst-class contexts make global updates unnecessary: existing threads run to termination in an old context, while new threads start in a new, updated context; consistency between contexts is ensured with the help of bidirectional transformations.\nWe show how first-class contexts offer a practical and flexible approach to incremental dynamic updates, with acceptable overhead.",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Erwann Wernli and Mircea Lungu and Oscar Nierstrasz",
		"BOOKTITLE": "Objects, Components, Models and Patterns, Proceedings of TOOLS Europe 2012",
		"DOI": "10.1007/978-3-642-30561-0_21",
		"KEYWORDS": "scg-pub jb12 scg12 snf12 theseus",
		"MEDIUM": "2",
		"PAGES": "304-319",
		"PEERREVIEW": "yes",
		"TITLE": "Incremental Dynamic Updates with First-class Contexts",
		"URL": "http://scg.unibe.ch/archive/papers/Wern12a.pdf",
		"YEAR": "2012",
		"BDSK-URL-1": "http://dx.doi.org/10.1007/978-3-642-30561-0_21"
	},
	{
		"key": "Wern12b",
		"type": "inproceedings",
		"ABSTRACT": "We present a novel approach to update server applications in Java. In our approach, different versions of the code coexist in the system, but are isolated into distinct contexts. The server can switch from one context to another incrementally in order to process incoming requests. Our approach has the following characteristics: (1) updatability is defined and added to the application by developers, (2) no syntax is added to the language and the update is controlled via the manipulation of objects, (3) the whole system is migrated lazily and eventually replaces the old system, (4) it is safe to update global entities anytime and there is no need to reach update points. We demonstrate our approach by updating the Jetty web server.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Erwann Wernli",
		"BOOKTITLE": "Proceedings of HotSWUp 2012 (Fourth Workshop on Hot Topics in Software Upgrades)",
		"DOI": "10.1109/HotSWUp.2012.6226616",
		"KEYWORDS": "scg-pub jb12 scg12 snf12 theseus wern-sel",
		"MEDIUM": "1",
		"MONTH": "June",
		"PAGES": "41-45",
		"PEERREVIEW": "yes",
		"TITLE": "Theseus: Whole updates of Java server applications",
		"URL": "http://scg.unibe.ch/archive/papers/Wern12b.pdf",
		"YEAR": "2012",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wern12b.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/HotSWUp.2012.6226616"
	},
	{
		"key": "Wern12c",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"ABSTRACT": "Sharing mutable objects can result in broken invariants, exposure of internal details, and other subtle bugs. To prevent such issues, it is important to control accessibility and aliasing of objects. Dynamic Ownership is an effective way to do so, but its owner-as-dominator discipline is too restrictive: objects are either accessible or not. We propose in this paper to control accessibility and aliasing with more flexibility using two mechanisms, filters and crossing handlers. We demonstrate the benefits of the flexibility offered by these mechanisms, and report on the adaptation of a Smalltalk web server with our approach. We conclude that our variant of dynamic ownership is flexible enough to accommodate an existing design, while at the same time constraining it enough to highlight design anomalies.",
		"ACMID": "2384589",
		"ADDRESS": "New York, NY, USA",
		"AUTHOR": "Wernli, Erwann and Maerki, Pascal and Nierstrasz, Oscar",
		"BOOKTITLE": "Proceedings of the 8th symposium on Dynamic languages",
		"DOI": "10.1145/2384577.2384589",
		"ISBN": "978-1-4503-1564-7",
		"KEYWORDS": "encapsulation scg-pub scg12 snf12 ownership jb13 wern-sel",
		"LOCATION": "Tucson, Arizona, USA",
		"MEDIUM": "0",
		"NUMPAGES": "12",
		"PAGES": "83--94",
		"PEERREVIEW": "yes",
		"PUBLISHER": "ACM",
		"SERIES": "DLS '12",
		"TITLE": "Ownership, filters and crossing handlers: flexible ownership in dynamic languages",
		"URL": "http://scg.unibe.ch/archive/papers/Wern12c.pdf",
		"YEAR": "2012",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wern12c.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/2384577.2384589"
	},
	{
		"key": "Wern13a",
		"type": "article",
		"ABSTRACT": "Highly available software systems occasionally need to be updated while avoiding downtime.\n\tDynamic software updates reduce down-time, but still require the system to reach a quiescent state in\n\twhich a global update can be performed. This can be difficult for multi-threaded systems. We present a\n\tnovel approach to dynamic updates using first-class contexts, called Theseus. First-class contexts\n\tmake global updates unnecessary: existing threads run to termination in an old context, while new\n\tthreads start in a new, updated context; consistency between contexts is ensured with the help of\n\tbidirectional transformations. We show that for multi-threaded systems with coherent memory,\n\tfirst-class contexts offer a practical and flexible approach to dynamic updates, with acceptable\n\toverhead.",
		"AUTHOR": "Erwann Wernli and Mircea Lungu and Oscar Nierstrasz",
		"DOI": "10.5381/jot.2013.12.3.a1",
		"ISSN": "1660-1769",
		"JOURNAL": "Journal of Object Technology",
		"ANNOTE": "internationaljournal",
		"KEYWORDS": "context-oriented scg-pub jb13 snf-asa1 scg13 wern-sel",
		"MEDIUM": "1",
		"MONTH": "August",
		"NUMBER": "3",
		"PAGES": "1:1-27",
		"PEERREVIEW": "yes",
		"TITLE": "Incremental Dynamic Updates with First-class Contexts",
		"URL": "http://scg.unibe.ch/archive/papers/Wern13a.pdf",
		"VOLUME": "12",
		"YEAR": "2013",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wern13a.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.5381/jot.2013.12.3.a1"
	},
	{
		"key": "Wern14a",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"ABSTRACT": "Scoping behavioral variations to dynamic extents is useful to\n   support non-functional requirements that otherwise result in cross-cutting\n   code. Unfortunately, such variations are difficult to achieve with\n   traditional reflection or aspects. We show that with a modification of\n   dynamic proxies, called delegation proxies, it becomes possible to\n   reflectively implement variations that propagate to all objects accessed in\n   the dynamic extent of a message send. We demonstrate our approach with\n   examples of variations scoped to dynamic extents that help simplify code\n   related to safety, reliability, and monitoring.",
		"ACMID": "2577081",
		"ADDRESS": "New York, NY, USA",
		"AUTHOR": "Erwann Wernli and Oscar Nierstrasz and Camille Teruel and Stephane Ducasse",
		"BOOKTITLE": "Proceedings of the 13th International Conference on Modularity",
		"DOI": "10.1145/2577080.2577081",
		"ISBN": "978-1-4503-2772-5",
		"KEYWORDS": "constructs and features, dynamic extent, programming languages, proxy, reflection proxy; delegation; wern-sel scg-pub snf-asa1 scg14 jb14",
		"PEERREVIEW": "yes",
		"MEDIUM": "2",
		"LOCATION": "Lugano, Switzerland",
		"NUMPAGES": "12",
		"PAGES": "1--12",
		"PUBLISHER": "ACM",
		"SERIES": "MODULARITY '14",
		"TITLE": "Delegation Proxies: The Power of Propagation",
		"URL": "http://scg.unibe.ch/archive/papers/Wern14a.pdf",
		"YEAR": "2014",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wern14a.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1145/2577080.2577081"
	},
	{
		"key": "Wint02a",
		"type": "inproceedings",
		"ABSTRACT": "This paper presents a domain specific composition\n\t\t\t\t  language called CoCo. The CoCo language has been\n\t\t\t\t  developed in the context of the PECOS project which\n\t\t\t\t  aims at enabling component-based technology for a\n\t\t\t\t  certain class of embedded systems called \"field\n\t\t\t\t  devices\".",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Michael Winter and Thomas Genßler and Alexander Christoph and Oscar Nierstrasz and Stéphane Ducasse and Roel Wuyts and Gabriela Arévalo and Peter Müller and Christian Stich and Bastiaan Schönhage",
		"BOOKTITLE": "Proc. Second International Workshop on Composition Languages",
		"KEYWORDS": "olit skip-doi scg-pub scg-none jb-none pecos stefPub arevalo onhindex(60)",
		"NOTE": "In conjunction with 16th European Conference on Object-Oriented Programming (ECOOP) Malaga, Spain, June 11, 2002",
		"TITLE": "Components for Embedded Software — The PECOS Approach",
		"URL": "http://scg.unibe.ch/archive/pecos/public_documents/Wint02a.pdf",
		"YEAR": "2002",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/pecos/public_documents/Wint02a.pdf"
	},
	{
		"key": "Wuyt99a",
		"type": "techreport",
		"ABSTRACT": "Throughout its entire life cycle software\n\t\t\t\t  development is subject to many rules constraining\n\t\t\t\t  and guiding construction of software systems.\n\t\t\t\t  Examples are best-practice patterns, idioms, coding\n\t\t\t\t  conventions, design guidelines, architectural\n\t\t\t\t  patterns, etc. Although such regulations are widely\n\t\t\t\t  used, their usage is currently implicit or ad-hoc,\n\t\t\t\t  and most soft- ware development environments do not\n\t\t\t\t  explicitly support them. We present an approach to\n\t\t\t\t  declare explicitly software development styles in an\n\t\t\t\t  open declarative system that allows querying,\n\t\t\t\t  conformance check- ing and enforcement of these\n\t\t\t\t  declarations on the source code. We validate the\n\t\t\t\t  approach by expressing and supporting several\n\t\t\t\t  software development styles in a real-world case.",
		"ANNOTE": "notrefereed",
		"AUTHOR": "Wuyts, Roel and Mens, Kim and D'Hondt, Theo",
		"INSTITUTION": "Vrije Universiteit Brussel",
		"KEYWORDS": "scg-old scg-pub skip-doi",
		"NUMBER": "vub-prog-tr-99-07",
		"TITLE": "Explicit Support for Software Development Styles throughout the Complete Life Cycle",
		"URL": "http://scg.unibe.ch/archive/papers/Wuyt99a.pdf",
		"YEAR": "1999",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wuyt99a.pdf"
	},
	{
		"key": "Wuyt01a",
		"type": "inproceedings",
		"ABSTRACT": "Meta-programming is the act of using one system or\n\t\t\t\t  language to reason about another one. Reflection\n\t\t\t\t  describes systems that have access to and change a\n\t\t\t\t  causally connected representation of themselves,\n\t\t\t\t  hence leading to self-extensible systems . Up to\n\t\t\t\t  now, most of the reflective languages have been\n\t\t\t\t  implemented in the same paradigm. In this paper, we\n\t\t\t\t  propose symbiotic reflection as a way to\n\t\t\t\t  integrate a meta programming language with the\n\t\t\t\t  object-oriented language it reasons about and is\n\t\t\t\t  implemented in. New to this approach is that any\n\t\t\t\t  element of the implementation language can be\n\t\t\t\t  reasoned about and acted upon (not only the self\n\t\t\t\t  representation), and that both languages are of\n\t\t\t\t  different paradigms. Moreover, every language\n\t\t\t\t  implementer that is faced with the problem of\n\t\t\t\t  allowing the base language to access the underlying\n\t\t\t\t  meta-language has to solve the problem of enabling\n\t\t\t\t  entity transfer between both worlds. We propose a\n\t\t\t\t  uniform schema, called upping/downing, to this\n\t\t\t\t  problem that avoid explicit wrapping or\n\t\t\t\t  typechecking. We illustrate this with SOUL (the\n\t\t\t\t  Smalltalk Open Unification Language), a logic\n\t\t\t\t  programming language in symbiotic reflection with\n\t\t\t\t  the object-oriented language Smalltalk. We show how\n\t\t\t\t  SOUL does logic reasoning directly on Smalltalk\n\t\t\t\t  objects, and how to use this to implement type\n\t\t\t\t  snooping",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Roel Wuyts and Stéphane Ducasse",
		"BOOKTITLE": "ECOOP 2001 International Workshop on MultiParadigm Programming with Object-Oriented Languages",
		"KEYWORDS": "scg-pub skip-doi snf01 snf02 scg-none jb01 component Pecos stefPub",
		"TITLE": "Symbiotic Reflection between an Object-Oriented and a Logic Programming Language",
		"URL": "http://scg.unibe.ch/archive/papers/Wuyt01a.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wuyt01a.pdf"
	},
	{
		"key": "Wuyt01c",
		"type": "inproceedings",
		"ABSTRACT": "Supporting reuse of existing pieces of code is one\n\t\t\t\t  of the main goals of software engineering. In the\n\t\t\t\t  name of reuse, module-based programming languages\n\t\t\t\t  came to be, only to be surpassed by object-oriented\n\t\t\t\t  technology. With the same motivation component-based\n\t\t\t\t  solutions are overtaking object-oriented solutions.\n\t\t\t\t  However, the delegation-only focus of\n\t\t\t\t  component-based programming risks of resulting in\n\t\t\t\t  the same problems that modular-based approaches ran\n\t\t\t\t  into. To counter this, we claim that one of th e\n\t\t\t\t  important problems that should be addressed by\n\t\t\t\t  component languages is the composition of\n\t\t\t\t  components. More specifically, we see component\n\t\t\t\t  languages where components are black-box\n\t\t\t\t  abstractions, and with (one or more) composition\n\t\t\t\t  languages to glue them tog ether. As an example we\n\t\t\t\t  show a functional (Piccola) and a logic (QSoul)\n\t\t\t\t  composition approach.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Roel Wuyts and Stéphane Ducasse",
		"BOOKTITLE": "First OOPSLA Workshop on Language Mechanisms for Programming Software Components",
		"KEYWORDS": "scg-pub skip-doi snf01 scg-none jb01 component piccola Pecos stefPub",
		"TITLE": "Composition Languages for Black-Box Components",
		"URL": "http://scg.unibe.ch/archive/papers/Wuyt01c.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wuyt01c.pdf"
	},
	{
		"key": "Wuyt01d",
		"type": "inproceedings",
		"ABSTRACT": "This position paper presents some preliminary work\n\t\t\t\t  we made for applying declaractive component oriented\n\t\t\t\t  design in the context of embedded devices. We\n\t\t\t\t  quickly describes COMES the model we develop and\n\t\t\t\t  present how logic rules can be used to describe\n\t\t\t\t  architectures.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Roel Wuyts and Stéphane Ducasse and Gabriela Arévalo",
		"BOOKTITLE": "Ecoop 6th International Workshop on Component-Oriented Programming",
		"KEYWORDS": "scg-pub skip-doi snf01 scg-none jb01 component Pecos stefPub arevalo",
		"TITLE": "Applying Experiences with Declarative Codifications of Software Architectures on COD",
		"URL": "http://scg.unibe.ch/archive/papers/Wuyt01d.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wuyt01d.pdf"
	},
	{
		"key": "Wuyt01e",
		"type": "inproceedings",
		"ABSTRACT": "In this paper we describe an interesting context to\n\t\t\t\t  study formal methods for component systems: embedded\n\t\t\t\t  devices. The context of embedded devices is highly\n\t\t\t\t  constrained by the physical requirements the devices\n\t\t\t\t  have to adhere to. As a result, component models for\n\t\t\t\t  embedded devices are not general purpose but geared\n\t\t\t\t  towards these constrained contexts. In this paper we\n\t\t\t\t  give the concrete setting of the Pecos project (a\n\t\t\t\t  project with as goal component engineering for\n\t\t\t\t  embedded devices). We describe the Pecos component\n\t\t\t\t  model, and show possibilities where we think formal\n\t\t\t\t  verification could be useful. We would like to use\n\t\t\t\t  this as a very concrete example to discuss formal\n\t\t\t\t  verification techniques.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Roel Wuyts and Stéphane Ducasse",
		"BOOKTITLE": "International Workshop on Specification and Verification of Component-Based Systems",
		"KEYWORDS": "scg-pub skip-doi snf01 scg-none jb01 component Pecos stefPub",
		"TITLE": "Non-Functional Requirements in a Component Model for Embedded Systems",
		"URL": "http://scg.unibe.ch/archive/papers/Wuyt01e.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wuyt01e.pdf"
	},
	{
		"key": "Wuyt01f",
		"type": "inproceedings",
		"ABSTRACT": "When developing software systems, the relation\n\t\t\t\t  between design and implementation is typically left\n\t\t\t\t  unspecified. As a result design or implementation\n\t\t\t\t  can be modified independently of each other, and a\n\t\t\t\t  modification of either one does not leave any trace\n\t\t\t\t  in the other. The practical result of this is a\n\t\t\t\t  number of well-known problems such as drift and\n\t\t\t\t  erosion, documentation maintenance problems or\n\t\t\t\t  round-trip engineering trouble. To solve these\n\t\t\t\t  problems we propose to make the relation between des\n\t\t\t\t  ign and implementation explicit by expressing design\n\t\t\t\t  as a logic meta program over implementation. This is\n\t\t\t\t  the cornerstone for building a complete\n\t\t\t\t  synchronisation framework that allows one to\n\t\t\t\t  synchronise changes to design and implementation. We\n\t\t\t\t  have implem ented such synchronisation framework,\n\t\t\t\t  and applied it successfully on two case studies.",
		"ANNOTE": "internationalworkshop",
		"AUTHOR": "Roel Wuyts",
		"BOOKTITLE": "International Workshop on (Constraint) Logic Programming for Software Engineering",
		"KEYWORDS": "scg-pub skip-doi snf01 snf02 scg-none jb01",
		"MONTH": "December",
		"TITLE": "Synchronising Changes to Design and Implementation using a Declarative Meta-Programming Language",
		"URL": "http://scg.unibe.ch/archive/papers/Wuyt01f.pdf",
		"YEAR": "2001",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wuyt01f.pdf"
	},
	{
		"key": "Wuyt04a",
		"type": "article",
		"ABSTRACT": "The increasing complexity of software development\n\t\t\t\t  spawns lots of specialised tools to edit code,\n\t\t\t\t  employ UML schemes, integrate documentation, and so\n\t\t\t\t  on. The problem is that the tool builders themselves\n\t\t\t\t  are responsible for making their tools interoperable\n\t\t\t\t  with other tools or development environments.\n\t\t\t\t  Because they cannot anticipate all other tools they\n\t\t\t\t  can integrate with, a lot of tools cannot\n\t\t\t\t  co-operate. This paper introduces the classication\n\t\t\t\t  model, a lightweight integration medium that enables\n\t\t\t\t  unrelated tools that were not meant to be integrated\n\t\t\t\t  to cooperate easily. Moreover, the tool integration\n\t\t\t\t  is done by a tool integrator, and not by the tool\n\t\t\t\t  builder. To validate this claim, we show how to\n\t\t\t\t  integrate several third-party tools using the\n\t\t\t\t  classication model, and how it forms the foundation\n\t\t\t\t  for the StarBrowser, a Smalltalk browser integrating\n\t\t\t\t  different tools.",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Roel Wuyts and Stéphane Ducasse",
		"DOI": "10.1016/j.cl.2003.08.003",
		"JOURNAL": "Journal of Computer Languages, Systems and Structures",
		"KEYWORDS": "recast04 scg-pub scg-none jb04 decomp-pub",
		"MISC": "SCI impact factor 0.176",
		"NUMBER": "1-2",
		"PAGES": "63--77",
		"PUBLISHER": "Elsevier",
		"TITLE": "Unanticipated Integration of Development Tools using the Classification Model",
		"URL": "http://scg.unibe.ch/archive/papers/Wuyt04aClassifications.pdf",
		"VOLUME": "30",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wuyt04aClassifications.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.cl.2003.08.003"
	},
	{
		"key": "Wuyt04x",
		"type": "inproceedings",
		"ABSTRACT": "This paper reports on the results of the Fifth\n\t\t\t\t  International Workshop on Object-Oriented\n\t\t\t\t  Reengineering in Oslo on June 15, 2004. It\n\t\t\t\t  enumerates the presentations made, classifies the\n\t\t\t\t  contributions and lists the main results of the\n\t\t\t\t  discussions held at the workshop. As such it\n\t\t\t\t  provides the context for future workshops around\n\t\t\t\t  this topic.",
		"ANNOTE": "workshopproceedings",
		"AUTHOR": "Roel Wuyts and Serge Demeyer and Stéphane Ducasse and Kim Mens",
		"BOOKTITLE": "Object-Oriented Technology. ECOOP'04 Workshop Reader",
		"DOI": "10.1007/b104146",
		"ISBN": "978-3-540-23988-8",
		"KEYWORDS": "scg-pub scg-none jb04 stefPub recast04",
		"PAGES": "177--186",
		"PUBLISHER": "Springer-Verlag",
		"SERIES": "LNCS",
		"TITLE": "Report of the ECOOP'04 Workshop on Object-Oriented Reengineering",
		"URL": "http://scg.unibe.ch/archive/papers/Wuyt04x-OOR04Report.pdf",
		"VOLUME": "3344",
		"YEAR": "2004",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wuyt04x-OOR04Report.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1007/b104146"
	},
	{
		"key": "Wuyt05a",
		"type": "article",
		"ABSTRACT": "Software for embedded systems must cope with a\n\t\t\t\t  variety of stringent constraints, such as real-time\n\t\t\t\t  requirements, small memory footprints, and low power\n\t\t\t\t  consumption. It is usually implemented using\n\t\t\t\t  low-level programming languages, and as a result has\n\t\t\t\t  not benefitted from component-based software\n\t\t\t\t  development techniques. This paper describes a\n\t\t\t\t  data-centric component model for embedded\n\t\t\t\t  devices that (i) minimizes the number of concurrent\n\t\t\t\t  tasks needed to implement the system, (ii) allows\n\t\t\t\t  one to verify whether components meet their\n\t\t\t\t  deadlines by applying Rate Monotonic Analysis (RMA),\n\t\t\t\t  and (iii) can generate and verify schedules using\n\t\t\t\t  Constraint Logic Programming (CLP). This model forms\n\t\t\t\t  the foundation for a suite of tools for specifying,\n\t\t\t\t  composing, verifying and deploying embedded software\n\t\t\t\t  components developed in the context of the PECOS\n\t\t\t\t  project.",
		"AERES": "ACL",
		"AERESSTATUS": "aeres08",
		"ANNOTE": "internationaljournal",
		"AUTHOR": "Roel Wuyts and Stéphane Ducasse and Oscar Nierstrasz",
		"CVS": "PecosJournalPaper",
		"DOI": "10.1016/j.jss.2003.05.004",
		"INRIA": "hors",
		"JOURNAL": "Journal of Systems and Software — Special Issue on Automated Component-Based Software Engineering",
		"KEYWORDS": "scg-pub scg-none jb03 pecos stefPub",
		"MISC": "SCI impact factor 0.744",
		"NUMBER": "1",
		"PAGES": "25--34",
		"PUBLISHER": "Elsevier",
		"TITLE": "A Data-centric Approach to Composing Embedded, Real-time Software Components",
		"URL": "http://scg.unibe.ch/archive/papers/Wuyt05aPecosElsevier.pdf",
		"VOLUME": "74",
		"YEAR": "2005",
		"BDSK-URL-1": "http://scg.unibe.ch/archive/papers/Wuyt05aPecosElsevier.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1016/j.jss.2003.05.004"
	},
	{
		"key": "Zaid06a",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Andy Zaidman and Orla Greevy and Abdelwahab Hamou-Lhadj",
		"BOOKTITLE": "Proceedings of IEEE 13th Working Conference on Software Maintenance and Reengineering (WCRE)",
		"DOI": "10.1109/WCRE.2006.45",
		"KEYWORDS": "scg-pub skip-abstract greevy scg-none jb07 fb06 Dynamic Analysis moose-pub recast07",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "315--315",
		"PEERREVIEW": "yes",
		"TITLE": "Workshop on Program Comprehension through Dynamic Analysis (PCODA)",
		"URL": "http://www.lore.ua.ac.be/Events/PCODA2006/pcoda2006proceedings.pdf",
		"YEAR": "2006",
		"BDSK-URL-1": "http://www.lore.ua.ac.be/Events/PCODA2006/pcoda2006proceedings.pdf",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2006.45"
	},
	{
		"key": "Zaid08a",
		"type": "inproceedings",
		"ANNOTE": "internationalconference",
		"AUTHOR": "Andy Zaidman and Orla Greevy and Abdelwahab Hamou-Lhadj and David Röthlisberger",
		"BDSK-URL-1": "http://swerl.tudelft.nl/bin/view/PCODA/PCODA2008 http://scg.unibe.ch/archive/papers/Zaid08a-pcoda2008proceedings.pdf",
		"BOOKTITLE": "Proceedings of IEEE 15th Working Conference on Software Maintenance and Reengineering (WCRE)",
		"DOI": "10.1109/WCRE.2008.21",
		"KEYWORDS": "scg08 scg-pub skip-abstract greevy roethlisberger jb09 snf09 Dynamic Analysis",
		"MEDIUM": "2",
		"MONTH": "October",
		"PAGES": "345--346",
		"PEERREVIEW": "yes",
		"TITLE": "Workshop on Program Comprehension through Dynamic Analysis (PCODA)",
		"URL": "http://swerl.tudelft.nl/bin/view/PCODA/PCODA2008 http://scg.unibe.ch/archive/papers/Zaid08a-pcoda2008proceedings.pdf",
		"YEAR": "2008",
		"BDSK-URL-2": "http://dx.doi.org/10.1109/WCRE.2008.21",
		"BDSK-URL-3": "http://swerl.tudelft.nl/bin/view/PCODA/PCODA2008%20http://scg.unibe.ch/archive/papers/Zaid08a-pcoda2008proceedings.pdf"
	}
]